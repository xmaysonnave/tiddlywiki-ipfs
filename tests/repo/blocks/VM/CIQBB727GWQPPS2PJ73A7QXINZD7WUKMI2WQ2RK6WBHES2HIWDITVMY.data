
Š€€€{
    "title": "$:/plugins/ipfs",
    "description": "IPFS with TiddlyWiki",
    "author": "Xavier Maysonnave",
    "version": "0.4.0-beta-TW-v5.1.23+build-210208474",
    "license": "GPL-3.0-or-later",
    "tags": "$:/ipfs/core",
    "core-version": ">=5.1.2",
    "_project_uri": "https://github.com/xmaysonnave/tiddlywiki-ipfs",
    "plugin-priority": "71000",
    "plugin-type": "plugin",
    "list": "readme changelog",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/favicon.ico\": {\n            \"title\": \"$:/favicon.ico\",\n            \"text\": \"AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANd3VRrYeFdb2HhXidh4V6vYeFe52HhXudh4V6rYeFeJ2HhXW9d3VRoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1ndVBdh4V17YeFfE2HhX/th4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/th4V8TYeFde1ndVBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANd3Vk7YeFfd2HhX/9h4V//YeFf/2HhX/9h4V//ekXr/4qWV/9qBY//YeFf/2HhX/9h4V//YeFf/2HhX/9l6Wv/v0Mjg////vP///6b///8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANZ2VgvYeFeg2HhX/9h4V//dj3n/57ap/+Spmv/agGL/89vV////////////8dfR/9h4V//YeFf/2HhX/9yJcP/x19H/9uXh////////////8tnU5NqJcwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADXd1UV2HhXydh4V//YeFf/4JyK//35+P////////7+//bl4P///////fn3//Lb1f/gnoz/2HhX/9h4V//YeFf/5bCj//////////////////Xj3v/YeFf/2HhXydd3VRUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA13dWDth4V87YeFf/2HhX/9qBZP/68e///////+3Jwf/1497///////rv7f/cinL/2HhX/9h4V//YeFf/2HhX/9h4V//msaT/////////////////5Kud/9h4V//YeFf/2HhXztd3Vg4AAAAAAAAAAAAAAAAAAAAAAAAAANJ4SwHYeFey2HhX/9h4V//YeFf/7Mi////////v0Mj/8NPM////////////4aGQ/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/+Gfjf////////////z49v/Ze1v/2HhX/9h4V//YeFf/2HhXstJ4SwEAAAAAAAAAAAAAAAAAAAAA2HhXath4V//YeFf/2HhX/9h4V//79PL///////DUzf/////////////////agGH/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/3Yxy////////////9eHd/9h4V//YeFf/2HhX/9h4V//YeFf/2HhXagAAAAAAAAAAAAAAANZ2VxXYeFfw2HhX/9h4V//YeFf/2HhX//Tf2v///////vz7/////////////////+Gei//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//kq5z////////////y2dP/2HhX/9h4V//YeFf/2HhX/9h4V//YeFfw1ndWFQAAAAAAAAAA2HhXhth4V//YeFf/2HhX/9h4V//YeFf/3Y94//36+f//////////////////////7Me+/9h4V//YeFf/2Xxd/9uGav/ch2v/2Xtb//La1f////////////v08//cjXX/2HhX/9h4V//YeFf/2HhX/9h4V//YeFeGAAAAANRzUwbYeFfs2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/6sK4///////////////////////89vT/9+rm//z29P///////////////////v3///7+//////////////////z39v/ms6b/2HhX/9h4V//YeFf/2HhX/9h4V+zUc1MG2HhWTNh4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//ZfV///Pb1///////////////////////////////////////////////////////////////////////////////////////y2dP/2Xpa/9h4V//YeFf/2HhX/9h3VkzYeFeQ2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/+rAtf///v7////////////////////////////////////////////////////////////////////////////////////////////ouq//2HhX/9h4V//YeFf/2HhXkNh4V8PYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//ek37//v39//////////////////////////////////////////////////////////////////////////////////////////////////rw7v/78vD/9ePe/9uHbv/YeFfD2HhX59h4V//YeFf/2HhX/9h4V//YeFf/2HhX/+i6rv//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9N/a/9h4V+fYeFf32HhX/9+Xg//v0Mn/+Ozo//z29f/78/H/+vLw////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4J2K99h4V/ruzMT///7+//79/f/78e//+u7r//z18/////7////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////sycD66sG37f36+f/pvLH/2oFk/9h4V//YeFf/2HhX/9qCZf/krZ//+e/s///////////////////////////////////////79PH/+/Lw//77+v////////////79/P/57er///////////////////////////////////////Pc1+z9+vnm5a+h/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//ZfV7/5rSn/+/Sy//04dz/9N7Z/+7Oxv/lsaP/24dt/9h4V//YeFf/2HhX/9p/Yf/bhWj/2HpZ/9h4WP/9+Pb/////////////////////////////////9ubhzf36+frYeVn/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX//bm4v/////////////////////////////////99/a5/fj32th4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/7s3F///////++/v/8NPM/+rAtv/lrqH/79LL//36+en///+B24Ro+th4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//elYD//fj2/+e2qv/YeFf/2HhX/9h4V//YeFf47c/IJf7+/gHYeFek2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//Zelr/2HhX/9h4V//YeFf/2HhX/9h4V6QAAAAAAAAAANd3VyvYeFf82HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf813dXKwAAAAAAAAAAAAAAANh4V5LYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V5IAAAAAAAAAAAAAAAAAAAAA13hVDNh4V9fYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFfX13hVDAAAAAAAAAAAAAAAAAAAAAAAAAAA13dXKdh4V+zYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX7Nd3VykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA13dWNth4V+zYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V+zXd1Y2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA13dWKNh4V9XYeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFfV13dWKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1nZWC9h4V47YeFf72HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf72HhXjtZ2VgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANh3VifYeFee2HhX9th4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf/2HhX/9h4V//YeFf22HhXnth3VicAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADXdlYO2HhWWdh4V5rYeFfJ2HhX6th4V/nYeFf52HhX6th4V8nYeFea2HhWWdd2Vg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/+AH//8AAP/+AAAf+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAABwAAAA8AAAAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/icons/dns\": {\n            \"title\": \"$:/ipfs/icons/dns\",\n            \"text\": \"\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/icons/ens\": {\n            \"title\": \"$:/ipfs/icons/ens\",\n            \"text\": \"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV/TSotUHCwo4pChOlkQFemoVShChVArtOpgcv2EJg1Jiouj4Fpw8GOx6uDirKuDqyAIfoA4OTopukiJ/0sKLWI8OO7Hu3uPu3eA0Kwy1QxMAKpmGelkQszmVsXgK8IYRABxhGRm6nOSlILn+LqHj693MZ7lfe7P0ZcvmAzwicSzTDcs4g3imU1L57xPHGFlOU98Tjxu0AWJH7muuPzGueSwwDMjRiY9TxwhFktdrHQxKxsq8TRxNK9qlC9kXc5z3uKsVuusfU/+wnBBW1nmOs0RJLGIJUgQoaCOCqqwEKNVI8VEmvYTHv5hxy+RSyFXBYwcC6hBhez4wf/gd7dmcWrSTQongJ4X2/4YBYK7QKth29/Htt06AfzPwJXW8deaQPyT9EZHix4B/dvAxXVHU/aAyx1g6EmXDdmR/DSFYhF4P6NvygEDt0Dvmttbex+nD0CGukrdAAeHwFiJstc93h3q7u3fM+3+fgBr1HKk47w5KwAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+QMFwUEGU/z3jwAAAJZSURBVCjPhZNLSFVRFIbXXmfvs8+9evV6b6URQk0iCg16IESjwkQiDQkbRRPDZ1SGaRRBEWG3wkKNMIpolgMjzMpyEFGBJJFFg2jQg0pLTe/Dc84+j70bKXJ99M0WrG/BWvyLwALcaBeFnivXSKVMzrWx6gb+Lr2HzC1il1MYDvFailgzNWUX2bbv5uYF+32pHkwmzPbmpmw5T2zrsFZkBvQuqmGZEO6+mmq9BwCg87ooCATZG1+qAdMWVUfqgqMAAAgA0HI+tVwiH1QUywXIgfF48v7MwPo6/kFIGQOGu40M4237LWfbrJh09YoJk6yetJVjut6x0yeiau4KcdNqdUB9kpSsRE57r9y28jF2R5SMmSpjJAkwmvA7Gw/xj+mHaGkImbb0DjsI0tdIBDlrRtC1CzxgDY1b1s+JlHUOFuH4Qf2ZC7LbQwBfI6XoM1K4bkPmdiDJkrtns6ZgCWzPaXI0lXQ1yEehgfJ0bNm4OSsB/+HF5z9ZNpGtggJBh8IPQUnIN/TYUlL51d/haUafvv8y8tJBNYyCwmObAQgd9zf2OcWLmjmhMzTCV40qudUl3in0iHvRouqvyYBYnHYcfZQKpju1T8R6I2rUG9EAZESM1KUyox+vlRrffeLvsaj6ldLJ2njQODlXquoziRmgbTRE9GAO+xYJaT2zAejayV4zJTY5VPYmDGw68MoumBGnw9reJCfFPpMPo7pXdK9y2di8kFc9T2AiwOpdVBV5jrnLRsomKR9kEm7mTIuOrh1hueB3zFA5FC/UlZ8rAYIe0b52b8keTu/5B84rA4ufLFw3AAAAAElFTkSuQmCC\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/icons/github\": {\n            \"title\": \"$:/ipfs/icons/github\",\n            \"text\": \"\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/icons/ipfs\": {\n            \"title\": \"$:/ipfs/icons/ipfs\",\n            \"text\": \"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV/TSotUHCwo4pChOlkQFemoVShChVArtOpgcv2EJg1Jiouj4Fpw8GOx6uDirKuDqyAIfoA4OTopukiJ/0sKLWI8OO7Hu3uPu3eA0Kwy1QxMAKpmGelkQszmVsXgK8IYRABxhGRm6nOSlILn+LqHj693MZ7lfe7P0ZcvmAzwicSzTDcs4g3imU1L57xPHGFlOU98Tjxu0AWJH7muuPzGueSwwDMjRiY9TxwhFktdrHQxKxsq8TRxNK9qlC9kXc5z3uKsVuusfU/+wnBBW1nmOs0RJLGIJUgQoaCOCqqwEKNVI8VEmvYTHv5hxy+RSyFXBYwcC6hBhez4wf/gd7dmcWrSTQongJ4X2/4YBYK7QKth29/Htt06AfzPwJXW8deaQPyT9EZHix4B/dvAxXVHU/aAyx1g6EmXDdmR/DSFYhF4P6NvygEDt0Dvmttbex+nD0CGukrdAAeHwFiJstc93h3q7u3fM+3+fgBr1HKk47w5KwAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QMFwUDBo26RQ4AAAAZdEVYdENvbW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAB/UlEQVQoz42TS2sTURiGn3PLdDK5dKat9YYoLoqu3Im6cNeFy/6AgkEsiAvpDyhS3ClFJCuRLor4E1wE+yMqQsWF9dKmTWOaqeklmcyZcSEVm47guzy8zzkv7/cdQYYmF5euAc+BBHhUq0y/H/SIAeAUMO+4+XvlYEQB7O60bO/w4CXwuFaZ3j4GTi4u5YCH2pi5YPx0uVj2EeL3nWma0gnbtBpbbRv354FqrTIdi8nFpTtCyIXh0dEJf2wcKWVWehJraTe3CVvN1SRJZmVv7+C1MWaiOBz8EwKQSlH0fYzjXEli+0YKITHG5evHVZr1Day1JyBrLc36BvW1z5T9UZQ2aCEE+UIB1/PohG3WWh8YO3cek8sB0I967DQaFMs+Zy9eRgiBEAL9pyUhKPkBNi7xY71ObCOEkuTzBc5cuITS+nj0wVhKawqlMtFBl9QmlIKRExCAzipiyPMo+QFOIY/rFbLLStOUNE3Jellrc+L8yC9tHLP/c5f/VSdsY+M+MkmSqZ3G1krY3CbJGMXfC9BqbNLaqq8AU+p77e2XsRu3X1kbb+53dq9LpTzjOETdLjqXw3FdOmGbxvq35uH+3qxUcubd/btrx5b85tMXgVRqzhlyH+icMY6Xpx9Fvah7WAWeLM9UwszfcaRbz6pXhRQLjufGwOzyTOXToOcXpMLGTLGqOcgAAAAASUVORK5CYII=\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/image/bluelight\": {\n            \"title\": \"$:/ipfs/image/bluelight\",\n            \"modified\": \"20201224045157536\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/png\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/image/ens\": {\n            \"title\": \"$:/ipfs/image/ens\",\n            \"modified\": \"20201224044634920\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ensdomains/ens-app/dev/LICENSE\",\n            \"_project_uri\": \"https://github.com/ensdomains/ens-app/\",\n            \"_source_uri\": \"https://github.com/ensdomains/ens-app/blob/dev/public/safari-pinned-tab.svg\",\n            \"text\": \"<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   version=\\\"1.0\\\"\\n   width=\\\"18\\\"\\n   height=\\\"18\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   preserveAspectRatio=\\\"xMidYMid meet\\\"\\n   id=\\\"svg14\\\"\\n   sodipodi:docname=\\\"ens-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <defs\\n     id=\\\"defs18\\\" />\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview16\\\"\\n     showgrid=\\\"false\\\"\\n     inkscape:zoom=\\\"12.361274\\\"\\n     inkscape:cx=\\\"41.295086\\\"\\n     inkscape:cy=\\\"21.734019\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg14\\\" />\\n  <metadata\\n     id=\\\"metadata2\\\">\\nCreated by potrace 1.11, written by Peter Selinger 2001-2013\\n<rdf:RDF>\\n  <cc:Work\\n     rdf:about=\\\"\\\">\\n    <dc:format>image/svg+xml</dc:format>\\n    <dc:type\\n       rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n    <dc:title></dc:title>\\n  </cc:Work>\\n</rdf:RDF>\\n</metadata>\\n  <g\\n     transform=\\\"matrix(0.08837363,0,0,-0.07925696,-8.0787259,127.6037)\\\"\\n     id=\\\"g12\\\"\\n     style=\\\"fill:#000000;stroke:none\\\">\\n    <path\\n       d=\\\"m 640,1519 c -69,-48 -173,-122 -231,-163 -94,-65 -110,-82 -134,-129 -30,-63 -37,-155 -15,-222 15,-49 61,-135 71,-135 6,0 437,704 447,731 7,19 -17,4 -138,-82 z\\\"\\n       id=\\\"path4\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 856,1598 c 4,-7 44,-67 89,-133 118,-175 286,-437 393,-615 93,-154 122,-224 125,-300 2,-55 17,-35 52,75 26,80 28,92 22,217 -7,185 -45,284 -149,387 -35,36 -520,381 -534,381 -3,0 -2,-6 2,-12 z\\\"\\n       id=\\\"path6\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 141,1068 C 97,969 87,913 93,776 98,649 106,607 146,523 163,485 224,403 254,378 291,346 772,9 776,12 c 2,2 -57,95 -131,206 -132,199 -320,496 -404,639 -48,81 -70,145 -73,210 -1,23 -3,43 -4,43 -2,0 -12,-19 -23,-42 z\\\"\\n       id=\\\"path8\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 1079,398 C 962,204 859,34 851,20 l -16,-25 30,21 c 306,211 436,304 461,331 51,53 72,165 49,254 -14,51 -63,149 -76,149 -4,0 -103,-159 -220,-352 z\\\"\\n       id=\\\"path10\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/image/ethereum\": {\n            \"title\": \"$:/ipfs/image/ethereum\",\n            \"caption\": \"ethereum (Brands)\",\n            \"modified\": \"20201224040451692\",\n            \"tags\": \"$:/tags/Image [[Font Awesome 5]] Brands $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://creativecommons.org/licenses/by/4.0\",\n            \"_project_uri\": \"https://fontawesome.com/\",\n            \"_source_uri\": \"http://fa5-free-svg.tiddlyspot.com/#%24%3A%2Fimages%2Ffa5%2Fbrands%2Fethereum\",\n            \"text\": \"<svg class=\\\"tc-image-ethereum tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 320 512\\\">\\n  <path d=\\\"M311.9 260.8L160 353.6 8 260.8 160 0l151.9 260.8zM160 383.4L8 290.6 160 512l152-221.4-152 92.8z\\\"/>\\n</svg>\"\n        },\n        \"$:/ipfs/image/ice\": {\n            \"title\": \"$:/ipfs/image/ice\",\n            \"modified\": \"20200811040053586\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $$:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs-inactive/logo/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/ipfs-inactive/logo/\",\n            \"_source_uri\": \"https://github.com/ipfs-inactive/logo/blob/master/vector/ipfs-logo-vector-ice-text.svg\",\n            \"text\": \"<svg\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n  style=\\\"enable-background:new\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  height=\\\"512\\\"\\n  width=\\\"512\\\"\\n  version=\\\"1.1\\\"\\n  xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n  xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n  viewBox=\\\"0 0 512 512\\\"\\n>\\n  <defs>\\n    <linearGradient id=\\\"c\\\" y2=\\\"771.51\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.51\\\" x2=\\\"527.72\\\" x1=\\\"84.315\\\">\\n      <stop stop-color=\\\"#4a9ea1\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n    <linearGradient id=\\\"d\\\" y2=\\\"771.48\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.48\\\" x2=\\\"512.36\\\" x1=\\\"99.675\\\">\\n      <stop stop-color=\\\"#63d3d7\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n  </defs>\\n  <g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(-50.017,-515.51)\\\">\\n      <path fill=\\\"url(#c)\\\" d=\\\"m84.315 899.51 221.7 128 221.7-128v-256l-221.7-127.99-221.7 128z\\\"/>\\n      <path fill=\\\"url(#d)\\\" d=\\\"m283.13 546.35-160.74 92.806c0.32126 2.8543 0.32125 5.7352 0 8.5894l160.75 92.806c13.554-10.001 32.043-10.001 45.597 0l160.75-92.807c-0.32126-2.8543-0.32293-5.7338-0.001-8.588l-160.74-92.806c-13.554 10.001-32.044 10.001-45.599 0zm221.79 127.03-160.92 93.84c1.884 16.739-7.3611 32.751-22.799 39.489l0.18062 184.58c2.6325 1.1489 5.1267 2.5886 7.438 4.294l160.75-92.805c-1.884-16.739 7.3611-32.752 22.799-39.49v-185.61c-2.6325-1.1489-5.1281-2.5886-7.4394-4.294zm-397.81 1.0315c-2.3112 1.7054-4.8054 3.1465-7.438 4.2954v185.61c15.438 6.7378 24.683 22.75 22.799 39.489l160.74 92.806c2.3112-1.7054 4.8069-3.1465 7.4394-4.2954v-185.61c-15.438-6.7378-24.683-22.75-22.799-39.489l-160.74-92.81z\\\"/>\\n    </g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(0,-196.66)\\\">\\n      <path fill-opacity=\\\".25098\\\" d=\\\"m256 708.66 221.7-128v-256l-221.7 128v256z\\\"/>\\n      <path fill-opacity=\\\".039216\\\" d=\\\"m256 708.66v-256l-221.7-128v256l221.7 128z\\\"/>\\n      <path fill-opacity=\\\".13018\\\" d=\\\"m34.298 324.66 221.7 128 221.7-128-221.7-128-221.7 128z\\\"/>\\n    </g>\\n  </g>\\n  <g style=\\\"enable-background:new\\\" fill=\\\"#fff\\\">\\n    <path d=\\\"m103.09 186h-29.2v141.2h29.2v-141.2z\\\"/>\\n    <path d=\\\"m153.97 327.2v-51.8c7.2 0.6 14.4 0.6 20.4 0.6 41.6 0 53.6-20.6 53.6-46 0-30.8-22-44-56-44h-47.2v141.2h29.2zm15.8-71.8c-5.4 0-13.4 0-15.8-0.2v-48h18.2c17.6 0 27.6 8.4 27.6 23.8v0.4c0 12-4.4 24-30 24z\\\"/>\\n    <path d=\\\"m327.95 186h-88.6v141.2h29.2v-62.2h55.4v-21.2h-55.6v-36.4h57.6l2-21.4z\\\"/>\\n    <path d=\\\"m423.51 213.6 7.6-19.6c-11.4-8.2-26.8-11.2-46.2-11.2-28.2 0-51.4 13.2-51.4 40.2 0 24.2 17.8 33.8 35.6 39.6l17.8 6c12.2 4.2 22.2 8.2 22.2 21.4 0 12-10.4 16.8-26.2 16.8-16 0-33.2-4.8-43-11l-7.6 21.2c12.8 8.2 29 12.2 50.8 12.2 31 0 55-13.6 55-42.6 0-27-20.6-35.6-41.4-42.6l-19.4-6.4c-8.4-2.8-14.8-6.6-14.8-17.4 0-11 9-15.4 22.4-15.4 16.4 0 29.2 3 38.6 8.8z\\\"/>\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/image/ipfs\": {\n            \"title\": \"$:/ipfs/image/ipfs\",\n            \"modified\": \"20201224044634920\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs-inactive/logo/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/ipfs-inactive/logo/\",\n            \"_source_uri\": \"https://github.com/ipfs-inactive/logo/blob/master/vector/ipfs-logo-vector-black.svg\",\n            \"text\": \"<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   style=\\\"enable-background:new\\\"\\n   height=\\\"22\\\"\\n   width=\\\"22\\\"\\n   version=\\\"1.1\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   id=\\\"svg24\\\"\\n   sodipodi:docname=\\\"ipfs-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <metadata\\n     id=\\\"metadata28\\\">\\n    <rdf:RDF>\\n      <cc:Work\\n         rdf:about=\\\"\\\">\\n        <dc:format>image/svg+xml</dc:format>\\n        <dc:type\\n           rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n        <dc:title></dc:title>\\n      </cc:Work>\\n    </rdf:RDF>\\n  </metadata>\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview26\\\"\\n     showgrid=\\\"false\\\"\\n     units=\\\"pt\\\"\\n     inkscape:zoom=\\\"5.2149125\\\"\\n     inkscape:cx=\\\"133.61143\\\"\\n     inkscape:cy=\\\"41.576599\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg24\\\" />\\n  <defs\\n     id=\\\"defs8\\\">\\n    <linearGradient\\n       id=\\\"b\\\"\\n       y2=\\\"771.51001\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"527.71997\\\"\\n       y1=\\\"771.51001\\\"\\n       x1=\\\"84.315002\\\">\\n      <stop\\n         offset=\\\"0\\\"\\n         id=\\\"stop2\\\" />\\n    </linearGradient>\\n    <linearGradient\\n       id=\\\"a\\\"\\n       y2=\\\"771.47998\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"512.35999\\\"\\n       y1=\\\"771.47998\\\"\\n       x1=\\\"99.675003\\\">\\n      <stop\\n         stop-color=\\\"#d8d8d8\\\"\\n         offset=\\\"0\\\"\\n         id=\\\"stop5\\\" />\\n    </linearGradient>\\n  </defs>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-24.339808,-128.87748)\\\"\\n     id=\\\"g14\\\">\\n    <path\\n       d=\\\"m 84.315,899.51 221.7,128 221.7,-128 v -256 l -221.7,-127.99 -221.7,128 z\\\"\\n       id=\\\"path10\\\"\\n       style=\\\"fill:url(#b)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 283.13,546.35 -160.74,92.806 c 0.32126,2.8543 0.32125,5.7352 0,8.5894 l 160.75,92.806 c 13.554,-10.001 32.043,-10.001 45.597,0 l 160.75,-92.807 c -0.32126,-2.8543 -0.32293,-5.7338 -0.001,-8.588 l -160.74,-92.806 c -13.554,10.001 -32.044,10.001 -45.599,0 z M 504.92,673.38 344,767.22 c 1.884,16.739 -7.3611,32.751 -22.799,39.489 l 0.18062,184.58 c 2.6325,1.1489 5.1267,2.5886 7.438,4.294 l 160.75,-92.805 c -1.884,-16.739 7.3611,-32.752 22.799,-39.49 v -185.61 c -2.6325,-1.1489 -5.1281,-2.5886 -7.4394,-4.294 z m -397.81,1.0315 c -2.3112,1.7054 -4.8054,3.1465 -7.438,4.2954 v 185.61 c 15.438,6.7378 24.683,22.75 22.799,39.489 l 160.74,92.806 c 2.3112,-1.7054 4.8069,-3.1465 7.4394,-4.2954 v -185.61 c -15.438,-6.7378 -24.683,-22.75 -22.799,-39.489 l -160.74,-92.81 z\\\"\\n       id=\\\"path12\\\"\\n       style=\\\"fill:url(#a)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-9.9010468,-49.164992)\\\"\\n     id=\\\"g22\\\">\\n    <path\\n       d=\\\"m 256,708.66 221.7,-128 v -256 l -221.7,128 z\\\"\\n       id=\\\"path16\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.25097997\\\" />\\n    <path\\n       d=\\\"m 256,708.66 v -256 l -221.7,-128 v 256 z\\\"\\n       id=\\\"path18\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.03921599\\\" />\\n    <path\\n       d=\\\"m 34.298,324.66 221.7,128 221.7,-128 -221.7,-128 z\\\"\\n       id=\\\"path20\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.13018003\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/image/tiddlywiki\": {\n            \"title\": \"$:/ipfs/image/tiddlywiki\",\n            \"modified\": \"20200723080350311\",\n            \"_canonical_uri\": \"ipfs://bafkreihzzc42nwumjeaz4d6kxsbxa6vy5llnsvqtz3xjjwnjrhwkjy5loq\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/svg+xml\"\n        },\n        \"$:/ipfs/images/user-cog\": {\n            \"title\": \"$:/ipfs/images/user-cog\",\n            \"caption\": \"user-cog (Solid)\",\n            \"modified\": \"20201224040451692\",\n            \"tags\": \"$:/tags/Image [[Font Awesome 5]] Solid $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://creativecommons.org/licenses/by/4.0\",\n            \"_project_uri\": \"https://fontawesome.com/\",\n            \"_source_uri\": \"http://fa5-free-svg.tiddlyspot.com/#%24%3A%2Fimages%2Ffa5%2Fsolid%2Fuser-cog\",\n            \"text\": \"<svg\\n  class=\\\"tc-image-user-cog tc-image-button\\\"\\n  width=\\\"22pt\\\"\\n  height=\\\"22pt\\\"\\n  viewBox=\\\"0 0 640 512\\\"\\n>\\n  <path d=\\\"M610.5 373.3c2.6-14.1 2.6-28.5 0-42.6l25.8-14.9c3-1.7 4.3-5.2 3.3-8.5-6.7-21.6-18.2-41.2-33.2-57.4-2.3-2.5-6-3.1-9-1.4l-25.8 14.9c-10.9-9.3-23.4-16.5-36.9-21.3v-29.8c0-3.4-2.4-6.4-5.7-7.1-22.3-5-45-4.8-66.2 0-3.3.7-5.7 3.7-5.7 7.1v29.8c-13.5 4.8-26 12-36.9 21.3l-25.8-14.9c-2.9-1.7-6.7-1.1-9 1.4-15 16.2-26.5 35.8-33.2 57.4-1 3.3.4 6.8 3.3 8.5l25.8 14.9c-2.6 14.1-2.6 28.5 0 42.6l-25.8 14.9c-3 1.7-4.3 5.2-3.3 8.5 6.7 21.6 18.2 41.1 33.2 57.4 2.3 2.5 6 3.1 9 1.4l25.8-14.9c10.9 9.3 23.4 16.5 36.9 21.3v29.8c0 3.4 2.4 6.4 5.7 7.1 22.3 5 45 4.8 66.2 0 3.3-.7 5.7-3.7 5.7-7.1v-29.8c13.5-4.8 26-12 36.9-21.3l25.8 14.9c2.9 1.7 6.7 1.1 9-1.4 15-16.2 26.5-35.8 33.2-57.4 1-3.3-.4-6.8-3.3-8.5l-25.8-14.9zM496 400.5c-26.8 0-48.5-21.8-48.5-48.5s21.8-48.5 48.5-48.5 48.5 21.8 48.5 48.5-21.7 48.5-48.5 48.5zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm201.2 226.5c-2.3-1.2-4.6-2.6-6.8-3.9l-7.9 4.6c-6 3.4-12.8 5.3-19.6 5.3-10.9 0-21.4-4.6-28.9-12.6-18.3-19.8-32.3-43.9-40.2-69.6-5.5-17.7 1.9-36.4 17.9-45.7l7.9-4.6c-.1-2.6-.1-5.2 0-7.8l-7.9-4.6c-16-9.2-23.4-28-17.9-45.7.9-2.9 2.2-5.8 3.2-8.7-3.8-.3-7.5-1.2-11.4-1.2h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c10.1 0 19.5-3.2 27.2-8.5-1.2-3.8-2-7.7-2-11.8v-9.2z\\\"/>\\n</svg>\"\n        },\n        \"$:/ipfs/logo/bluelight\": {\n            \"title\": \"$:/ipfs/logo/bluelight\",\n            \"modified\": \"20200804065100279\",\n            \"_canonical_uri\": \"ipfs://bafybeibi5ldguonidlwomjxwjehodpmypgex5qd2fe6f6yuka4dqvbzvpq\",\n            \"_import_uri\": \"ipfs://bafybeiejplubmcgpkaqwjc23ebo6vorv2p4cwlr7kkhm4cakgtneefjuc4\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $$:/isAttachment $:/isIpfs\",\n            \"type\": \"image/jpg\"\n        },\n        \"$:/ipfs/boot/bundle\": {\n            \"title\": \"$:/ipfs/boot/bundle\",\n            \"tags\": \"$:/ipfs/boot/modules\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n// boot modules\\n{{{ [is[system]type[application/javascript]ipfs-boot-modules[yes]] ||$:/core/templates/plain-text-tiddler}}}\\n\"\n        },\n        \"$:/boot/boot.js_build\": {\n            \"title\": \"$:/boot/boot.js_build\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_owner\": \"$:/boot/boot.js\",\n            \"_cid\": \"bafybeieauiekrqlndu4vmwjuo2ugujjoeg6ih32dkqen7o2c42y2gzluvq\",\n            \"_cid_uri\": \"ipfs://bafybeieauiekrqlndu4vmwjuo2ugujjoeg6ih32dkqen7o2c42y2gzluvq\",\n            \"_parent_cid\": \"bafybeibev2egeaq7cnjuea7344dqyo6glc6p6cnvyvcyho4vshigctwlyi\",\n            \"_parent_size\": \"126251\",\n            \"_parent_uri\": \"ipfs://bafybeibev2egeaq7cnjuea7344dqyo6glc6p6cnvyvcyho4vshigctwlyi\",\n            \"_raw_hash\": \"61ea4302de4f974b1734a7b15e3bb43bcb659d20320f5e77ab6009e8601765fb\",\n            \"_semver\": \"0.4.0-beta-TW-v5.1.24-pre+build\",\n            \"_source_path\": \"$_boot_boot.js-0.4.0-beta-TW-v5.1.24-pre+build-210207333.json\",\n            \"_source_size\": \"126142\",\n            \"_source_uri\": \"ipfs://bafybeibev2egeaq7cnjuea7344dqyo6glc6p6cnvyvcyho4vshigctwlyi/$_boot_boot.js-0.4.0-beta-TW-v5.1.24-pre+build-210207333.json\",\n            \"_version\": \"0.4.0-beta-TW-v5.1.24-pre+build-210207333\"\n        },\n        \"$:/library/ipfs-library-modules.js_build\": {\n            \"title\": \"$:/library/ipfs-library-modules.js_build\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_owner\": \"$:/library/ipfs-library-modules.js\",\n            \"_cid\": \"bafybeibtrghdihuwif3i4wbprfjegdd4ktwhacskvll325vkndg26wylcy\",\n            \"_cid_uri\": \"ipfs://bafybeibtrghdihuwif3i4wbprfjegdd4ktwhacskvll325vkndg26wylcy\",\n            \"_parent_cid\": \"bafybeieiybujoeejcxdr3wpumypdfhkhzlv475rcj5zhxjjoxarqcgn6jm\",\n            \"_parent_size\": \"133090\",\n            \"_parent_uri\": \"ipfs://bafybeieiybujoeejcxdr3wpumypdfhkhzlv475rcj5zhxjjoxarqcgn6jm\",\n            \"_raw_hash\": \"ffa29e59777026489dfb9cef812d6af98372ac1ef13fad441b68bb3e6bd33c42\",\n            \"_semver\": \"1.0.0+build\",\n            \"_source_path\": \"$_library_ipfs-library-modules.js-1.0.0+build-210207333.json\",\n            \"_source_size\": \"132982\",\n            \"_source_uri\": \"ipfs://bafybeieiybujoeejcxdr3wpumypdfhkhzlv475rcj5zhxjjoxarqcgn6jm/$_library_ipfs-library-modules.js-1.0.0+build-210207333.json\",\n            \"_version\": \"1.0.0+build-210207333\"\n        },\n        \"$:/config/PreferredSaver\": {\n            \"title\": \"$:/config/PreferredSaver\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/core/modules/savers/download.js\"\n        },\n        \"$:/config/encryption\": {\n            \"title\": \"$:/config/encryption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"standford\"\n        },\n        \"$:/ipfs/saver/api\": {\n            \"title\": \"$:/ipfs/saver/api\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\"\n        },\n        \"$:/ipfs/saver/ens/domain\": {\n            \"title\": \"$:/ipfs/saver/ens/domain\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/export\": {\n            \"title\": \"$:/ipfs/saver/export\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"json\"\n        },\n        \"$:/ipfs/saver/gateway\": {\n            \"title\": \"$:/ipfs/saver/gateway\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/gateway/https/dweb.link\"\n        },\n        \"$:/ipfs/saver/ipns/key\": {\n            \"title\": \"$:/ipfs/saver/ipns/key\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/ipns/name\": {\n            \"title\": \"$:/ipfs/saver/ipns/name\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/pin\": {\n            \"title\": \"$:/ipfs/saver/pin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/ipfs/saver/policy\": {\n            \"title\": \"$:/ipfs/saver/policy\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"gateway\"\n        },\n        \"$:/ipfs/saver/protocol\": {\n            \"title\": \"$:/ipfs/saver/protocol\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ipfs\"\n        },\n        \"$:/ipfs/saver/provider\": {\n            \"title\": \"$:/ipfs/saver/provider\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"http\"\n        },\n        \"$:/ipfs/saver/unpin\": {\n            \"title\": \"$:/ipfs/saver/unpin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/ipfs/saver/verbose\": {\n            \"title\": \"$:/ipfs/saver/verbose\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"fetch from IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Fetch IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"generate IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Generate IPNS key\"\n        },\n        \"$:/language/Buttons/Ipfs/Refresh/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Refresh/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"refresh\"\n        },\n        \"$:/language/Buttons/Ipfs/Refresh/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Refresh/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Perform a full refresh of the tiddler\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin this wiki to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin tiddler resources to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin tiddler resources from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin this wiki from IPFS\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Caption\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"mobile console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Hint\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Load/Show/Hide Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Hide\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Hide\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Hide Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Load\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Load\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Load Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Show\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Show\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Show Mobile Console\"\n        },\n        \"$:/language/Buttons/Encryption/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set or clear a password or a public key for saving this wiki\"\n        },\n        \"$:/language/Buttons/Encryption/ClearPassword/Caption\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearPassword/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"clear password or public key\"\n        },\n        \"$:/language/Buttons/Encryption/ClearPassword/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearPassword/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Clear the password\"\n        },\n        \"$:/language/Buttons/Encryption/ClearEncryptionPublicKey/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearEncryptionPublicKey/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Clear the public encryption key\"\n        },\n        \"$:/language/Buttons/Encryption/SetPassword/Caption\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetPassword/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"set password or public key\"\n        },\n        \"$:/language/Buttons/Encryption/SetPassword/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetPassword/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set a password for saving this wiki with Standford encryption\"\n        },\n        \"$:/language/Buttons/Encryption/SetEncryptionPublicKey/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetEncryptionPublicKey/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set a public encryption key for saving this wiki with Ethereum encryption\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Manager\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open ENS Domain Manager\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Domain content\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open resolved ENS Domain content\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"remove\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Remove IPNS name and IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"rename\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Rename IPNS name\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"resolve and open\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open resolved IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/To/Ens/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/To/Ens/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to ENS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/To/Ens/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/To/Ens/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish IPNS key to ENS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Saver\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings are only used when saving to IPFS.\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Verbose\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Verbose\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Saver Verbose\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Url\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Url\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Server URL\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/ApiUrl\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/ApiUrl\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"API\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/GatewayUrl\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/GatewayUrl\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Ens\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Ens\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/EnsDomain\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/EnsDomain\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS domain\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Ipns\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Ipns\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/IpnsName\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/IpnsName\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS name\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/IpnsKey\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/IpnsKey\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS key\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Resolved\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Resolved\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Resolved\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Global\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Global\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Global\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Verbose/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Verbose/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Verbose\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Pin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Pin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin Current\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Unpin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Unpin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin Previous\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Wait/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Wait/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Wait\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Relative URL Policy\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy/Origin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy/Origin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Origin\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy/Gateway/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy/Gateway/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Protocol\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ens/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ens/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipfs/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipfs/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipns/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipns/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Static/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Static/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Static\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Json/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Json/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"JSON\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Tid/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Tid/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"TID\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Provider\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/Default/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/Default/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Default\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/Window/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/Window/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Companion\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/HTTP/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/HTTP/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"HTTP Client\"\n        },\n        \"$:/language/ControlPanel/Basics/Version/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Basics/Version/Prompt\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>~TiddlyWiki</b>:\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Version/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Version/Prompt\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>IPFS</b>:\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Encryption\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Standford/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Standford/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Standford encryption\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Ethereum/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Ethereum/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Ethereum public key\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Signature/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Signature/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Sign Ethereum encrypted content\"\n        },\n        \"$:/language/ControlPanel/Settings/Compression/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Compression/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Compression\"\n        },\n        \"$:/language/ControlPanel/Settings/Compression/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Compression/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Content Compression\"\n        },\n        \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Preferred Saver\"\n        },\n        \"$:/language/ControlPanel/Appearance/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Appearance/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Ways to customise the appearance of your <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/ControlPanel/Info/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Info/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Information about this <b>~TiddlyWiki</b>\"\n        },\n        \"$:/language/ControlPanel/Saving/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Saving/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Settings used for saving the entire <b>~TiddlyWiki</b> as a single file via a saver module.\"\n        },\n        \"$:/language/ControlPanel/Settings/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings let you customise the behaviour of <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/EditTemplate/Body/External/Hint\": {\n            \"title\": \"$:/language/EditTemplate/Body/External/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"This tiddler shows content stored outside of the main ~TiddlyWiki file.<br/>You can edit the tags and fields but cannot directly edit the content itself\"\n        },\n        \"$:/language/Export/Exported/Hint\": {\n            \"title\": \"$:/language/Export/Exported/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"The following tiddlers were exported:\"\n        },\n        \"$:/language/Export/Listing/Cancel/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Cancel/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Cancel\"\n        },\n        \"$:/language/Export/Listing/Hint\": {\n            \"title\": \"$:/language/Export/Listing/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These tiddlers are ready to be exported:\"\n        },\n        \"$:/language/Export/Listing/Export/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Export/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export All\"\n        },\n        \"$:/language/Export/Listing/Title/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Title/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Title\"\n        },\n        \"$:/language/Import/Deleted/Hint\": {\n            \"title\": \"$:/language/Import/Deleted/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"The following tiddlers were deleted:\"\n        },\n        \"$:/language/Import/Listing/Hint\": {\n            \"title\": \"$:/language/Import/Listing/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These tiddlers are ready to be imported:\"\n        },\n        \"$:/language/Import/Listing/ImportAll/Caption\": {\n            \"title\": \"$:/language/Import/Listing/ImportAll/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Import\"\n        },\n        \"$:/language/Import/Listing/DeleteAll/Caption\": {\n            \"title\": \"$:/language/Import/Listing/DeleteAll/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Delete\"\n        },\n        \"$:/language/NetworkError/Fetch\": {\n            \"title\": \"$:/language/NetworkError/Fetch\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Network Error while loading...\"\n        },\n        \"$:/language/LazyLoadingWarning\": {\n            \"title\": \"$:/language/LazyLoadingWarning\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<p>Trying to load external Tiddler content...</p>\"\n        },\n        \"$:/language/Encryption/ConfirmClearEncryptionPublicKey\": {\n            \"title\": \"$:/language/Encryption/ConfirmClearEncryptionPublicKey\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Do you wish to clear the encryption public key? This will remove the encryption applied when saving this wiki.\"\n        },\n        \"$:/ipfs/library/eruda\": {\n            \"title\": \"$:/ipfs/library/eruda\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/liriliri/eruda/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/liriliri/eruda\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/eruda@2.4.1/eruda.min.js\",\n            \"_source_sri\": \"sha384-nc47C28fBcDZCcelSM4kJI1x5Th9e2tkG9AdZK/7sJcbkRNdd184sr51K0dW+FIK\"\n        },\n        \"$:/ipfs/library/eth-sig-util\": {\n            \"title\": \"$:/ipfs/library/eth-sig-util\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/xmaysonnave/eth-sig-util/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/xmaysonnave/eth-sig-util\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/gh/xmaysonnave/eth-sig-util@3.0.1/eth-sig-util.umd.min.js\",\n            \"_source_sri\": \"sha384-l67mglUQ5EqK0OQ9L3nxw501X8QbfS06RNIAKNsAHrhib6I+GMGApLvwNZ2eRnYK\"\n        },\n        \"$:/ipfs/library/ethers\": {\n            \"title\": \"$:/ipfs/library/ethers\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ethers-io/ethers.js/master/LICENSE.md\",\n            \"_project_uri\": \"https://github.com/ethers-io/ethers.js/\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/ethers@5.0.29/dist/ethers.umd.min.js\",\n            \"_source_sri\": \"sha384-nTbrLvJ0Rz/RbG/OAea4ei/4ZrEkmP4xKDw58aNdkP/vfGCaCnjYQ8S2RAho/GWP\"\n        },\n        \"$:/ipfs/library/ipfs-http-client\": {\n            \"title\": \"$:/ipfs/library/ipfs-http-client\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-http-client/LICENSE-MIT\",\n            \"_project_uri\": \"https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs-http-client\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/ipfs-http-client@49.0.1/dist/index.min.js\",\n            \"_source_sri\": \"sha384-+6cPfFrE7vxj2mdQ/ziDUCps+MMPb+F1vHmWijPJ3J4OwxSLi2Nby10NqUPo/EDv\"\n        },\n        \"$:/ipfs/library/bundle\": {\n            \"title\": \"$:/ipfs/library/bundle\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n// Ipfs Library modules\\n{{{ [is[system]type[application/javascript]ipfs-library-modules[yes]] ||$:/core/templates/plain-text-tiddler}}}\\n\"\n        },\n        \"$:/core/modules/commands/clearkeys.js\": {\n            \"title\": \"$:/core/modules/commands/clearkeys.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/clearkeys.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nClear encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'clearkeys',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    $tw.crypto.setEncryptionKey(null, null)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/compress.js\": {\n            \"title\": \"$:/core/modules/commands/compress.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/compress.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSet compression state\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'compress',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    var compress = false\\n    if (this.params.length > 0) {\\n      compress = this.params[0] === 'yes'\\n    }\\n    $tw.compress.setCompressState(compress)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/encryptionkeys.js\": {\n            \"title\": \"$:/core/modules/commands/encryptionkeys.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/encryptionkeys.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'encryptionkeys',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing encryption public key'\\n    }\\n    if (this.params.length < 2) {\\n      return 'Missing private key'\\n    }\\n    $tw.crypto.setEncryptionKey(this.params[0], this.params[1])\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/encryptionpublickey.js\": {\n            \"title\": \"$:/core/modules/commands/encryptionpublickey.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/encryptionpublickey.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'encryptionpublickey',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing encryption public key'\\n    }\\n    $tw.crypto.setEncryptionKey(this.params[0], null)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/privatekey.js\": {\n            \"title\": \"$:/core/modules/commands/privatekey.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/privatekey.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'privatekey',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing private key'\\n    }\\n    $tw.crypto.setEncryptionKey(null, this.params[0])\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/plugins/ipfs/ipfs-deserializer.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-deserializer.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-deserializer.js\\ntype: application/javascript\\nmodule-type: tiddlerdeserializer\\n\\nFunctions to deserialise tiddlers from a block of text\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /**\\n   * Utility function to parse an old-style tiddler DIV in a *.tid file. It looks like this:\\n   *\\n   * <div title=\\\"Title\\\" creator=\\\"JoeBloggs\\\" modifier=\\\"JoeBloggs\\\" created=\\\"201102111106\\\" modified=\\\"201102111310\\\" tags=\\\"myTag [[my long tag]]\\\">\\n   *   <pre>The text of the tiddler (without the expected HTML encoding).</pre>\\n   * </div>\\n   *\\n   * Note that the field attributes are HTML encoded, but that the body of the <PRE> tag is not encoded.\\n   *\\n   * When these tiddler DIVs are encountered within a TiddlyWiki HTML file then the body is encoded in the usual way.\\n   */\\n  var parseTiddlerDiv = function (text /* [,fields] */) {\\n    // Slot together the default results\\n    var result = {}\\n    if (arguments.length > 1) {\\n      for (var f = 1; f < arguments.length; f++) {\\n        var fields = arguments[f]\\n        for (var t in fields) {\\n          result[t] = fields[t]\\n        }\\n      }\\n    }\\n    // Parse the DIV body\\n    var startRegExp = /^\\\\s*<div\\\\s+([^>]*)>(\\\\s*<pre>)?/gi\\n    var endRegExp\\n    var match = startRegExp.exec(text)\\n    if (match) {\\n      // Old-style DIVs don't have the <pre> tag\\n      if (match[2]) {\\n        endRegExp = /<\\\\/pre>\\\\s*<\\\\/div>\\\\s*$/gi\\n      } else {\\n        endRegExp = /<\\\\/div>\\\\s*$/gi\\n      }\\n      var endMatch = endRegExp.exec(text)\\n      if (endMatch) {\\n        // Extract the text\\n        result.text = text.substring(match.index + match[0].length, endMatch.index)\\n        // Process the attributes\\n        var attrRegExp = /\\\\s*([^=\\\\s]+)\\\\s*=\\\\s*(?:\\\"([^\\\"]*)\\\"|'([^']*)')/gi\\n        var attrMatch\\n        do {\\n          attrMatch = attrRegExp.exec(match[1])\\n          if (attrMatch) {\\n            var name = attrMatch[1]\\n            var value = attrMatch[2] !== undefined ? attrMatch[2] : attrMatch[3]\\n            result[name] = value\\n          }\\n        } while (attrMatch)\\n        return result\\n      }\\n    }\\n    return undefined\\n  }\\n\\n  exports['application/json'] = function (text, fields) {\\n    const inflated = $tw.utils.inflate(text)\\n    if (inflated !== null) {\\n      return inflated\\n    }\\n    var incoming\\n    var results = []\\n    try {\\n      incoming = JSON.parse(text)\\n    } catch (e) {\\n      incoming = [\\n        {\\n          title: 'JSON error: ' + e,\\n          text: '',\\n        },\\n      ]\\n    }\\n    if (!$tw.utils.isArray(incoming)) {\\n      incoming = [incoming]\\n    }\\n    for (var t = 0; t < incoming.length; t++) {\\n      var incomingFields = incoming[t]\\n      var fields = {}\\n      for (var f in incomingFields) {\\n        if (typeof incomingFields[f] === 'string') {\\n          fields[f] = incomingFields[f]\\n        }\\n      }\\n      results.push(fields)\\n    }\\n    return results\\n  }\\n\\n  /**\\n   * Parse an HTML file into tiddlers. There are three possibilities:\\n   * A TiddlyWiki classic HTML file containing `text/x-tiddlywiki` tiddlers\\n   * A TiddlyWiki5 HTML file containing `text/vnd.tiddlywiki` tiddlers\\n   * An ordinary HTML file\\n   */\\n  exports['text/html'] = function (text, fields) {\\n    // Check if we've got a store area\\n    var storeAreaMarkerRegExp = /<div id=[\\\"']?storeArea['\\\"]?( style=[\\\"']?display:none;[\\\"']?)?>/gi\\n    var match = storeAreaMarkerRegExp.exec(text)\\n    if (match) {\\n      // If so, it's either a classic TiddlyWiki file or an unencrypted TW5 file\\n      // First read the normal tiddlers\\n      var results = deserializeTiddlyWikiFile(text, storeAreaMarkerRegExp.lastIndex, !!match[1], fields)\\n      // Then any system tiddlers\\n      var systemAreaMarkerRegExp = /<div id=[\\\"']?systemArea['\\\"]?( style=[\\\"']?display:none;[\\\"']?)?>/gi\\n      var sysMatch = systemAreaMarkerRegExp.exec(text)\\n      if (sysMatch) {\\n        results.push.apply(results, deserializeTiddlyWikiFile(text, systemAreaMarkerRegExp.lastIndex, !!sysMatch[1], fields))\\n      }\\n      return results\\n    } else {\\n      // Check whether this is a compressed TiddlyWiki file\\n      var compressedStoreArea = $tw.utils.extractCompressedStoreArea(text)\\n      if (compressedStoreArea) {\\n        return $tw.utils.inflate(compressedStoreArea)\\n      } else {\\n        // Check whether this is an encrypted TiddlyWiki file\\n        var encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(text)\\n        if (encryptedStoreArea) {\\n          // If so, attempt to decrypt it using the current password\\n          return $tw.utils.decryptStoreArea(encryptedStoreArea)\\n        } else {\\n          // It's not a TiddlyWiki so we'll return the entire HTML file as a tiddler\\n          return deserializeHtmlFile(text, fields)\\n        }\\n      }\\n    }\\n  }\\n\\n  function deserializeHtmlFile (text, fields) {\\n    var result = {}\\n    $tw.utils.each(fields, function (value, name) {\\n      result[name] = value\\n    })\\n    result.text = text\\n    result.type = 'text/html'\\n    return [result]\\n  }\\n\\n  function deserializeTiddlyWikiFile (text, storeAreaEnd, isTiddlyWiki5, fields) {\\n    var results = []\\n    var endOfDivRegExp = /(<\\\\/div>\\\\s*)/gi\\n    var startPos = storeAreaEnd\\n    var defaultType = isTiddlyWiki5 ? undefined : 'text/x-tiddlywiki'\\n    endOfDivRegExp.lastIndex = startPos\\n    var match = endOfDivRegExp.exec(text)\\n    while (match) {\\n      var endPos = endOfDivRegExp.lastIndex\\n      var tiddlerFields = parseTiddlerDiv(text.substring(startPos, endPos), fields, { type: defaultType })\\n      if (!tiddlerFields) {\\n        break\\n      }\\n      $tw.utils.each(tiddlerFields, function (value, name) {\\n        if (typeof value === 'string') {\\n          tiddlerFields[name] = $tw.utils.htmlDecode(value)\\n        }\\n      })\\n      if (tiddlerFields.text !== null) {\\n        results.push(tiddlerFields)\\n      }\\n      startPos = endPos\\n      match = endOfDivRegExp.exec(text)\\n    }\\n    return results\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"tiddlerdeserializer\"\n        },\n        \"$:/plugins/ipfs/ipfs-filters.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-filters.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-filters.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: filteroperator\\n\\n\\n\\\\*/\\n;(function () {\\n  'use strict'\\n\\n  /**\\n   * Export our filter functions\\n   */\\n  exports.filenamify = function (source, operator, options) {\\n    var results = []\\n    var filenamify = $tw.node ? globalThis.filenamify || require('filenamify') : $tw.ipfs.filenamify\\n    source(function (tiddler, title) {\\n      results.push(filenamify(title, { replacement: '_' }))\\n    })\\n    return results\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"filteroperator\"\n        },\n        \"$:/core/modules/filters/savers.js\": {\n            \"title\": \"$:/core/modules/filters/savers.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/filters/savers.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: filteroperator\\n\\nThis Filter operator return savers title\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*\\n  Export our filter function\\n  */\\n  exports.savers = function (source, operator, options) {\\n    var results = []\\n    for (var i in $tw.saverHandler.savers) {\\n      results.push($tw.saverHandler.savers[i].title)\\n    }\\n    return results\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"filteroperator\"\n        },\n        \"$:/plugins/ipfs/ens-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Action\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const ipfsKeyword = 'ipfs'\\n  const ipnsKeyword = 'ipns'\\n\\n  const name = 'ens-action'\\n\\n  var EnsAction = function () {\\n    this.once = false\\n  }\\n\\n  EnsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    const self = this\\n    $tw.rootWidget.addEventListener('tm-ens-manager-open', function (event) {\\n      return self.handleOpenEnsManager(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ens-resolve-and-open', async function (event) {\\n      return await self.handleResolveEnsAndOpen(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ens-publish', async function (event) {\\n      return await self.handlePublishToEns(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-publish-to-ens', async function (event) {\\n      return await self.handlePublishIpnsToEns(event)\\n    })\\n    // Init once\\n    this.once = true\\n  }\\n\\n  EnsAction.prototype.handleOpenEnsManager = function (event) {\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      window.open('https://app.ens.domains', '_blank', 'noopener,noreferrer')\\n    } else {\\n      window.open(`https://app.ens.domains/name/${ensDomain}`, '_blank', 'noopener,noreferrer')\\n    }\\n    return true\\n  }\\n\\n  EnsAction.prototype.handleResolveEnsAndOpen = async function (event) {\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      $tw.ipfs.getLogger().info(`ENS domain: ${ensDomain}`)\\n      const { resolvedUrl } = await $tw.ipfs.resolveEns(ensDomain)\\n      if (resolvedUrl !== null) {\\n        window.open(resolvedUrl.href, '_blank', 'noopener,noreferrer')\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    return true\\n  }\\n\\n  EnsAction.prototype.handlePublishToEns = async function (event) {\\n    var cid = null\\n    var ipnsKey = null\\n    const wiki = $tw.ipfs.getDocumentUrl()\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      var { cid, ipnsKey } = await $tw.ipfs.resolveUrl(false, false, wiki)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    if (cid == null && ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPFS identifier...')\\n      return false\\n    }\\n    if (cid !== null) {\\n      return await this.publishToEns(ensDomain, `/${ipfsKeyword}/${cid}`)\\n    }\\n    return await this.publishToEns(ensDomain, `/${ipnsKeyword}/${ipnsKey}`)\\n  }\\n\\n  EnsAction.prototype.handlePublishIpnsToEns = async function (event) {\\n    var ipnsKey = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.resolveUrl(true, false, `/${ipnsKeyword}/${ipnsName}`)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    return await this.publishToEns(ensDomain, `/${ipnsKeyword}/${ipnsKey}`)\\n  }\\n\\n  EnsAction.prototype.publishToEns = async function (ensDomain, cid) {\\n    var account = null\\n    var ensCid = null\\n    var ensResolvedUrl = null\\n    var web3 = null\\n    try {\\n      var { account, web3 } = await $tw.ipfs.getEnabledWeb3Provider()\\n      var { cid: ensCid, resolvedUrl: ensResolvedUrl } = await $tw.ipfs.resolveUrl(false, true, ensDomain, null, web3)\\n      if (ensCid !== null && cid === ensResolvedUrl.pathname) {\\n        $tw.utils.alert(name, 'The current resolved ENS domain content is up to date...')\\n        return false\\n      }\\n      const isOwner = await $tw.ipfs.isOwner(ensDomain, web3, account)\\n      if (isOwner === false) {\\n        const err = new Error('Unauthorized Account...')\\n        err.name = 'OwnerError'\\n        throw err\\n      }\\n    } catch (error) {\\n      if (error.name !== 'OwnerError') {\\n        $tw.ipfs.getLogger().error(error)\\n      }\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    $tw.utils.alert(name, `Publishing to ENS: ${ensDomain}`)\\n    $tw.ipfs\\n      .requestToUnpin(ensCid)\\n      .then(data => {\\n        if (data) {\\n          $tw.ipfs.removeFromPinUnpin(ensCid, ensResolvedUrl)\\n        }\\n        $tw.ipfs\\n          .setContentHash(ensDomain, cid, web3, account)\\n          .then(data => {\\n            $tw.utils.alert(name, 'Successfully published to ENS...')\\n          })\\n          .catch(error => {\\n            if (error.name !== 'OwnerError' && error.name !== 'RejectedUserRequest' && error.name !== 'UnauthorizedUserAccount') {\\n              $tw.ipfs.getLogger().error(error)\\n            }\\n            $tw.utils.alert(name, error.message)\\n            $tw.ipfs.requestToPin(ensCid)\\n          })\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    return true\\n  }\\n\\n  exports.EnsAction = EnsAction\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ens-wrapper.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-wrapper.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-wrapper.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Wrapper\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n  const name = 'ens-wrapper'\\n\\n  var EnsWrapper = function (ensLibrary) {\\n    this.ensLibrary = ensLibrary\\n  }\\n\\n  EnsWrapper.prototype.getContentHash = async function (domain, web3) {\\n    try {\\n      var { content, protocol } = await this.ensLibrary.getContentHash(domain, web3)\\n      if (content !== null && protocol !== null) {\\n        // Success\\n        return {\\n          content: content,\\n          protocol: protocol,\\n        }\\n      }\\n      $tw.utils.alert(name, 'Unassigned ENS domain content...')\\n      return {\\n        content: null,\\n        protocol: null,\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      throw new Error('Unable to fetch ENS domain content...')\\n    }\\n  }\\n\\n  EnsWrapper.prototype.setContentHash = async function (domain, cid, web3, account) {\\n    try {\\n      await this.ensLibrary.setContentHash(domain, cid, web3, account)\\n    } catch (error) {\\n      if (error.name === 'OwnerError' || error.name === 'RejectedUserRequest' || error.name === 'UnauthorizedUserAccount') {\\n        throw error\\n      }\\n      $tw.ipfs.getLogger().error(error)\\n      throw new Error('Unable to set ENS domain content...')\\n    }\\n  }\\n\\n  exports.EnsWrapper = EnsWrapper\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Action\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const ipfsKeyword = 'ipfs'\\n  const ipnsKeyword = 'ipns'\\n\\n  const name = 'ipfs-action'\\n\\n  var IpfsAction = function () {\\n    this.once = false\\n    this.console = false\\n    this.ipnsName = $tw.utils.getIpfsIpnsName()\\n    this.ipnsKey = $tw.utils.getIpfsIpnsKey()\\n  }\\n\\n  IpfsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    const self = this\\n    // Widget\\n    $tw.rootWidget.addEventListener('tm-ipfs-export', async function (event) {\\n      return await self.handleExportToIpfs(event, false)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-export-content', async function (event) {\\n      return await self.handleExportToIpfs(event, true)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-fetch', async function (event) {\\n      return await self.handleFetchIpnsKey(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-generate', async function (event) {\\n      return await self.handleGenerateIpnsKey(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-console-mobile', async function (event) {\\n      return await self.handleMobileConsole(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-export-attachment', async function (event) {\\n      return await self.handleExportAttachmentToIpfs(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-publish', async function (event) {\\n      return await self.handlePublishToIpns(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-remove', async function (event) {\\n      return await self.handleRemoveIpnsKey(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-rename', async function (event) {\\n      return await self.handleRenameIpnsName(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-resolve-and-open', async function (event) {\\n      return await self.handleResolveIpnsKeyAndOpen(event)\\n    })\\n    // Init once\\n    this.once = true\\n  }\\n\\n  IpfsAction.prototype.handleExportToIpfs = async function (event, child) {\\n    var target = $tw.wiki.getTiddler(event.tiddlerTitle)\\n    if (target === undefined) {\\n      return false\\n    }\\n    // Retrieve content\\n    const content = await this.exportTiddler(target, child)\\n    // Check\\n    if (content === undefined || content == null) {\\n      return false\\n    }\\n    return await $tw.utils.exportToIpfs(target, content)\\n  }\\n\\n  IpfsAction.prototype.handleExportAttachmentToIpfs = async function (event) {\\n    const title = event.tiddlerTitle\\n    var tiddler = $tw.wiki.getTiddler(title)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    var added = null\\n    // Do not process if _canonical_uri is set and the text field is empty\\n    const canonicalUri = tiddler.fields._canonical_uri\\n    if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '') {\\n      $tw.utils.alert(name, 'Attachment content is already exported...')\\n      return false\\n    }\\n    try {\\n      const content = await this.getAttachmentContent(tiddler)\\n      if (content == null) {\\n        return false\\n      }\\n      $tw.ipfs.getLogger().info(`Uploading attachment content: ${content.length} bytes`)\\n      var { cid: added } = await $tw.ipfs.addToIpfs(content)\\n      await $tw.ipfs.requestToPin(added)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    const addTags = ['$:/isAttachment', '$:/isIpfs']\\n    const removeTags = ['$:/isEmbedded']\\n    // Update\\n    tiddler = $tw.utils.updateTiddler({\\n      tiddler: tiddler,\\n      addTags: addTags,\\n      removeTags: removeTags,\\n      fields: [\\n        { key: 'text', value: '' },\\n        { key: '_canonical_uri', value: `${ipfsKeyword}://${added}` },\\n      ],\\n    })\\n    $tw.wiki.addTiddler(tiddler)\\n    return true\\n  }\\n\\n  IpfsAction.prototype.getAttachmentContent = async function (tiddler) {\\n    const { info } = $tw.utils.getContentType(tiddler.fields.title, tiddler.fields.type)\\n    var content = tiddler.fields.text\\n    if (content === undefined || content == null || content === '') {\\n      $tw.utils.alert(name, 'Empty attachment content...')\\n      return null\\n    }\\n    return await $tw.ipfs.processContent(tiddler, content, info.encoding)\\n  }\\n\\n  IpfsAction.prototype.handleRenameIpnsName = async function (event) {\\n    var ipnsKey = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    if (this.ipnsName == null || this.ipnsName === ipnsName) {\\n      $tw.utils.alert(name, 'Nothing to rename....')\\n      return false\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.renameIpnsName(this.ipnsName, ipnsName)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsKey }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsKey = ipnsKey\\n    this.ipnsName = ipnsName\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleGenerateIpnsKey = async function (event) {\\n    var ipnsKey = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    try {\\n      var ipnsKey = await $tw.ipfs.generateIpnsKey(ipnsName)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsKey }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsKey = ipnsKey\\n    this.ipnsName = ipnsName\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleRemoveIpnsKey = async function (event) {\\n    var ipnsKey = null\\n    var normalizedUrl = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    try {\\n      var { ipnsKey, normalizedUrl } = await $tw.ipfs.getIpnsIdentifiers(ipnsName)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    // Async\\n    $tw.ipfs\\n      .requestToUnpin(null, ipnsKey, normalizedUrl)\\n      .then(data => {\\n        $tw.ipfs\\n          .removeIpnsKey(ipnsName)\\n          .then(data => {\\n            $tw.utils.alert(name, 'Succesfully removed Ipns key....')\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(name, error.message)\\n          })\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/name')\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: '' }],\\n      })\\n      $tw.wiki.addTiddler(updatedTiddler)\\n    }\\n    tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: '' }],\\n      })\\n      $tw.wiki.addTiddler(updatedTiddler)\\n    }\\n    this.ipnsName = null\\n    this.ipnsKey = null\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleFetchIpnsKey = async function (event) {\\n    var ipnsKey = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.getIpnsIdentifiers(ipnsName)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsKey }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n      this.ipnsKey = ipnsKey\\n    }\\n    this.ipnsName = ipnsName\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleResolveIpnsKeyAndOpen = async function (event) {\\n    var ipnsKey = null\\n    var resolvedUrl = null\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    try {\\n      var { ipnsKey, resolvedUrl } = await $tw.ipfs.resolveUrl(true, false, `${ipnsKeyword}://${ipnsName}`)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsKey }],\\n      })\\n      this.ipnsKey = ipnsKey\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsName = ipnsName\\n    if (resolvedUrl !== null) {\\n      window.open(resolvedUrl.href, '_blank', 'noopener,noreferrer')\\n    }\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleMobileConsole = async function (event) {\\n    // Show or Hide\\n    if (typeof window.eruda !== 'undefined') {\\n      if (this.console === false) {\\n        window.eruda.show()\\n        window.eruda.show('console')\\n        this.console = true\\n      } else {\\n        window.eruda.hide()\\n        this.console = false\\n      }\\n      $tw.rootWidget.refresh($tw.utils.getChangedTiddler('$:/core/ui/Buttons/ipfs/console/mobile'))\\n      return true\\n    }\\n    // Load library\\n    try {\\n      await $tw.ipfs.loadErudaLibrary()\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    const erudaContainer = window.document.createElement('div')\\n    window.document.body.appendChild(erudaContainer)\\n    window.eruda.init({\\n      container: erudaContainer,\\n      tool: ['console'],\\n      useShadowDom: true,\\n      autoScale: true,\\n    })\\n    // Inherit font\\n    erudaContainer.style.fontFamily = 'inherit'\\n    // Preserve user preference if any, default is 80\\n    if (window.eruda.get().config.get('displaySize') === 80) {\\n      window.eruda.get().config.set('displaySize', 40)\\n    }\\n    // Preserve user preference if any, default is 0.95\\n    if (window.eruda.get().config.get('transparency') === 0.95) {\\n      window.eruda.get().config.set('transparency', 1)\\n    }\\n    // Hide Eruda button\\n    if (window.eruda._shadowRoot !== undefined) {\\n      const btn = window.eruda._shadowRoot.querySelector('.eruda-entry-btn')\\n      if (btn !== undefined) {\\n        btn.style.display = 'none'\\n      }\\n    }\\n    // Init Logger\\n    const log = window.log.getLogger('eruda')\\n    if ($tw.utils.getIpfsVerbose()) {\\n      log.setLevel('info', false)\\n    } else {\\n      log.setLevel('warn', false)\\n    }\\n    // Log\\n    log.info('Mobile console has been loaded...')\\n    // Show\\n    window.eruda.show()\\n    window.eruda.show('console')\\n    this.console = true\\n    $tw.rootWidget.refresh($tw.utils.getChangedTiddler('$:/core/ui/Buttons/ipfs/console/mobile'))\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handlePublishToIpns = async function (event) {\\n    var cid = null\\n    var ipnsKey = null\\n    var wikiCid = null\\n    var wikiIpnsKey = null\\n    const wiki = $tw.ipfs.getDocumentUrl()\\n    var ipnsName = $tw.utils.getIpfsIpnsName()\\n    if (ipnsName == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS name....')\\n      return false\\n    }\\n    try {\\n      var { cid: wikiCid, ipnsKey: wikiIpnsKey } = await $tw.ipfs.resolveUrl(true, true, wiki)\\n      var { cid, ipnsKey } = await $tw.ipfs.resolveUrl(true, false, `${ipnsKeyword}://${ipnsName}`)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    if (wikiCid == null && wikiIpnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPFS identifier...')\\n      return false\\n    }\\n    if (wikiIpnsKey !== null && wikiIpnsKey === ipnsKey) {\\n      $tw.utils.alert(name, 'Default IPNS key matches current IPNS key....')\\n      return false\\n    }\\n    $tw.utils.alert(name, 'Publishing IPNS name: ' + ipnsName)\\n    $tw.ipfs\\n      .publishIpnsName(wikiCid, ipnsKey, ipnsName)\\n      .then(data => {\\n        $tw.utils.alert(name, 'Successfully Published IPNS name: ' + ipnsName)\\n        $tw.ipfs.requestToUnpin(cid)\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    return true\\n  }\\n\\n  IpfsAction.prototype.exportTiddler = async function (target, child) {\\n    // Check\\n    if (target === undefined || target == null) {\\n      const error = new Error('Unknown Tiddler...')\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return null\\n    }\\n    const title = target.fields.title\\n    // Filter\\n    var exportFilter = `[[${target.fields.title}]]`\\n    // Child filters\\n    if (child) {\\n      // Links\\n      const linked = $tw.wiki.getTiddlerLinks(title)\\n      $tw.ipfs.getLogger().info(`Found ${linked.length} Tiddler link(s)...`)\\n      // Transcluded\\n      const transcluded = this.transcludeContent(title)\\n      $tw.ipfs.getLogger().info(`Found ${transcluded.length} transcluded Tiddler reference(s)...`)\\n      const filtered = linked.concat(transcluded)\\n      // Process filtered content\\n      for (var i = 0; i < filtered.length; i++) {\\n        if (exportFilter.includes(`[[${filtered[i]}]]`) === false) {\\n          exportFilter = `${exportFilter} [[${filtered[i]}]]`\\n        }\\n      }\\n    }\\n    var content\\n    var contentType = 'text/plain'\\n    if (child || $tw.utils.getIpfsExport() === 'json') {\\n      content = await $tw.utils.exportTiddlersAsJson($tw.wiki.filterTiddlers(exportFilter), target.fields._export_uri)\\n      if (content) {\\n        const navigator = $tw.utils.locateNavigatorWidget($tw.pageWidgetNode)\\n        if (navigator) {\\n          navigator.dispatchEvent({\\n            target: target.fields.title,\\n            type: 'tm-ipfs-export-tiddlers',\\n            param: content,\\n          })\\n          return\\n        }\\n      }\\n    } else if ($tw.utils.getIpfsExport() === 'static') {\\n      const options = {\\n        downloadType: contentType,\\n        method: 'download',\\n        template: '$:/core/templates/exporters/StaticRiver',\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      }\\n      content = $tw.wiki.renderTiddler(contentType, '$:/core/templates/exporters/StaticRiver', options)\\n    } else {\\n      const options = {\\n        downloadType: contentType,\\n        method: 'download',\\n        template: '$:/core/templates/exporters/TidFile',\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      }\\n      content = $tw.wiki.renderTiddler(contentType, '$:/core/templates/exporters/TidFile', options)\\n    }\\n    if (content) {\\n      return await $tw.ipfs.processContent(target, content, 'utf8')\\n    }\\n  }\\n\\n  IpfsAction.prototype.transcludeContent = function (title) {\\n    var tiddlers = []\\n    // Build a transclude widget\\n    var transclude = $tw.wiki.makeTranscludeWidget(title)\\n    // Build a fake document element\\n    const container = $tw.fakeDocument.createElement('div')\\n    // Transclude\\n    transclude.render(container, null)\\n    // Process children\\n    this.locateTiddlers(transclude, tiddlers)\\n    // Return\\n    return tiddlers\\n  }\\n\\n  IpfsAction.prototype.locateTiddlers = function (transclude, tiddlers) {\\n    // Children lookup\\n    for (var i = 0; i < transclude.children.length; i++) {\\n      // Current child\\n      const child = transclude.children[i]\\n      if (child.variables !== undefined && child.variables !== null) {\\n        // Locate Tiddler\\n        const currentTiddler = 'currentTiddler'\\n        const current = child.variables[currentTiddler]\\n        if (current !== undefined && current !== null && current.value !== undefined && current.value !== null) {\\n          if (tiddlers.indexOf(current.value) === -1) {\\n            tiddlers.push(current.value)\\n          }\\n        }\\n      }\\n      // Process children\\n      this.locateTiddlers(child, tiddlers)\\n    }\\n  }\\n\\n  exports.IpfsAction = IpfsAction\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-bundle.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-bundle.js\",\n            \"text\": \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}g.IpfsBundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\\\"function\\\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\\\"Cannot find module '\\\"+i+\\\"'\\\");throw a.code=\\\"MODULE_NOT_FOUND\\\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\\\"function\\\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-bundle.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Bundle\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/es.string.replace.js\\\");\\n\\nrequire(\\\"core-js/modules/es.typed-array.uint8-array.js\\\");\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.to-json.js\\\");\\n\\nconst CID = require('cids');\\n\\nconst EnsLibrary = require('./ipfs-bundle/ens-library.js').EnsLibrary;\\n\\nconst EthereumLibrary = require('./ipfs-bundle/ethereum-library.js').EthereumLibrary;\\n\\nconst IpfsLibrary = require('./ipfs-bundle/ipfs-library.js').IpfsLibrary;\\n\\nconst IpfsLoader = require('./ipfs-bundle/ipfs-loader.js').IpfsLoader;\\n\\nconst IpfsUrl = require('./ipfs-bundle/ipfs-url.js').IpfsUrl;\\n\\nconst cidInspector = 'https://cid.ipfs.io/#';\\nconst libp2pKey = 'libp2p-key';\\nconst dagPb = 'dag-pb';\\nconst dir = 'dir';\\n\\nvar IpfsBundle = function () {\\n  this.once = false;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ipfs-bundle';\\n};\\n\\nIpfsBundle.prototype.getLogger = function () {\\n  if (globalThis.log !== undefined && globalThis.log !== null) {\\n    const loggers = globalThis.log.getLoggers();\\n    var eruda = loggers.eruda;\\n\\n    if (eruda) {\\n      return eruda;\\n    }\\n\\n    var ipfs = loggers.ipfs;\\n\\n    if (ipfs) {\\n      return ipfs;\\n    }\\n  }\\n\\n  return console;\\n};\\n\\nIpfsBundle.prototype.init = function () {\\n  // Init once\\n  if (this.once) {\\n    return;\\n  }\\n\\n  this.ipfsLoader = new IpfsLoader(this);\\n  this.ethereumLibrary = new EthereumLibrary(this);\\n  this.ethereumLibrary.init();\\n  this.ensLibrary = new EnsLibrary(this);\\n  this.ipfsLibrary = new IpfsLibrary(this);\\n  this.ipfsUrl = new IpfsUrl(this); // Init once\\n\\n  this.once = true;\\n};\\n\\nIpfsBundle.prototype.filenamify = function (name, options) {\\n  return this.ipfsUrl.filenamify(name, options);\\n};\\n\\nIpfsBundle.prototype.getIpfsBaseUrl = function () {\\n  return this.ipfsUrl.getIpfsBaseUrl();\\n};\\n\\nIpfsBundle.prototype.normalizeUrl = function (value, base) {\\n  return this.ipfsUrl.normalizeUrl(value, base);\\n};\\n\\nIpfsBundle.prototype.getDocumentUrl = function () {\\n  return this.ipfsUrl.getDocumentUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultApiUrl = function () {\\n  return this.ipfsUrl.getIpfsDefaultApiUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultGatewayUrl = function () {\\n  return this.ipfsUrl.getIpfsDefaultGatewayUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultApi = function () {\\n  return this.ipfsUrl.getIpfsDefaultApi();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultGateway = function () {\\n  return this.ipfsUrl.getIpfsDefaultGateway();\\n};\\n\\nIpfsBundle.prototype.getIpfsApiUrl = function () {\\n  return this.ipfsUrl.getIpfsApiUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsGatewayUrl = function () {\\n  return this.ipfsUrl.getIpfsGatewayUrl();\\n};\\n\\nIpfsBundle.prototype.getUrl = function (url, base) {\\n  return this.ipfsUrl.getUrl(url, base);\\n};\\n\\nIpfsBundle.prototype.getENSRegistry = function () {\\n  return this.ensLibrary.getENSRegistry();\\n};\\n\\nIpfsBundle.prototype.getEtherscanRegistry = function () {\\n  return this.ethereumLibrary.getEtherscanRegistry();\\n};\\n\\nIpfsBundle.prototype.getNetworkRegistry = function () {\\n  return this.ethereumLibrary.getNetworkRegistry();\\n};\\n\\nIpfsBundle.prototype.loadErudaLibrary = async function () {\\n  try {\\n    if (typeof globalThis.eruda === 'undefined') {\\n      await this.ipfsLoader.loadErudaLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.eruda === 'undefined') {\\n    throw new Error('Unavailable Eruda library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadEthSigUtilLibrary = async function () {\\n  try {\\n    if (typeof globalThis.sigUtil === 'undefined') {\\n      await this.ipfsLoader.loadEthSigUtilLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.sigUtil === 'undefined') {\\n    throw new Error('Unavailable eth-sig-util library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadEthersJsLibrary = async function () {\\n  try {\\n    if (typeof globalThis.ethers === 'undefined') {\\n      await this.ipfsLoader.loadEtherJsLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.ethers === 'undefined') {\\n    throw new Error('Unavailable Ethereum library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadIpfsHttpLibrary = async function () {\\n  try {\\n    if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n      await this.ipfsLoader.loadIpfsHttpLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n    throw new Error('Unavailable IPFS HTTP Client library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.getPublicEncryptionKey = async function (provider) {\\n  try {\\n    return await this.ethereumLibrary.getPublicEncryptionKey(provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an Ethereum Public Encryption Key...');\\n  }\\n};\\n\\nIpfsBundle.prototype.personalRecover = async function (message, signature) {\\n  return await this.ethereumLibrary.personalRecover(message, signature);\\n};\\n\\nIpfsBundle.prototype.personalSign = async function (message, provider) {\\n  try {\\n    return await this.ethereumLibrary.personalSign(message, provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to sign content...');\\n  }\\n};\\n\\nIpfsBundle.prototype.decrypt = async function (text, provider) {\\n  try {\\n    return await this.ethereumLibrary.decrypt(text, provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to decrypt content...');\\n  }\\n};\\n\\nIpfsBundle.prototype.getEtherscanRegistry = function () {\\n  return this.ethereumLibrary.getEtherscanRegistry();\\n};\\n\\nIpfsBundle.prototype.getEnabledWeb3Provider = async function (provider) {\\n  return await this.ethereumLibrary.getEnabledWeb3Provider(provider);\\n};\\n\\nIpfsBundle.prototype.getWeb3Provider = async function (provider) {\\n  return await this.ethereumLibrary.getWeb3Provider(provider);\\n};\\n\\nIpfsBundle.prototype.isOwner = async function (domain, web3, account) {\\n  return await this.ensLibrary.isOwner(domain, web3, account);\\n};\\n/*\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nIpfsBundle.prototype.getEthereumProvider = async function () {\\n  return await this.ethereumLibrary.getEthereumProvider();\\n};\\n\\nIpfsBundle.prototype.getEnabledWeb3Provider = async function () {\\n  var account = null;\\n  var chainId = null;\\n  var web3 = null;\\n  const etherscan = this.getEtherscanRegistry();\\n  const network = this.getNetworkRegistry();\\n  const provider = await this.getEthereumProvider();\\n\\n  try {\\n    var {\\n      account,\\n      chainId,\\n      web3\\n    } = await this.ethereumLibrary.getEnabledWeb3Provider(provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an enabled Ethereum Provider...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`New Enabled Web3 provider:\\nChain: ${network[chainId]}\\nAccount: ${etherscan[chainId]}/address/${account}`);\\n  return {\\n    account: account,\\n    chainId: chainId,\\n    provider: provider,\\n    web3: web3\\n  };\\n};\\n\\nIpfsBundle.prototype.getWeb3Provider = async function () {\\n  var chainId = null;\\n  var web3 = null;\\n  const network = this.getNetworkRegistry();\\n  const provider = await this.getEthereumProvider();\\n\\n  try {\\n    var {\\n      web3,\\n      chainId\\n    } = await this.ethereumLibrary.getWeb3Provider(provider);\\n  } catch (error) {\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an Ethereum Provider...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`New Web3 provider:\\n${network[chainId]}`);\\n  return {\\n    chainId: chainId,\\n    provider: provider,\\n    web3: web3\\n  };\\n};\\n\\nIpfsBundle.prototype.decode = function (b64) {\\n  return Base64Binary.decode(b64);\\n}; // https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer/21797381\\n// https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js\\n\\n/*\\n * Copyright (c) 2011, Daniel Guerrero\\n * All rights reserved.\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n * Redistributions of source code must retain the above copyright\\n * notice, this list of conditions and the following disclaimer.\\n * Redistributions in binary form must reproduce the above copyright\\n * notice, this list of conditions and the following disclaimer in the\\n * documentation and/or other materials provided with the distribution.\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND\\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY\\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n/**\\n * Uses the new array typed in javascript to binary base64 encode/decode\\n * at the moment just decodes a binary base64 encoded\\n * into either an ArrayBuffer (decodeArrayBuffer)\\n * or into an Uint8Array (decode)\\n *\\n * References:\\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer\\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array\\n */\\n\\n\\nvar Base64Binary = {\\n  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\\n\\n  /* will return a  Uint8Array type */\\n  decodeArrayBuffer: function (input) {\\n    var bytes = input.length / 4 * 3;\\n    var ab = new ArrayBuffer(bytes);\\n    this.decode(input, ab);\\n    return ab;\\n  },\\n  removePaddingChars: function (input) {\\n    var lkey = this._keyStr.indexOf(input.charAt(input.length - 1));\\n\\n    if (lkey === 64) {\\n      return input.substring(0, input.length - 1);\\n    }\\n\\n    return input;\\n  },\\n  decode: function (input, ab) {\\n    //get last chars to see if are valid\\n    input = this.removePaddingChars(input);\\n    input = this.removePaddingChars(input);\\n    var bytes = parseInt(input.length / 4 * 3, 10);\\n    var ua;\\n    var chr1, chr2, chr3;\\n    var enc1, enc2, enc3, enc4;\\n    var i = 0;\\n    var j = 0;\\n    if (ab) ua = new Uint8Array(ab);else ua = new Uint8Array(bytes);\\n    /*eslint no-useless-escape:\\\"off\\\"*/\\n\\n    input = input.replace(/[^A-Za-z0-9\\\\+\\\\/\\\\=]/g, '');\\n\\n    for (i = 0; i < bytes; i += 3) {\\n      //get the 3 octects in 4 ascii chars\\n      enc1 = this._keyStr.indexOf(input.charAt(j++));\\n      enc2 = this._keyStr.indexOf(input.charAt(j++));\\n      enc3 = this._keyStr.indexOf(input.charAt(j++));\\n      enc4 = this._keyStr.indexOf(input.charAt(j++));\\n      chr1 = enc1 << 2 | enc2 >> 4;\\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\\n      chr3 = (enc3 & 3) << 6 | enc4;\\n      ua[i] = chr1;\\n      if (enc3 !== 64) ua[i + 1] = chr2;\\n      if (enc4 !== 64) ua[i + 2] = chr3;\\n    }\\n\\n    return ua;\\n  }\\n};\\n\\nIpfsBundle.prototype.isJson = function (content) {\\n  return this.ipfsLoader.isJson(content);\\n};\\n\\nIpfsBundle.prototype.loadToBase64 = async function (url, password) {\\n  return await this.ipfsLoader.loadToBase64(url, password);\\n};\\n\\nIpfsBundle.prototype.loadToUtf8 = async function (url, password) {\\n  return await this.ipfsLoader.loadToUtf8(url, password);\\n};\\n\\nIpfsBundle.prototype.analyzePinType = function (type) {\\n  return this.ipfsLibrary.analyzePinType(type);\\n};\\n\\nIpfsBundle.prototype.addAll = async function (client, source, options) {\\n  return await this.ipfsLibrary.addAll(client, source, options);\\n};\\n\\nIpfsBundle.prototype.hasPin = async function (client, key, type, ipfsPath) {\\n  return await this.ipfsLibrary.hasPin(client, key, type, ipfsPath);\\n};\\n\\nIpfsBundle.prototype.filesStat = async function (client, ipfsPath) {\\n  return await this.ipfsLibrary.filesStat(client, ipfsPath);\\n};\\n\\nIpfsBundle.prototype.ls = async function (client, ipfsPath) {\\n  return await this.ipfsLibrary.ls(client, ipfsPath);\\n};\\n\\nIpfsBundle.prototype.pinRm = async function (client, cid, recursive) {\\n  return await this.ipfsLibrary.pinRm(client, cid, recursive);\\n};\\n\\nIpfsBundle.prototype.getDirectoryIdentifier = async function (client, url, base) {\\n  if (url === undefined || url == null || url.toString().trim() === '') {\\n    return null;\\n  }\\n\\n  if (url instanceof URL === false) {\\n    try {\\n      url = this.ipfsUrl.getUrl(url, base);\\n    } catch (error) {\\n      url = null;\\n    }\\n  }\\n\\n  if (url == null) {\\n    return null;\\n  } // Pathname\\n\\n\\n  var credential = '';\\n\\n  if (url.username && url.password) {\\n    credential = `${url.username}:${url.password}@`;\\n  }\\n\\n  if (base === undefined || base == null) {\\n    base = this.getUrl(`${url.protocol}//${credential}${url.host}`);\\n  }\\n\\n  var {\\n    cid,\\n    ipnsIdentifier,\\n    path,\\n    protocol\\n  } = this.decodePathname(url.pathname);\\n\\n  if (cid !== null || ipnsIdentifier !== null) {\\n    var ipfsPath = null;\\n\\n    if (cid !== null) {\\n      ipfsPath = `/${protocol}/${cid}${path}`;\\n    } else {\\n      // TODO: resolve ipns\\n      ipfsPath = `/${protocol}/${ipnsIdentifier}${path}`;\\n    }\\n\\n    const stat = await this.filesStat(client, ipfsPath);\\n\\n    if (stat.type === 'directory') {\\n      return stat.cid;\\n    }\\n\\n    var nextPath = '';\\n    const members = url.pathname.split('/');\\n\\n    for (var i = 0; i < members.length; i++) {\\n      if (members[i].trim() === '') {\\n        continue;\\n      }\\n\\n      if (i !== members.length - 1) {\\n        nextPath = `${nextPath}/${members[i]}`;\\n      }\\n    }\\n\\n    const nextUrl = this.getUrl(nextPath, base);\\n    return this.getDirectoryIdentifier(client, nextUrl, base);\\n  }\\n\\n  return null;\\n};\\n\\nIpfsBundle.prototype.decodeCid = function (decode) {\\n  if (decode === undefined || decode == null) {\\n    return {\\n      cid: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var cid = null;\\n  var hostname = null;\\n  var ipnsIdentifier = null;\\n  var path = null;\\n  var protocol = null;\\n  var url = null;\\n\\n  if (decode instanceof URL === false) {\\n    try {\\n      url = this.ipfsUrl.getUrl(decode);\\n    } catch (error) {\\n      url = null;\\n    }\\n  } else {\\n    url = decode;\\n  }\\n\\n  if (url !== null) {\\n    var {\\n      cid,\\n      hostname,\\n      ipnsIdentifier,\\n      path,\\n      protocol\\n    } = this.decodeUrlCid(url);\\n  } else {\\n    var {\\n      cid,\\n      hostname,\\n      ipnsIdentifier,\\n      path,\\n      protocol\\n    } = this.decodeHostnameCid(decode);\\n\\n    if (protocol == null && cid == null && ipnsIdentifier == null) {\\n      var {\\n        cid,\\n        ipnsIdentifier,\\n        path,\\n        protocol\\n      } = this.decodePathname(decode);\\n    }\\n  }\\n\\n  return {\\n    cid: cid,\\n    hostname: hostname,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: path,\\n    protocol: protocol\\n  };\\n};\\n\\nIpfsBundle.prototype.decodeUrlCid = function (url) {\\n  if (url === undefined || url == null || url.toString().trim() === '') {\\n    return {\\n      cid: null,\\n      hostname: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  if (url instanceof URL === false) {\\n    return {\\n      cid: null,\\n      hostname: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var cid = null;\\n  var hostname = null;\\n  var ipnsIdentifier = null;\\n  var protocol = null;\\n  var path = `${url.pathname}${url.search}${url.hash}`;\\n\\n  if (url.protocol === 'ipfs:' || url.protocol === 'ipns:') {\\n    if (url.hostname !== undefined && url.hostname !== null && url.hostname.trim() !== '') {\\n      if (url.protocol === 'ipns:') {\\n        ipnsIdentifier = url.hostname;\\n        protocol = 'ipns';\\n      } else if (url.protocol === 'ipfs:' && this.getCid(url.hostname)) {\\n        cid = url.hostname;\\n        protocol = 'ipfs';\\n      }\\n    } else if (url.pathname !== undefined && url.pathname !== null && url.pathname.trim() !== '') {\\n      var pathname;\\n\\n      if (url.pathname.startsWith('//')) {\\n        pathname = `/${protocol}/${url.pathname.slice(2)}${url.search}${url.hash}`;\\n      } else {\\n        pathname = `/${protocol}/${url.pathname}${url.search}${url.hash}`;\\n      }\\n\\n      var {\\n        cid,\\n        ipnsIdentifier,\\n        path,\\n        protocol\\n      } = this.decodePathname(pathname);\\n    }\\n\\n    return {\\n      cid: cid,\\n      hostname: null,\\n      ipnsIdentifier: ipnsIdentifier,\\n      path: path,\\n      protocol: protocol\\n    };\\n  }\\n\\n  var {\\n    cid,\\n    hostname,\\n    ipnsIdentifier,\\n    protocol\\n  } = this.decodeHostnameCid(url.hostname);\\n\\n  if (protocol == null && cid == null && ipnsIdentifier == null) {\\n    var {\\n      cid,\\n      ipnsIdentifier,\\n      path: innerPath,\\n      protocol\\n    } = this.decodePathname(url.pathname);\\n\\n    if (innerPath) {\\n      path = `${innerPath}${url.search}${url.hash}`;\\n    }\\n  }\\n\\n  return {\\n    cid: cid,\\n    hostname: hostname,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: path,\\n    protocol: protocol\\n  };\\n};\\n\\nIpfsBundle.prototype.decodePathname = function (pathname) {\\n  if (pathname === undefined || pathname == null) {\\n    return {\\n      cid: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  pathname = pathname.toString().trim() === '' ? null : pathname.toString().trim();\\n\\n  if (pathname == null || pathname === '/') {\\n    return {\\n      cid: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var identifier = null;\\n  var protocol = null;\\n  var path = ''; // Parse\\n\\n  const members = pathname.trim().split('/');\\n\\n  for (var i = 0; i < members.length; i++) {\\n    if (members[i].trim() === '') {\\n      continue;\\n    }\\n\\n    if (protocol == null) {\\n      protocol = members[i];\\n      continue;\\n    }\\n\\n    if (identifier == null) {\\n      identifier = members[i];\\n      continue;\\n    }\\n\\n    path = `${path}/${members[i]}`;\\n  }\\n\\n  if (protocol == null || identifier == null) {\\n    return {\\n      cid: null,\\n      ipnsIdentifier: null,\\n      path: pathname,\\n      protocol: null\\n    };\\n  }\\n\\n  var cid = null;\\n  var ipnsIdentifier = null;\\n\\n  if (protocol === 'ipns' || protocol === 'ipns:') {\\n    ipnsIdentifier = identifier;\\n  } else if ((protocol === 'ipfs' || protocol === 'ipfs:') && this.getCid(identifier)) {\\n    cid = identifier;\\n  } else {\\n    protocol = null;\\n  }\\n\\n  return {\\n    cid: cid,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: protocol ? path : pathname,\\n    protocol: protocol\\n  };\\n};\\n\\nIpfsBundle.prototype.decodeHostnameCid = function (hostname) {\\n  if (hostname === undefined || hostname == null) {\\n    return {\\n      cid: null,\\n      hostname: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  hostname = hostname.toString().trim() === '' ? null : hostname.toString().trim();\\n\\n  if (hostname == null) {\\n    return {\\n      cid: null,\\n      hostname: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var domain = null;\\n  var identifier = null;\\n  var protocol = null;\\n  var path = '/'; // Parse\\n\\n  const members = hostname.trim().split('.');\\n\\n  for (var i = 0; i < members.length; i++) {\\n    if (members[i].trim() === '') {\\n      continue;\\n    }\\n\\n    if (identifier == null) {\\n      identifier = members[i];\\n      continue;\\n    }\\n\\n    if (protocol == null) {\\n      protocol = members[i];\\n      continue;\\n    }\\n\\n    const search = members[i].split('/', 1);\\n\\n    if (search[0] !== members[i]) {\\n      if (domain) {\\n        domain = `${domain}.${search[0]}`;\\n      } else {\\n        domain = search[0];\\n      }\\n\\n      path = search[1];\\n    } else {\\n      if (domain) {\\n        domain = `${domain}.${members[i]}`;\\n      } else {\\n        domain = members[i];\\n      }\\n    }\\n  }\\n\\n  if (protocol == null || identifier == null) {\\n    return {\\n      cid: null,\\n      ipnsIdentifier: null,\\n      path: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var cid = null;\\n  var ipnsIdentifier = null;\\n\\n  if (protocol === 'ipns' || protocol === 'ipns:') {\\n    ipnsIdentifier = identifier;\\n  } else if ((protocol === 'ipfs' || protocol === 'ipfs:') && this.getCid(identifier)) {\\n    cid = identifier;\\n  } else {\\n    protocol = null;\\n  }\\n\\n  return {\\n    cid: cid,\\n    hostname: domain,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: path,\\n    protocol: protocol\\n  };\\n};\\n\\nIpfsBundle.prototype.getCid = function (cid) {\\n  try {\\n    const newCid = new CID(cid);\\n\\n    if (CID.isCID(newCid)) {\\n      return newCid;\\n    }\\n  } catch (error) {// Ignore\\n  }\\n\\n  return null;\\n};\\n\\nIpfsBundle.prototype.cidToBase58CidV0 = function (cid, log) {\\n  return this.convertCidToBase58CidV0(cid, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToBase58CidV0 = function (cid, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec\\n  } = cid.toJSON();\\n\\n  if (cid.version === 1) {\\n    const converted = new CID(0, dagPb, cid.multihash, 'base58btc'); // Log\\n\\n    if (log) {\\n      const {\\n        codec: convertedCodec\\n      } = converted.toJSON();\\n      this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv1\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${convertedCodec}' \\\"cidv0\\\" (base58btc): ${cidInspector}${converted}`);\\n    }\\n\\n    return converted;\\n  } // Convert\\n\\n\\n  if (cidCodec !== dagPb || cid.multibaseName !== 'base58btc') {\\n    cid = this.convertCidToCid(cid, 0, dagPb, 'base58btc', log);\\n  }\\n\\n  return cid;\\n};\\n\\nIpfsBundle.prototype.cidToCidV1 = function (cid, protocol, log) {\\n  return this.convertCidToCidV1(cid, protocol, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToCidV1 = function (cid, protocol, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec\\n  } = cid.toJSON();\\n  var codec = protocol !== undefined && protocol !== null ? protocol === 'ipns' ? libp2pKey : dagPb : dagPb;\\n  var multibaseName = codec === libp2pKey ? 'base36' : 'base32'; // Convert\\n\\n  if (cid.version === 0) {\\n    const converted = new CID(1, codec, cid.multihash, multibaseName);\\n\\n    if (log) {\\n      this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv0\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${codec}' \\\"cidv1\\\" (${multibaseName}): ${cidInspector}${converted}`);\\n    }\\n\\n    return converted;\\n  } // Convert\\n\\n\\n  if (cidCodec !== codec || cid.multibaseName !== multibaseName) {\\n    cid = this.convertCidToCid(cid, 1, codec, multibaseName, log);\\n  }\\n\\n  return cid;\\n};\\n\\nIpfsBundle.prototype.cidToLibp2pKeyCidV1 = function (cid, multibaseName, log) {\\n  return this.convertCidToCid(cid, 1, 'libp2p-key', multibaseName, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToCid = function (cid, version, codec, multibaseName, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec,\\n    version: cidVersion\\n  } = cid.toJSON();\\n\\n  if (cid.version === version && cidCodec === codec && cid.multibaseName === multibaseName) {\\n    return cid;\\n  }\\n\\n  const converted = new CID(version, codec, cid.multihash, multibaseName);\\n\\n  if (log) {\\n    const {\\n      codec: convertedCodec,\\n      version: convertedVersion\\n    } = converted.toJSON();\\n    this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv${cidVersion}\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${convertedCodec}' \\\"cidv${convertedVersion}\\\" (${multibaseName}): ${cidInspector}${converted}`);\\n  }\\n\\n  return converted;\\n};\\n\\nIpfsBundle.prototype.Base64ToUint8Array = function (b64) {\\n  return Base64Binary.decode(b64);\\n}; // https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string\\n\\n\\nIpfsBundle.prototype.Uint8ArrayToBase64 = function (uint8) {\\n  var CHUNK_SIZE = 0x8000; //arbitrary number\\n\\n  var index = 0;\\n  var length = uint8.length;\\n  var str = '';\\n  var slice;\\n\\n  while (index < length) {\\n    slice = uint8.subarray(index, Math.min(index + CHUNK_SIZE, length));\\n    str += String.fromCharCode.apply(null, slice);\\n    index += CHUNK_SIZE;\\n  }\\n\\n  return btoa(str);\\n}; // String to uint array\\n\\n\\nIpfsBundle.prototype.StringToUint8Array = function (string) {\\n  var escstr = encodeURIComponent(string);\\n  var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\\n    return String.fromCharCode('0x' + p1);\\n  });\\n  var ua = new Uint8Array(binstr.length);\\n  Array.prototype.forEach.call(binstr, function (ch, i) {\\n    ua[i] = ch.charCodeAt(0);\\n  });\\n  return ua;\\n}; // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\\n\\n/*\\n * utf.js - UTF-8 <=> UTF-16 convertion\\n *\\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\\n * Version: 1.0\\n * LastModified: Dec 25 1999\\n * This library is free.  You can redistribute it and/or modify it.\\n */\\n\\n\\nIpfsBundle.prototype.Utf8ArrayToStr = function (array) {\\n  var c, char2, char3;\\n  var out = '';\\n  var len = array.length;\\n  var i = 0;\\n\\n  while (i < len) {\\n    c = array[i++];\\n\\n    switch (c >> 4) {\\n      case 0:\\n      case 1:\\n      case 2:\\n      case 3:\\n      case 4:\\n      case 5:\\n      case 6:\\n      case 7:\\n        // 0xxxxxxx\\n        out += String.fromCharCode(c);\\n        break;\\n\\n      case 12:\\n      case 13:\\n        // 110x xxxx   10xx xxxx\\n        char2 = array[i++];\\n        out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);\\n        break;\\n\\n      case 14:\\n        // 1110 xxxx  10xx xxxx  10xx xxxx\\n        char2 = array[i++];\\n        char3 = array[i++];\\n        out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);\\n        break;\\n    }\\n  }\\n\\n  return out;\\n};\\n\\nIpfsBundle.prototype.deflate = function (str) {\\n  var tStart = new Date();\\n  var ua = globalThis.pako.deflate(str, {\\n    raw: false\\n  });\\n  var b64 = this.Uint8ArrayToBase64(ua);\\n  var tStop = new Date() - tStart;\\n  var ratio = Math.floor(b64.length * 100 / str.length);\\n  this.getLogger().info(`Deflate: ${tStop}ms, In: ${str.length} bytes, Out: ${b64.length} bytes, Ratio: ${ratio}%`);\\n  return b64;\\n};\\n\\nIpfsBundle.prototype.inflate = function (b64) {\\n  var tStart = new Date();\\n  var ua = this.decode(b64);\\n  var str = globalThis.pako.inflate(ua, {\\n    to: 'string'\\n  });\\n  var tStop = new Date() - tStart;\\n  var ratio = Math.floor(str.length * 100 / b64.length);\\n  this.getLogger().info(`Inflate: ${tStop}ms, In: ${b64.length} bytes, Out: ${str.length} bytes, Ratio: ${ratio}%`);\\n  return str;\\n};\\n\\nexports.IpfsBundle = IpfsBundle;\\n\\n},{\\\"./ipfs-bundle/ens-library.js\\\":2,\\\"./ipfs-bundle/ethereum-library.js\\\":3,\\\"./ipfs-bundle/ipfs-library.js\\\":4,\\\"./ipfs-bundle/ipfs-loader.js\\\":5,\\\"./ipfs-bundle/ipfs-url.js\\\":6,\\\"cids\\\":12,\\\"core-js/modules/es.string.replace.js\\\":124,\\\"core-js/modules/es.typed-array.uint8-array.js\\\":126,\\\"core-js/modules/web.dom-collections.iterator.js\\\":140,\\\"core-js/modules/web.url.js\\\":142,\\\"core-js/modules/web.url.to-json.js\\\":143}],2:[function(require,module,exports){\\n'use strict';\\n\\nrequire(\\\"core-js/modules/es.typed-array.uint8-array.js\\\");\\n\\nrequire(\\\"core-js/modules/es.typed-array.from.js\\\");\\n\\nconst basex = require('@multiformats/base-x');\\n\\nconst CID = require('cids');\\n\\nconst concat = require('uint8arrays').concat;\\n\\nconst fromString = require('uint8arrays').fromString;\\n\\nconst multiC = require('multicodec');\\n\\nconst multiH = require('multihashes');\\n/*eslint no-unused-vars:\\\"off\\\"*/\\n\\n\\nconst BASE58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\\nconst bs58 = basex(BASE58); // https://github.com/ensdomains/resolvers\\n\\nvar EnsLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ens-library'; // https://docs.ens.domains/ens-deployments\\n  // https://github.com/ensdomains/ui/blob/master/src/ens.js\\n\\n  this.registry = {\\n    0x1: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x3: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x4: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x5: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\\n  };\\n};\\n\\nEnsLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nEnsLibrary.prototype.getENSRegistry = function () {\\n  return this.registry;\\n};\\n\\nEnsLibrary.prototype.hexStringToUint8Array = function (hex) {\\n  const prefix = hex.slice(0, 2);\\n  const value = hex.slice(2);\\n  var res = '';\\n\\n  if (prefix === '0x') {\\n    res = value;\\n  } else {\\n    res = hex;\\n  }\\n\\n  return multiH.fromHexString(res);\\n};\\n\\nEnsLibrary.prototype.getCodec = function (hash) {\\n  const ua = this.hexStringToUint8Array(hash);\\n  return multiC.getCodec(ua);\\n};\\n\\nEnsLibrary.prototype.b58MultiHash = function (hash) {\\n  const ua = this.hexStringToUint8Array(hash);\\n  const value = multiC.rmPrefix(ua);\\n  const cid = new CID(value);\\n  return multiH.toB58String(cid.multihash);\\n}; // https://github.com/ensdomains/ui/blob/master/src/utils/contents.js\\n\\n\\nEnsLibrary.prototype.decodeContenthash = function (encoded) {\\n  var decoded = null;\\n  var protocol = null;\\n\\n  if (encoded.error) {\\n    throw new Error(encoded.error);\\n  }\\n\\n  if (encoded) {\\n    try {\\n      const codec = this.getCodec(encoded);\\n      decoded = this.b58MultiHash(encoded);\\n\\n      if (codec === 'ipfs-ns') {\\n        protocol = 'ipfs';\\n        decoded = this.ipfsBundle.cidToCidV1(decoded, protocol, true);\\n      } else if (codec === 'ipns-ns') {\\n        protocol = 'ipns';\\n        decoded = bs58.decode(decoded).slice(2);\\n        decoded = $tw.ipfs.Utf8ArrayToStr(decoded);\\n        decoded = this.ipfsBundle.cidToCidV1(decoded, protocol, true);\\n      } else {\\n        throw new Error(`Unsupported ENS Content Hash codec: ${codec}`);\\n      }\\n\\n      decoded = decoded.toString();\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n  }\\n\\n  return {\\n    decoded: decoded,\\n    protocol: protocol\\n  };\\n}; // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1577.md\\n// https://github.com/ensdomains/ui/blob/master/src/utils/contents.js\\n\\n\\nEnsLibrary.prototype.encodeContenthash = function (content) {\\n  var type = null;\\n  var text = null;\\n  var encoded = null;\\n  content = content === undefined || content == null || content.trim() === '' ? null : content.trim();\\n\\n  if (content == null) {\\n    return null;\\n  }\\n\\n  const matched = content.match(/^(ipfs|ipns|bzz|onion|onion3):\\\\/\\\\/(.*)/) || content.match(/\\\\/(ipfs)\\\\/(.*)/) || content.match(/\\\\/(ipns)\\\\/(.*)/);\\n\\n  if (matched) {\\n    type = matched[1];\\n    text = matched[2];\\n  } // https://stackoverflow.com/questions/39225161/convert-uint8array-into-hex-string-equivalent-in-node-js\\n\\n\\n  function i2hex(i) {\\n    return ('0' + i.toString(16)).slice(-2);\\n  }\\n\\n  if (type === 'ipfs') {\\n    encoded = this.ipfsBundle.cidToBase58CidV0(text, true);\\n    encoded = new CID(1, 'dag-pb', multiH.fromB58String(encoded.toString()));\\n    encoded = multiC.addPrefix('ipfs-ns', encoded.bytes);\\n    encoded = Array.from(encoded).map(i2hex).join('');\\n    encoded = `0x${encoded}`;\\n  } else if (type === 'ipns') {\\n    var ua = [Uint8Array.from([0, text.length]), fromString(text)];\\n    ua = concat(ua, 2 + text.length);\\n    encoded = bs58.encode(ua);\\n    encoded = new CID(1, 'dag-pb', multiH.fromB58String(encoded));\\n    encoded = multiC.addPrefix('ipns-ns', encoded.bytes);\\n    encoded = Array.from(encoded).map(i2hex).join('');\\n    encoded = `0x${encoded}`;\\n  } else {\\n    throw new Error(`Unsupported ENS Content Hash type: ${type}`);\\n  }\\n\\n  return {\\n    encoded: encoded\\n  };\\n};\\n\\nEnsLibrary.prototype.getRegistry = async function (web3) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  } // Retrieve network\\n\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId); // Retrieve an Ethereum ENS Registry address\\n\\n  var registry = null;\\n\\n  try {\\n    registry = this.registry[chainId];\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (registry === undefined || registry == null) {\\n    throw new Error(`Unsupported Ethereum network: ${chainId}`);\\n  } // Return registry address\\n\\n\\n  return {\\n    chainId: chainId,\\n    registry: registry\\n  };\\n};\\n\\nEnsLibrary.prototype.getResolver = async function (web3, registry, node) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  node = node === undefined || node == null || node.trim() === '' ? null : node.trim();\\n\\n  if (node == null) {\\n    throw new Error('Undefined ENS domain resolver...');\\n  }\\n\\n  registry = registry === undefined || registry == null || registry.trim() === '' ? null : registry.trim();\\n\\n  if (registry == null) {\\n    throw new Error('Undefined ENS registry address...');\\n  }\\n\\n  const abi = ['function resolver(bytes32 node) external view returns (address)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('resolver', [node]);\\n  const result = await web3.call({\\n    to: registry,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return null;\\n  }\\n\\n  try {\\n    const decoded = iface.decodeFunctionResult('resolver', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0];\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  } // Return\\n\\n\\n  return null;\\n}; // https://eips.ethereum.org/EIPS/eip-165\\n\\n\\nEnsLibrary.prototype.checkEip165 = async function (web3, address) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  address = address === undefined || address == null || address.trim() === '' ? null : address.trim();\\n\\n  if (address == null) {\\n    throw new Error('Undefined Ethereum address...');\\n  }\\n\\n  var abi = ['function supportsInterface(bytes4 interfaceID) public pure returns(bool)'];\\n  var iface = new globalThis.ethers.utils.Interface(abi);\\n  var data = iface.encodeFunctionData('supportsInterface', ['0x01ffc9a7']);\\n  var result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      if (decoded[0] === false) {\\n        return false;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n    return false;\\n  }\\n\\n  data = iface.encodeFunctionData('supportsInterface', ['0xffffffff']);\\n  result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      // conform to spec\\n      if (decoded[0] === false) {\\n        return true;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  } // do not conform to spec\\n\\n\\n  return false;\\n}; // https://eips.ethereum.org/EIPS/eip-1577\\n\\n\\nEnsLibrary.prototype.checkEip1577 = async function (web3, address) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  address = address === undefined || address == null || address.trim() === '' ? null : address.trim();\\n\\n  if (address == null) {\\n    throw new Error('Undefined Ethereum address...');\\n  } // contenthash, true when interfaceID is 0xbc1c58d1\\n\\n\\n  var abi = ['function supportsInterface(bytes4 interfaceID) public pure returns(bool)'];\\n  var iface = new globalThis.ethers.utils.Interface(abi);\\n  var data = iface.encodeFunctionData('supportsInterface', ['0xbc1c58d1']);\\n  var result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0];\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  return false;\\n};\\n\\nEnsLibrary.prototype.getContentHash = async function (domain, web3) {\\n  domain = domain === undefined || domain == null || domain.trim() === '' ? null : domain.trim();\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (web3 === undefined) {\\n    var {\\n      web3\\n    } = await this.ipfsBundle.getWeb3Provider();\\n  }\\n\\n  const etherscan = this.ipfsBundle.getEtherscanRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${etherscan[chainId]}/address/${registry}`); // Fetch resolver address\\n\\n  var resolver = await this.getResolver(web3, registry, domainHash); // Check\\n\\n  if (resolver == null || /^0x0+$/.test(resolver) === true) {\\n    throw new Error('Undefined ENS domain resolver...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`ENS domain resolver:\\n${etherscan[chainId]}/address/${resolver}`); // Check if resolver is EIP165\\n\\n  const eip165 = await this.checkEip165(web3, resolver);\\n\\n  if (eip165 === false) {\\n    throw new Error('ENS domain resolver do not conform to EIP165...');\\n  } // Check if resolver is EIP1577\\n\\n\\n  const eip1577 = await this.checkEip1577(web3, resolver);\\n\\n  if (eip1577 === false) {\\n    throw new Error('ENS domain resolver do not conform to EIP1577...');\\n  } // Retrieve content hash\\n\\n\\n  this.getLogger().info('Retrieving ENS domain content...');\\n  const abi = ['function contenthash(bytes32 node) external view returns (bytes memory)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('contenthash', [domainHash]);\\n  const result = await web3.call({\\n    to: resolver,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return {\\n      content: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var content = iface.decodeFunctionResult('contenthash', result);\\n\\n  if (content !== undefined && content !== null && Array.isArray(content) && content.length > 0) {\\n    var {\\n      decoded,\\n      protocol\\n    } = this.decodeContenthash(content[0]);\\n    return {\\n      content: decoded,\\n      protocol: protocol\\n    };\\n  }\\n\\n  return {\\n    content: null,\\n    protocol: null\\n  };\\n};\\n\\nEnsLibrary.prototype.isOwner = async function (domain, web3, account) {\\n  domain = domain === undefined || domain == null || domain.trim() === '' ? null : domain.trim();\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (account === undefined || account == null || web3 === undefined || web3 == null) {\\n    var {\\n      account,\\n      web3\\n    } = await this.ipfsBundle.getEnabledWeb3Provider();\\n  }\\n\\n  const etherscan = this.ipfsBundle.getEtherscanRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${etherscan[chainId]}/address/${registry}`);\\n  const abi = ['function owner(bytes32 node) public view returns(address)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('owner', [domainHash]);\\n  const result = await web3.call({\\n    to: registry,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  } // decode if applicable\\n\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('owner', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0].toLowerCase() === account.toLowerCase();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  return false;\\n};\\n\\nEnsLibrary.prototype.setContentHash = async function (domain, cid, web3, account) {\\n  cid = cid === undefined || cid == null || cid.toString().trim() === '' ? null : cid.toString().trim();\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS identifier...');\\n  }\\n\\n  domain = domain === undefined || domain == null || domain.trim() === '' ? null : domain.trim();\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (account === undefined || web3 === undefined) {\\n    var {\\n      account,\\n      web3\\n    } = await this.ipfsBundle.getEnabledWeb3Provider();\\n  }\\n\\n  const etherscan = this.ipfsBundle.getEtherscanRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${etherscan[chainId]}/address/${registry}`);\\n  var resolver = await this.getResolver(web3, registry, domainHash);\\n\\n  if (resolver == null || /^0x0+$/.test(resolver) === true) {\\n    throw new Error('Undefined ENS resolver...');\\n  }\\n\\n  this.getLogger().info(`ENS domain resolver:\\n${etherscan[chainId]}/address/${resolver}`); // Check if resolver is EIP165\\n\\n  const eip165 = await this.checkEip165(web3, resolver);\\n\\n  if (eip165 === false) {\\n    throw new Error('ENS resolver do not conform to EIP165...');\\n  } // Check if resolver is EIP1577\\n\\n\\n  const eip1577 = await this.checkEip1577(web3, resolver);\\n\\n  if (eip1577 === false) {\\n    throw new Error('ENS resolver do not conform to EIP1577...');\\n  } // Encode cid\\n\\n\\n  const {\\n    encoded\\n  } = this.encodeContenthash(cid); // Set Contenthash\\n\\n  this.getLogger().info('Processing ENS domain content...');\\n  const abi = ['function setContenthash(bytes32 node, bytes calldata hash)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('setContenthash', [domainHash, encoded]);\\n\\n  try {\\n    const signer = web3.getSigner(account);\\n    const tx = await signer.sendTransaction({\\n      to: resolver,\\n      data: data\\n    });\\n    this.getLogger().info(`Processing Transaction:\\n${etherscan[chainId]}/tx/${tx.hash}`); // Wait for transaction completion\\n\\n    await tx.wait();\\n    this.getLogger().info('Processed ENS domain content...');\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    if (error.code === 4100) {\\n      const err = new Error('Unauthorized User Account...');\\n      err.name = 'UnauthorizedUserAccount';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nexports.EnsLibrary = EnsLibrary;\\n\\n},{\\\"@multiformats/base-x\\\":7,\\\"cids\\\":12,\\\"core-js/modules/es.typed-array.from.js\\\":125,\\\"core-js/modules/es.typed-array.uint8-array.js\\\":126,\\\"multicodec\\\":176,\\\"multihashes\\\":189,\\\"uint8arrays\\\":198}],3:[function(require,module,exports){\\n'use strict'; // https://github.com/ensdomains/resolvers\\n\\nvar EthereumLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  this.name = 'ethereum-library';\\n  this.network = {\\n    0x1: 'Ethereum Main Network: \\\"Mainnet\\\", chainId: \\\"0x1\\\"',\\n    0x3: 'Ethereum Test Network (PoW): \\\"Ropsten\\\", chainId: \\\"0x3\\\"',\\n    0x4: 'Ethereum Test Network (PoA): \\\"Rinkeby\\\", chainId: \\\"0x4\\\"',\\n    0x5: 'Ethereum Test Network (PoA): \\\"Goerli\\\", chainId: \\\"0x5\\\"',\\n    0x2a: 'Ethereum Test Network (PoA): \\\"Kovan\\\", chainId: \\\"0x2a\\\"'\\n  };\\n  this.etherscan = {\\n    0x1: 'https://etherscan.io',\\n    0x3: 'https://ropsten.etherscan.io',\\n    0x4: 'https://rinkeby.etherscan.io',\\n    0x5: 'https://goerli.etherscan.io',\\n    0x2a: 'https://kovan.etherscan.io'\\n  };\\n  this.once = false;\\n  this.provider = null;\\n};\\n\\nEthereumLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nEthereumLibrary.prototype.getEthereumProvider = async function () {\\n  if (this.provider == null) {\\n    this.provider = await this.detectEthereumProvider();\\n  }\\n\\n  return this.provider;\\n};\\n/*\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nEthereumLibrary.prototype.init = async function () {\\n  // Init once\\n  if (this.once) {\\n    return;\\n  }\\n\\n  const self = this;\\n\\n  try {\\n    const provider = await this.getEthereumProvider();\\n    const chainId = await this.getChainId(provider);\\n    this.getLogger().info(`Chain: ${this.network[chainId]}`); // Init Ethereum listener\\n\\n    provider.on('accountsChanged', accounts => {\\n      self.accounts(provider, accounts);\\n    });\\n    provider.on('chainChanged', chainId => {\\n      const id = parseInt(chainId, 16);\\n      self.getLogger().info(`Chain: ${self.network[id]}`);\\n    });\\n    provider.on('connect', chainId => {\\n      const id = parseInt(chainId, 16);\\n      self.getLogger().info(`Chain: ${self.network[id]}`);\\n    });\\n    provider.on('disconnect', (code, reason) => {\\n      self.disconnectedFromAllChains(code, reason);\\n    });\\n    provider.on('message', message => {\\n      self.providerMessage(message);\\n    });\\n  } catch (error) {\\n    if (error.name !== 'InstallMetamask') {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(this.name, error.message);\\n    }\\n  } // Init once\\n\\n\\n  this.once = true;\\n};\\n\\nEthereumLibrary.prototype.getChainId = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  var chainId = await provider.request({\\n    method: 'eth_chainId'\\n  });\\n  chainId = chainId === undefined || chainId == null || chainId.trim() === '' ? null : chainId.trim();\\n  return chainId !== null ? parseInt(chainId, 16) : null;\\n};\\n\\nEthereumLibrary.prototype.accounts = async function (provider, accounts) {\\n  if (accounts !== undefined && accounts !== null && Array.isArray(accounts) === true && accounts.length > 0) {\\n    try {\\n      const chainId = await this.getChainId(provider);\\n      this.getLogger().info(`Chain: ${this.network[chainId]}`);\\n      this.getLogger().info(`Ethereum account: ${this.etherscan[chainId]}/address/${accounts[0]}`);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(this.name, error.message);\\n    }\\n  } else {\\n    this.getLogger().info('Unavailable Ethereum account...');\\n  }\\n};\\n\\nEthereumLibrary.prototype.disconnectedFromAllChains = function (code, reason) {\\n  this.getLogger().info(`Ethereum Provider is disconnected: ${reason}. Code: ${code}`);\\n};\\n\\nEthereumLibrary.prototype.providerMessage = function (message) {\\n  this.getLogger().info(`Ethereum Provider message: ${message}`);\\n};\\n\\nEthereumLibrary.prototype.getEtherscanRegistry = function () {\\n  return this.etherscan;\\n};\\n\\nEthereumLibrary.prototype.getNetworkRegistry = function () {\\n  return this.network;\\n};\\n\\nEthereumLibrary.prototype.personalSign = async function (message, provider) {\\n  message = message === undefined || message == null || message.trim() === '' ? null : message.trim();\\n\\n  if (message == null) {\\n    throw new Error('Undefined Message....');\\n  }\\n\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    const account = await this.getAccount(provider);\\n    const signature = await provider.request({\\n      method: 'personal_sign',\\n      params: [message, account]\\n    });\\n    return signature;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.personalRecover = async function (message, signature) {\\n  message = message === undefined || message == null || message.trim() === '' ? null : message.trim();\\n\\n  if (message == null) {\\n    throw new Error('Undefined Message....');\\n  }\\n\\n  signature = signature === undefined || signature == null || signature.trim() === '' ? null : signature.trim();\\n\\n  if (signature == null) {\\n    throw new Error('Undefined Signature....');\\n  }\\n\\n  await this.ipfsBundle.loadEthSigUtilLibrary();\\n  const msgParams = {\\n    data: message,\\n    sig: signature\\n  };\\n  const recovered = globalThis.sigUtil.recoverPersonalSignature(msgParams);\\n\\n  if (recovered === undefined || recovered == null) {\\n    const err = new Error('Unrecoverable signature...');\\n    err.name = 'UnrecoverableSignature';\\n    throw err;\\n  }\\n\\n  return recovered;\\n};\\n\\nEthereumLibrary.prototype.decrypt = async function (text, provider) {\\n  text = text === undefined || text == null || text.trim() === '' ? null : text.trim();\\n\\n  if (text == null) {\\n    throw new Error('Undefined Text....');\\n  }\\n\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    const account = await this.getAccount(provider);\\n    var tStart = new Date();\\n    const decryptedText = await provider.request({\\n      method: 'eth_decrypt',\\n      params: [text, account]\\n    });\\n\\n    if (decryptedText !== undefined || decryptedText !== null) {\\n      var tStop = new Date() - tStart;\\n      var ratio = Math.floor(decryptedText.length * 100 / text.length);\\n      this.getLogger().info(`Ethereum Decrypt: ${tStop}ms, In: ${text.length}, Out: ${decryptedText.length}, Ratio: ${ratio}%`);\\n    }\\n\\n    return decryptedText;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.getPublicEncryptionKey = async function (provider, account) {\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    if (account === undefined) {\\n      account = await this.getAccount(provider);\\n    }\\n\\n    const encryptionKey = await provider.request({\\n      method: 'eth_getEncryptionPublicKey',\\n      params: [account]\\n    });\\n    return encryptionKey;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n/*\\n * https://eips.ethereum.org/EIPS/eip-1102\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-2255\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nEthereumLibrary.prototype.detectEthereumProvider = async function () {\\n  var provider = null;\\n\\n  try {\\n    if (typeof globalThis.detectEthereumProvider === 'function') {\\n      provider = await globalThis.detectEthereumProvider({\\n        mustBeMetaMask: true\\n      });\\n\\n      if (provider !== undefined && provider !== null) {\\n        provider.autoRefreshOnNetworkChange = false;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (provider === undefined || provider == null) {\\n    const err = new Error('Please install ~MetaMask...');\\n    err.name = 'InstallMetamask';\\n    throw err;\\n  }\\n\\n  return provider;\\n};\\n\\nEthereumLibrary.prototype.checkAccountPermission = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof provider.request === 'function') {\\n    const permissions = await provider.request({\\n      method: 'wallet_getPermissions'\\n    });\\n    const accountsPermission = permissions.find(permission => permission.parentCapability === 'eth_accounts');\\n\\n    if (accountsPermission) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n};\\n\\nEthereumLibrary.prototype.requestAccountPermission = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof provider.request === 'function') {\\n    const permissions = await provider.request({\\n      method: 'wallet_requestPermissions',\\n      params: [{\\n        eth_accounts: {}\\n      }]\\n    });\\n    const accountsPermission = permissions.find(permission => permission.parentCapability === 'eth_accounts');\\n\\n    if (accountsPermission) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n};\\n/*\\n * https://docs.metamask.io/guide/provider-migration.html#migrating-to-the-new-provider-api\\n */\\n\\n\\nEthereumLibrary.prototype.getAccount = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  try {\\n    var accounts = null;\\n    var permission = false; // Permission Attempt\\n\\n    try {\\n      permission = await this.checkAccountPermission(provider);\\n\\n      if (permission === false) {\\n        permission = await this.requestAccountPermission(provider);\\n      }\\n    } catch (error) {\\n      if (error.code === 4001) {\\n        throw error;\\n      }\\n\\n      this.getLogger().error(error);\\n    } // Request Accounts attempt\\n\\n\\n    try {\\n      if (permission === false || (await provider._metamask.isUnlocked()) === false) {\\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md\\n        accounts = await provider.request({\\n          method: 'eth_requestAccounts'\\n        });\\n      }\\n\\n      if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n        accounts = await provider.request({\\n          method: 'eth_accounts'\\n        });\\n      }\\n    } catch (error) {\\n      if (error.code === 4001) {\\n        throw error;\\n      }\\n\\n      this.getLogger().error(error);\\n    } // Enable attempt\\n\\n\\n    if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n      if (typeof provider.enable === 'function') {\\n        accounts = await provider.enable();\\n      }\\n    }\\n\\n    if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n      throw new Error('Unable to retrieve any Ethereum accounts...');\\n    }\\n\\n    await this.accounts(provider, accounts);\\n    return accounts[0];\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.getEnabledWeb3Provider = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  await this.ipfsBundle.loadEthersJsLibrary(); // Enable provider\\n  // https://github.com/ethers-io/ethers.js/issues/433\\n\\n  const account = await this.getAccount(provider); // Instantiate a Web3Provider\\n\\n  const web3 = new globalThis.ethers.providers.Web3Provider(provider, 'any'); // Retrieve current network\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId, 16);\\n  return {\\n    account: account,\\n    chainId: chainId,\\n    web3: web3\\n  };\\n};\\n\\nEthereumLibrary.prototype.getWeb3Provider = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  await this.ipfsBundle.loadEthersJsLibrary(); // Instantiate an ethers Web3Provider\\n\\n  const web3 = new globalThis.ethers.providers.Web3Provider(provider, 'any'); // Retrieve current network\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId, 16);\\n  return {\\n    web3: web3,\\n    chainId: chainId\\n  };\\n};\\n\\nexports.EthereumLibrary = EthereumLibrary;\\n\\n},{}],4:[function(require,module,exports){\\n'use strict';\\n\\nrequire(\\\"core-js/modules/esnext.map.delete-all.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.every.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.filter.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.find.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.find-key.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.includes.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.key-of.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.map-keys.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.map-values.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.merge.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.reduce.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.some.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.update.js\\\");\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nconst getIpfs = require('ipfs-provider').getIpfs;\\n\\nconst providers = require('ipfs-provider').providers;\\n\\nconst {\\n  httpClient,\\n  windowIpfs\\n} = providers;\\n/*\\n * https://infura.io/docs\\n * https://github.com/ipfs/js-ipfs/tree/master/docs/core-api\\n **/\\n\\nvar IpfsLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ipfs-library';\\n};\\n\\nIpfsLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nIpfsLibrary.prototype.add = async function (client, content) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  if (content === undefined || content == null) {\\n    throw new Error('Undefined content...');\\n  } // Window IPFS policy\\n\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands:€€