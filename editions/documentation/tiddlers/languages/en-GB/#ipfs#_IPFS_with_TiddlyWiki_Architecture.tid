title: #ipfs# IPFS with TiddlyWiki Architecture
modified: 20210601094915385
tags: $:/ipfs/documentation [[#ipfs# Architecture]]
type: text/vnd.tiddlywiki

<h2>IPFS with ~TiddlyWiki Architecture</h2>

<h3>[ext[Introduction|https://tiddlywiki.com/dev/#Introduction]]</h3>
<p>
  ~TiddlyWiki is a Wiki application implemented as a single [ext[HTML|HTML]] page. ~TiddlyWiki requires a [[browser|#ipfs# Browsers]]  to run and uses [ext[Node.js|https://nodejs.org]] to be built.
</p>
<p>
~TiddlyWiki is used as a standalone or as an online application.
</p>
<p>
~TiddlyWiki is self contained as documents, images, libraries, objects, plugins, programs, texts or styles are embedded or resolved within.
</p>

<h3>Structure</h3>
<p>
  ~TiddlyWiki follows a standard <b>html</b> page [ext[model|https://www.w3.org/standards/webdesign/htmlcss]].
</p>
<ul>
  <li>A <b>&lt;!DOCTYPE&gt;</b> declaration</li>
  <li>A root <b>&lt;html&gt;</b> element</li>
  <li>A meta <b>&lt;head&gt;</b> section</li>
  <li>A body <b>&lt;body&gt;</b> section</li>
</ul>
<p>
  ~TiddlyWiki has several storage <b>&lt;div&gt;</b> elements in the <b>&lt;body&gt;</b> section:
</p>
<ul>
  <li>[[encryptedStoreArea|$:/core/templates/store.area.template.html]]</li>
  <li>[[storeArea|$:/core/templates/store.area.template.html]]</li>
</ul>
<p>
  IPFS with ~TiddlyWiki introduces a new section:
</p>
<ul>
  <li>[[compressedStoreArea|$:/core/templates/store.area.template.html]]</li>
</ul>

<h3>Kernel Architecture</h3>
<p>
  The ~TiddlyWiki documentation details the Kernel:
</p>
<ul>
  <li>[ext[Introduction|https://tiddlywiki.com/dev/#Introduction]]</li>
  <li>[ext[TiddlyWiki - A quick Overview|https://tiddlywiki.com/dev/#TiddlyWiki - A quick Overview]]</li>
  <li>[ext[Microkernel Architecture|https://tiddlywiki.com/dev/#Microkernel Architecture]]</li>
  <li>[ext[TiddlyWiki Core Application|https://tiddlywiki.com/dev/#TiddlyWiki Core Application]]</li>
</ul>
<p style="text-align: center;">

[img[#img# Kernel Architecture]]

</p>

<h3>Tiddlers</h3>
<p>
  Tiddlers are the smallest ~TiddlyWiki components and require at least a <b>title</b> field.
</p>
<ul>
  <li>Represented as a <b>JSON</b> object:</li>
</ul>

> `hello-tiddly-world.json`
```
{
    "title": "Hello Tiddly World!!!"
}
```

<ul>
  <li>Or rendered as a browser <b>Tiddler</b>:</li>
</ul>

[img[#img# Hello Tiddly World]]

<h3>Components</h3>
<p>
  The browser loads the <b>html</b> content and process it before starting ~TiddlyWiki.
  The template [[$:/core/templates/tiddlywiki5.html]] defines and describes the ~TiddlyWiki <b>&lt;html&gt;</b> document.
</p>

<h4>Preboot assets</h4>
<ul>
  <li>[[$:/favicon.ico]]</li>
  <li>[[$:/boot/boot.css]]</li>
  <li>[[$:/boot/bootprefix.js]]</li>
  <li>[[$:/boot/boot.js]]</li>
  <li>[[$:/library/ipfs.js]]</li>
  <li>[[$:/library/sjcl.js]]</li>
</ul>
<p>
  Those assets are loaded, processed and rendered by the browser and then built as tiddlers once ~TiddlyWiki has started.
  Preboot assets are described as standard HTML elements:
</p>

> `tiddlywiki.html`
```
...
<link data-tiddler-_canonical_uri="$_boot_boot.css"
  data-tiddler-build="210606481"
  data-tiddler-tags="$:/isIpfs"
  data-tiddler-title="$:/boot/boot.css"
  data-tiddler-type="text/css"
  data-tiddler-version="0.4.0-beta-tw-v5.1.24+build-210606481"
  crossorigin="anonymous"
  rel="stylesheet"
  href="$_boot_boot.css"
/>
...
<script data-tiddler-_canonical_uri="$_library_sjcl.js"
  data-tiddler-build="210606482"
  data-tiddler-library="yes"
  data-tiddler-tags="$:/isIpfs"
  data-tiddler-title="$:/library/sjcl.js"
  data-tiddler-type="application/javascript"
  data-tiddler-version="1.0.8+release-210606482"
  crossorigin="anonymous"
  type="text/javascript"
  src="$_library_sjcl.js"
/>
...
```

<p>
  Preboot assets libraries are stored in the <b>&lt;body&gt;</b> section as a <b>&lt;div&gt;</b> element:
</p>

> `tiddlywiki.html`
```
<!--~~ Library modules ~~-->
<div id="libraryModules" style="display:none;">
...
</div>
```

<p>
  Preboot assets libraries tiddlers have the following fields:
</p>

> `$:/library/ipfs.js`
```
{
  ...
  "type": "application/javascript",
  "library": "yes"
  ...
}
```

<h4>~JavaScript tiddlers</h4>
<p>
  ~TiddlyWiki loads ~JavaScript content from different types.
</p>
<ul>
  <li><b>application/javascript</b></li>
  <li><b>application/json</b>
    <ul><li>JSON tiddlers are parsed as ~JavaScript objects</li></ul>
  </li>
  <li><b>application/x-tiddler-dictionary</b>
    <ul><li>Tiddlers are parsed as sequence of name:value pairs</li></ul>
  </li>
</ul>
<p>
  ~JavaScript content is interpreted as [ext[strings|https://humanwhocodes.com/blog/2013/06/25/eval-isnt-evil-just-misunderstood/]].
</p>

> [[$:/boot/boot.js]]
```
  /**
   * Run code globally with specified context variables in scope
   */
  $tw.utils.evalGlobal = function (code, context, filename) {
    ...
    // Compile the code into a function
    var fn
    if ($tw.browser) {
      /*eslint no-eval:"off"*/
      fn = window.eval(code + '\n\n//# sourceURL=' + filename)
    } else {
      fn = vm.runInThisContext(code, $tw.wiki.getFileName(filename))
    }
    ...
  }
```

<p>
  ~TiddlyWiki Plugins:
</p>
<ul>
  <li>[[$:/plugins/ipfs]]</li>
</ul>
<p>Or ~JavaScript tiddler libraries:</p>
<ul>
  <li>[[$:/library/ipfs-http-client.min.js]]</li>
</ul>
<p>
  are loaded and processed by ~TiddlyWiki.
</p>
<p>
  Plugins store their child tiddlers while tiddler libraries store their ~JavaScript content in their respective <b>text</b> field.
</p>
<p>
  Plugins have the following field:
</p>

> [[$:/plugins/ipfs]]
```
{
  ...
  "plugin-type": "plugin"
  ...
}
```

<p>
  Tiddler libraries have the following field:
</p>

> [[$:/library/ipfs-http-client.min.js]]
```
{
  ...
  "module-type": "library"
  ...
}
```

<h4>Shadow tiddler</h4>
<p>
  A Shadow tiddler is an immutable Plugin child tiddler.
  A Shadow tiddler is editable and saved as an independent copy in the [[StoreArea|$:/core/templates/store.area.template.html]]
  shadowing the Plugin source tiddler.
</p>

<h4>System tiddler</h4>
<p>
  A System tiddler is a tiddler who has a title who starts with the string `$:/`.
</p>