{
    "title": "$:/plugins/ipfs",
    "name": "IPFS with TiddlyWiki",
    "description": "IPFS with TiddlyWiki",
    "author": "Xavier Maysonnave",
    "build": "210512478",
    "version": "0.4.0-beta-tw-v5.1.23+build-210512478",
    "license": "GPL-3.0-or-later",
    "tags": "$:/ipfs/core",
    "core-version": ">=5.1.2",
    "project-uri": "https://github.com/xmaysonnave/tiddlywiki-ipfs",
    "plugin-priority": "71000",
    "plugin-type": "plugin",
    "list": "readme changelog",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/bluelight.ico\": {\n            \"title\": \"$:/bluelight.ico\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/x-icon\",\n            \"_canonical_uri\": \"ipfs://bafybeifn6upicwwbecu6hfjzqwkeyocku7c6eemvzbyhc36vaehnyejnqi/$_bluelight.ico\",\n            \"altSourceUri\": \"https://dweb.link/ipfs/bafybeifn6upicwwbecu6hfjzqwkeyocku7c6eemvzbyhc36vaehnyejnqi/$_bluelight.ico\",\n            \"_license_uri\": \"https://flyclipart.com/license\",\n            \"_source_uri\": \"https://flyclipart.com/blue-light-blue-edit-icon-with-png-and-vector-format-for-free-blue-light-png-564668\"\n        },\n        \"$:/favicon.ico\": {\n            \"title\": \"$:/favicon.ico\",\n            \"_canonical_uri\": \"ipfs://bafybeifn6upicwwbecu6hfjzqwkeyocku7c6eemvzbyhc36vaehnyejnqi/$_bluelight.ico\",\n            \"altSourceUri\": \"https://dweb.link/ipfs/bafybeifn6upicwwbecu6hfjzqwkeyocku7c6eemvzbyhc36vaehnyejnqi/$_bluelight.ico\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/x-icon\"\n        },\n        \"$:/ipfs/core/icons/dns\": {\n            \"title\": \"$:/ipfs/core/icons/dns\",\n            \"text\": \"\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/core/icons/ens\": {\n            \"title\": \"$:/ipfs/core/icons/ens\",\n            \"text\": \"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV/TSotUHCwo4pChOlkQFemoVShChVArtOpgcv2EJg1Jiouj4Fpw8GOx6uDirKuDqyAIfoA4OTopukiJ/0sKLWI8OO7Hu3uPu3eA0Kwy1QxMAKpmGelkQszmVsXgK8IYRABxhGRm6nOSlILn+LqHj693MZ7lfe7P0ZcvmAzwicSzTDcs4g3imU1L57xPHGFlOU98Tjxu0AWJH7muuPzGueSwwDMjRiY9TxwhFktdrHQxKxsq8TRxNK9qlC9kXc5z3uKsVuusfU/+wnBBW1nmOs0RJLGIJUgQoaCOCqqwEKNVI8VEmvYTHv5hxy+RSyFXBYwcC6hBhez4wf/gd7dmcWrSTQongJ4X2/4YBYK7QKth29/Htt06AfzPwJXW8deaQPyT9EZHix4B/dvAxXVHU/aAyx1g6EmXDdmR/DSFYhF4P6NvygEDt0Dvmttbex+nD0CGukrdAAeHwFiJstc93h3q7u3fM+3+fgBr1HKk47w5KwAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+QMFwUEGU/z3jwAAAJZSURBVCjPhZNLSFVRFIbXXmfvs8+9evV6b6URQk0iCg16IESjwkQiDQkbRRPDZ1SGaRRBEWG3wkKNMIpolgMjzMpyEFGBJJFFg2jQg0pLTe/Dc84+j70bKXJ99M0WrG/BWvyLwALcaBeFnivXSKVMzrWx6gb+Lr2HzC1il1MYDvFailgzNWUX2bbv5uYF+32pHkwmzPbmpmw5T2zrsFZkBvQuqmGZEO6+mmq9BwCg87ooCATZG1+qAdMWVUfqgqMAAAgA0HI+tVwiH1QUywXIgfF48v7MwPo6/kFIGQOGu40M4237LWfbrJh09YoJk6yetJVjut6x0yeiau4KcdNqdUB9kpSsRE57r9y28jF2R5SMmSpjJAkwmvA7Gw/xj+mHaGkImbb0DjsI0tdIBDlrRtC1CzxgDY1b1s+JlHUOFuH4Qf2ZC7LbQwBfI6XoM1K4bkPmdiDJkrtns6ZgCWzPaXI0lXQ1yEehgfJ0bNm4OSsB/+HF5z9ZNpGtggJBh8IPQUnIN/TYUlL51d/haUafvv8y8tJBNYyCwmObAQgd9zf2OcWLmjmhMzTCV40qudUl3in0iHvRouqvyYBYnHYcfZQKpju1T8R6I2rUG9EAZESM1KUyox+vlRrffeLvsaj6ldLJ2njQODlXquoziRmgbTRE9GAO+xYJaT2zAejayV4zJTY5VPYmDGw68MoumBGnw9reJCfFPpMPo7pXdK9y2di8kFc9T2AiwOpdVBV5jrnLRsomKR9kEm7mTIuOrh1hueB3zFA5FC/UlZ8rAYIe0b52b8keTu/5B84rA4ufLFw3AAAAAElFTkSuQmCC\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/core/icons/github\": {\n            \"title\": \"$:/ipfs/core/icons/github\",\n            \"text\": \"\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$:/ipfs/core/icons/ipfs\": {\n            \"title\": \"$:/ipfs/core/icons/ipfs\",\n            \"text\": \"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV/TSotUHCwo4pChOlkQFemoVShChVArtOpgcv2EJg1Jiouj4Fpw8GOx6uDirKuDqyAIfoA4OTopukiJ/0sKLWI8OO7Hu3uPu3eA0Kwy1QxMAKpmGelkQszmVsXgK8IYRABxhGRm6nOSlILn+LqHj693MZ7lfe7P0ZcvmAzwicSzTDcs4g3imU1L57xPHGFlOU98Tjxu0AWJH7muuPzGueSwwDMjRiY9TxwhFktdrHQxKxsq8TRxNK9qlC9kXc5z3uKsVuusfU/+wnBBW1nmOs0RJLGIJUgQoaCOCqqwEKNVI8VEmvYTHv5hxy+RSyFXBYwcC6hBhez4wf/gd7dmcWrSTQongJ4X2/4YBYK7QKth29/Htt06AfzPwJXW8deaQPyT9EZHix4B/dvAxXVHU/aAyx1g6EmXDdmR/DSFYhF4P6NvygEDt0Dvmttbex+nD0CGukrdAAeHwFiJstc93h3q7u3fM+3+fgBr1HKk47w5KwAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QMFwUDBo26RQ4AAAAZdEVYdENvbW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAB/UlEQVQoz42TS2sTURiGn3PLdDK5dKat9YYoLoqu3Im6cNeFy/6AgkEsiAvpDyhS3ClFJCuRLor4E1wE+yMqQsWF9dKmTWOaqeklmcyZcSEVm47guzy8zzkv7/cdQYYmF5euAc+BBHhUq0y/H/SIAeAUMO+4+XvlYEQB7O60bO/w4CXwuFaZ3j4GTi4u5YCH2pi5YPx0uVj2EeL3nWma0gnbtBpbbRv354FqrTIdi8nFpTtCyIXh0dEJf2wcKWVWehJraTe3CVvN1SRJZmVv7+C1MWaiOBz8EwKQSlH0fYzjXEli+0YKITHG5evHVZr1Day1JyBrLc36BvW1z5T9UZQ2aCEE+UIB1/PohG3WWh8YO3cek8sB0I967DQaFMs+Zy9eRgiBEAL9pyUhKPkBNi7xY71ObCOEkuTzBc5cuITS+nj0wVhKawqlMtFBl9QmlIKRExCAzipiyPMo+QFOIY/rFbLLStOUNE3Jellrc+L8yC9tHLP/c5f/VSdsY+M+MkmSqZ3G1krY3CbJGMXfC9BqbNLaqq8AU+p77e2XsRu3X1kbb+53dq9LpTzjOETdLjqXw3FdOmGbxvq35uH+3qxUcubd/btrx5b85tMXgVRqzhlyH+icMY6Xpx9Fvah7WAWeLM9UwszfcaRbz6pXhRQLjufGwOzyTOXToOcXpMLGTLGqOcgAAAAASUVORK5CYII=\",\n            \"type\": \"image/png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\"\n        },\n        \"$_ipfs_core_images_bluelight\": {\n            \"title\": \"$_ipfs_core_images_bluelight\",\n            \"_canonical_uri\": \"ipfs://bafybeihf7g4g6hwl455uhuzsxqdc7ljmrfiiomdaqbluzqkxtji56mkj6u/$_ipfs_core_images_bluelight.png\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeihf7g4g6hwl455uhuzsxqdc7ljmrfiiomdaqbluzqkxtji56mkj6u/$_ipfs_core_images_bluelight.png\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/png\"\n        },\n        \"$:/ipfs/core/images/ens\": {\n            \"title\": \"$:/ipfs/core/images/ens\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ensdomains/ens-app/dev/LICENSE\",\n            \"_project_uri\": \"https://github.com/ensdomains/ens-app/\",\n            \"_source_uri\": \"https://github.com/ensdomains/ens-app/blob/dev/public/safari-pinned-tab.svg\",\n            \"text\": \"<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   version=\\\"1.0\\\"\\n   width=\\\"18\\\"\\n   height=\\\"18\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   preserveAspectRatio=\\\"xMidYMid meet\\\"\\n   id=\\\"svg14\\\"\\n   sodipodi:docname=\\\"ens-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <defs\\n     id=\\\"defs18\\\" />\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview16\\\"\\n     showgrid=\\\"false\\\"\\n     inkscape:zoom=\\\"12.361274\\\"\\n     inkscape:cx=\\\"41.295086\\\"\\n     inkscape:cy=\\\"21.734019\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg14\\\" />\\n  <metadata\\n     id=\\\"metadata2\\\">\\nCreated by potrace 1.11, written by Peter Selinger 2001-2013\\n<rdf:RDF>\\n  <cc:Work\\n     rdf:about=\\\"\\\">\\n    <dc:format>image/svg+xml</dc:format>\\n    <dc:type\\n       rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n    <dc:title></dc:title>\\n  </cc:Work>\\n</rdf:RDF>\\n</metadata>\\n  <g\\n     transform=\\\"matrix(0.08837363,0,0,-0.07925696,-8.0787259,127.6037)\\\"\\n     id=\\\"g12\\\"\\n     style=\\\"fill:#000000;stroke:none\\\">\\n    <path\\n       d=\\\"m 640,1519 c -69,-48 -173,-122 -231,-163 -94,-65 -110,-82 -134,-129 -30,-63 -37,-155 -15,-222 15,-49 61,-135 71,-135 6,0 437,704 447,731 7,19 -17,4 -138,-82 z\\\"\\n       id=\\\"path4\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 856,1598 c 4,-7 44,-67 89,-133 118,-175 286,-437 393,-615 93,-154 122,-224 125,-300 2,-55 17,-35 52,75 26,80 28,92 22,217 -7,185 -45,284 -149,387 -35,36 -520,381 -534,381 -3,0 -2,-6 2,-12 z\\\"\\n       id=\\\"path6\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 141,1068 C 97,969 87,913 93,776 98,649 106,607 146,523 163,485 224,403 254,378 291,346 772,9 776,12 c 2,2 -57,95 -131,206 -132,199 -320,496 -404,639 -48,81 -70,145 -73,210 -1,23 -3,43 -4,43 -2,0 -12,-19 -23,-42 z\\\"\\n       id=\\\"path8\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 1079,398 C 962,204 859,34 851,20 l -16,-25 30,21 c 306,211 436,304 461,331 51,53 72,165 49,254 -14,51 -63,149 -76,149 -4,0 -103,-159 -220,-352 z\\\"\\n       id=\\\"path10\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/core/images/ethereum\": {\n            \"title\": \"$:/ipfs/core/images/ethereum\",\n            \"tags\": \"$:/tags/Image [[Font Awesome 5]] Brands $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"caption\": \"ethereum (Brands)\",\n            \"_license_uri\": \"https://creativecommons.org/licenses/by/4.0\",\n            \"_project_uri\": \"https://fontawesome.com/\",\n            \"_source_uri\": \"http://fa5-free-svg.tiddlyspot.com/#%24%3A%2Fimages%2Ffa5%2Fbrands%2Fethereum\",\n            \"text\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 320 512\\\">\\n  <path d=\\\"M311.9 260.8L160 353.6 8 260.8 160 0l151.9 260.8zM160 383.4L8 290.6 160 512l152-221.4-152 92.8z\\\"/>\\n</svg>\"\n        },\n        \"$:/ipfs/core/images/ice\": {\n            \"title\": \"$:/ipfs/core/images/ice\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $$:/isAttachment $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs-inactive/logo/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/ipfs-inactive/logo/\",\n            \"_source_uri\": \"https://github.com/ipfs-inactive/logo/blob/master/vector/ipfs-logo-vector-ice-text.svg\",\n            \"text\": \"<svg\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n  style=\\\"enable-background:new\\\"\\n  xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  height=\\\"512\\\"\\n  width=\\\"512\\\"\\n  version=\\\"1.1\\\"\\n  xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n  xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n  viewBox=\\\"0 0 512 512\\\"\\n>\\n  <defs>\\n    <linearGradient id=\\\"c\\\" y2=\\\"771.51\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.51\\\" x2=\\\"527.72\\\" x1=\\\"84.315\\\">\\n      <stop stop-color=\\\"#4a9ea1\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n    <linearGradient id=\\\"d\\\" y2=\\\"771.48\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.48\\\" x2=\\\"512.36\\\" x1=\\\"99.675\\\">\\n      <stop stop-color=\\\"#63d3d7\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n  </defs>\\n  <g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(-50.017,-515.51)\\\">\\n      <path fill=\\\"url(#c)\\\" d=\\\"m84.315 899.51 221.7 128 221.7-128v-256l-221.7-127.99-221.7 128z\\\"/>\\n      <path fill=\\\"url(#d)\\\" d=\\\"m283.13 546.35-160.74 92.806c0.32126 2.8543 0.32125 5.7352 0 8.5894l160.75 92.806c13.554-10.001 32.043-10.001 45.597 0l160.75-92.807c-0.32126-2.8543-0.32293-5.7338-0.001-8.588l-160.74-92.806c-13.554 10.001-32.044 10.001-45.599 0zm221.79 127.03-160.92 93.84c1.884 16.739-7.3611 32.751-22.799 39.489l0.18062 184.58c2.6325 1.1489 5.1267 2.5886 7.438 4.294l160.75-92.805c-1.884-16.739 7.3611-32.752 22.799-39.49v-185.61c-2.6325-1.1489-5.1281-2.5886-7.4394-4.294zm-397.81 1.0315c-2.3112 1.7054-4.8054 3.1465-7.438 4.2954v185.61c15.438 6.7378 24.683 22.75 22.799 39.489l160.74 92.806c2.3112-1.7054 4.8069-3.1465 7.4394-4.2954v-185.61c-15.438-6.7378-24.683-22.75-22.799-39.489l-160.74-92.81z\\\"/>\\n    </g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(0,-196.66)\\\">\\n      <path fill-opacity=\\\".25098\\\" d=\\\"m256 708.66 221.7-128v-256l-221.7 128v256z\\\"/>\\n      <path fill-opacity=\\\".039216\\\" d=\\\"m256 708.66v-256l-221.7-128v256l221.7 128z\\\"/>\\n      <path fill-opacity=\\\".13018\\\" d=\\\"m34.298 324.66 221.7 128 221.7-128-221.7-128-221.7 128z\\\"/>\\n    </g>\\n  </g>\\n  <g style=\\\"enable-background:new\\\" fill=\\\"#fff\\\">\\n    <path d=\\\"m103.09 186h-29.2v141.2h29.2v-141.2z\\\"/>\\n    <path d=\\\"m153.97 327.2v-51.8c7.2 0.6 14.4 0.6 20.4 0.6 41.6 0 53.6-20.6 53.6-46 0-30.8-22-44-56-44h-47.2v141.2h29.2zm15.8-71.8c-5.4 0-13.4 0-15.8-0.2v-48h18.2c17.6 0 27.6 8.4 27.6 23.8v0.4c0 12-4.4 24-30 24z\\\"/>\\n    <path d=\\\"m327.95 186h-88.6v141.2h29.2v-62.2h55.4v-21.2h-55.6v-36.4h57.6l2-21.4z\\\"/>\\n    <path d=\\\"m423.51 213.6 7.6-19.6c-11.4-8.2-26.8-11.2-46.2-11.2-28.2 0-51.4 13.2-51.4 40.2 0 24.2 17.8 33.8 35.6 39.6l17.8 6c12.2 4.2 22.2 8.2 22.2 21.4 0 12-10.4 16.8-26.2 16.8-16 0-33.2-4.8-43-11l-7.6 21.2c12.8 8.2 29 12.2 50.8 12.2 31 0 55-13.6 55-42.6 0-27-20.6-35.6-41.4-42.6l-19.4-6.4c-8.4-2.8-14.8-6.6-14.8-17.4 0-11 9-15.4 22.4-15.4 16.4 0 29.2 3 38.6 8.8z\\\"/>\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/core/images/ipfs\": {\n            \"title\": \"$:/ipfs/core/images/ipfs\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs-inactive/logo/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/ipfs-inactive/logo/\",\n            \"_source_uri\": \"https://github.com/ipfs-inactive/logo/blob/master/vector/ipfs-logo-vector-black.svg\",\n            \"text\": \"<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   style=\\\"enable-background:new\\\"\\n   height=\\\"22\\\"\\n   width=\\\"22\\\"\\n   version=\\\"1.1\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   id=\\\"svg24\\\"\\n   sodipodi:docname=\\\"ipfs-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <metadata\\n     id=\\\"metadata28\\\">\\n    <rdf:RDF>\\n      <cc:Work\\n         rdf:about=\\\"\\\">\\n        <dc:format>image/svg+xml</dc:format>\\n        <dc:type\\n           rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n        <dc:title></dc:title>\\n      </cc:Work>\\n    </rdf:RDF>\\n  </metadata>\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview26\\\"\\n     showgrid=\\\"false\\\"\\n     units=\\\"pt\\\"\\n     inkscape:zoom=\\\"5.2149125\\\"\\n     inkscape:cx=\\\"133.61143\\\"\\n     inkscape:cy=\\\"41.576599\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg24\\\" />\\n  <defs\\n     id=\\\"defs8\\\">\\n    <linearGradient\\n       id=\\\"b\\\"\\n       y2=\\\"771.51001\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"527.71997\\\"\\n       y1=\\\"771.51001\\\"\\n       x1=\\\"84.315002\\\">\\n      <stop\\n         offset=\\\"0\\\"\\n         id=\\\"stop2\\\" />\\n    </linearGradient>\\n    <linearGradient\\n       id=\\\"a\\\"\\n       y2=\\\"771.47998\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"512.35999\\\"\\n       y1=\\\"771.47998\\\"\\n       x1=\\\"99.675003\\\">\\n      <stop\\n         stop-color=\\\"#d8d8d8\\\"\\n         offset=\\\"0\\\"\\n         id=\\\"stop5\\\" />\\n    </linearGradient>\\n  </defs>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-24.339808,-128.87748)\\\"\\n     id=\\\"g14\\\">\\n    <path\\n       d=\\\"m 84.315,899.51 221.7,128 221.7,-128 v -256 l -221.7,-127.99 -221.7,128 z\\\"\\n       id=\\\"path10\\\"\\n       style=\\\"fill:url(#b)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 283.13,546.35 -160.74,92.806 c 0.32126,2.8543 0.32125,5.7352 0,8.5894 l 160.75,92.806 c 13.554,-10.001 32.043,-10.001 45.597,0 l 160.75,-92.807 c -0.32126,-2.8543 -0.32293,-5.7338 -0.001,-8.588 l -160.74,-92.806 c -13.554,10.001 -32.044,10.001 -45.599,0 z M 504.92,673.38 344,767.22 c 1.884,16.739 -7.3611,32.751 -22.799,39.489 l 0.18062,184.58 c 2.6325,1.1489 5.1267,2.5886 7.438,4.294 l 160.75,-92.805 c -1.884,-16.739 7.3611,-32.752 22.799,-39.49 v -185.61 c -2.6325,-1.1489 -5.1281,-2.5886 -7.4394,-4.294 z m -397.81,1.0315 c -2.3112,1.7054 -4.8054,3.1465 -7.438,4.2954 v 185.61 c 15.438,6.7378 24.683,22.75 22.799,39.489 l 160.74,92.806 c 2.3112,-1.7054 4.8069,-3.1465 7.4394,-4.2954 v -185.61 c -15.438,-6.7378 -24.683,-22.75 -22.799,-39.489 l -160.74,-92.81 z\\\"\\n       id=\\\"path12\\\"\\n       style=\\\"fill:url(#a)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-9.9010468,-49.164992)\\\"\\n     id=\\\"g22\\\">\\n    <path\\n       d=\\\"m 256,708.66 221.7,-128 v -256 l -221.7,128 z\\\"\\n       id=\\\"path16\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.25097997\\\" />\\n    <path\\n       d=\\\"m 256,708.66 v -256 l -221.7,-128 v 256 z\\\"\\n       id=\\\"path18\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.03921599\\\" />\\n    <path\\n       d=\\\"m 34.298,324.66 221.7,128 221.7,-128 -221.7,-128 z\\\"\\n       id=\\\"path20\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.13018003\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/core/images/tiddlywiki\": {\n            \"title\": \"$:/ipfs/core/images/tiddlywiki\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"text\": \"<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\">\\n  <path d=\\\"M64 0l54.56 32v64L64 128 9.44 96V32L64 0zm21.127 95.408c-3.578-.103-5.15-.094-6.974-3.152l-1.42.042c-1.653-.075-.964-.04-2.067-.097-1.844-.07-1.548-1.86-1.873-2.8-.52-3.202.687-6.43.65-9.632-.014-1.14-1.593-5.17-2.157-6.61-1.768.34-3.546.406-5.34.497-4.134-.01-8.24-.527-12.317-1.183-.8 3.35-3.16 8.036-1.21 11.44 2.37 3.52 4.03 4.495 6.61 4.707 2.572.212 3.16 3.18 2.53 4.242-.55.73-1.52.864-2.346 1.04l-1.65.08c-1.296-.046-2.455-.404-3.61-.955-1.93-1.097-3.925-3.383-5.406-5.024.345.658.55 1.938.24 2.53-.878 1.27-4.665 1.26-6.4.47-1.97-.89-6.73-7.162-7.468-11.86 1.96-3.78 4.812-7.07 6.255-11.186-3.146-2.05-4.83-5.384-4.61-9.16l.08-.44c-3.097.59-1.49.37-4.82.628-10.608-.032-19.935-7.37-14.68-18.774.34-.673.664-1.287 1.243-.994.466.237.4 1.18.166 2.227-3.005 13.627 11.67 13.732 20.69 11.21.89-.25 2.67-1.936 3.905-2.495 2.016-.91 4.205-1.282 6.376-1.55 5.4-.63 11.893 2.276 15.19 2.37 3.3.096 7.99-.805 10.87-.615 2.09.098 4.143.483 6.16 1.03 1.306-6.49 1.4-11.27 4.492-12.38 1.814.293 3.213 2.818 4.25 4.167 2.112-.086 4.12.46 6.115 1.066 3.61-.522 6.642-2.593 9.833-4.203-3.234 2.69-3.673 7.075-3.303 11.127.138 2.103-.444 4.386-1.164 6.54-1.348 3.507-3.95 7.204-6.97 7.014-1.14-.036-1.805-.695-2.653-1.4-.164 1.427-.81 2.7-1.434 3.96-1.44 2.797-5.203 4.03-8.687 7.016-3.484 2.985 1.114 13.65 2.23 15.594 1.114 1.94 4.226 2.652 3.02 4.406-.37.58-.936.785-1.54 1.01l-.82.11zm-40.097-8.85l.553.14c.694-.27 2.09.15 2.83.353-1.363-1.31-3.417-3.24-4.897-4.46-.485-1.47-.278-2.96-.174-4.46l.02-.123c-.582 1.205-1.322 2.376-1.72 3.645-.465 1.71 2.07 3.557 3.052 4.615l.336.3z\\\" fill-rule=\\\"evenodd\\\"/>\\n</svg>\"\n        },\n        \"$:/ipfs/core/images/user-cog\": {\n            \"title\": \"$:/ipfs/core/images/user-cog\",\n            \"caption\": \"user-cog (Solid)\",\n            \"tags\": \"$:/tags/Image [[Font Awesome 5]] Solid $:/ipfs/core $:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"_license_uri\": \"https://creativecommons.org/licenses/by/4.0\",\n            \"_project_uri\": \"https://fontawesome.com/\",\n            \"_source_uri\": \"http://fa5-free-svg.tiddlyspot.com/#%24%3A%2Fimages%2Ffa5%2Fsolid%2Fuser-cog\",\n            \"text\": \"<svg\\n  class=\\\"tc-image-button\\\"\\n  xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  width=\\\"22pt\\\"\\n  height=\\\"22pt\\\"\\n  viewBox=\\\"0 0 640 512\\\"\\n>\\n  <path d=\\\"M610.5 373.3c2.6-14.1 2.6-28.5 0-42.6l25.8-14.9c3-1.7 4.3-5.2 3.3-8.5-6.7-21.6-18.2-41.2-33.2-57.4-2.3-2.5-6-3.1-9-1.4l-25.8 14.9c-10.9-9.3-23.4-16.5-36.9-21.3v-29.8c0-3.4-2.4-6.4-5.7-7.1-22.3-5-45-4.8-66.2 0-3.3.7-5.7 3.7-5.7 7.1v29.8c-13.5 4.8-26 12-36.9 21.3l-25.8-14.9c-2.9-1.7-6.7-1.1-9 1.4-15 16.2-26.5 35.8-33.2 57.4-1 3.3.4 6.8 3.3 8.5l25.8 14.9c-2.6 14.1-2.6 28.5 0 42.6l-25.8 14.9c-3 1.7-4.3 5.2-3.3 8.5 6.7 21.6 18.2 41.1 33.2 57.4 2.3 2.5 6 3.1 9 1.4l25.8-14.9c10.9 9.3 23.4 16.5 36.9 21.3v29.8c0 3.4 2.4 6.4 5.7 7.1 22.3 5 45 4.8 66.2 0 3.3-.7 5.7-3.7 5.7-7.1v-29.8c13.5-4.8 26-12 36.9-21.3l25.8 14.9c2.9 1.7 6.7 1.1 9-1.4 15-16.2 26.5-35.8 33.2-57.4 1-3.3-.4-6.8-3.3-8.5l-25.8-14.9zM496 400.5c-26.8 0-48.5-21.8-48.5-48.5s21.8-48.5 48.5-48.5 48.5 21.8 48.5 48.5-21.7 48.5-48.5 48.5zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm201.2 226.5c-2.3-1.2-4.6-2.6-6.8-3.9l-7.9 4.6c-6 3.4-12.8 5.3-19.6 5.3-10.9 0-21.4-4.6-28.9-12.6-18.3-19.8-32.3-43.9-40.2-69.6-5.5-17.7 1.9-36.4 17.9-45.7l7.9-4.6c-.1-2.6-.1-5.2 0-7.8l-7.9-4.6c-16-9.2-23.4-28-17.9-45.7.9-2.9 2.2-5.8 3.2-8.7-3.8-.3-7.5-1.2-11.4-1.2h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c10.1 0 19.5-3.2 27.2-8.5-1.2-3.8-2-7.7-2-11.8v-9.2z\\\"/>\\n</svg>\"\n        },\n        \"$:/ipfs/core/logo/bluelight\": {\n            \"title\": \"$:/ipfs/core/logo/bluelight\",\n            \"_canonical_uri\": \"ipfs://bafybeicbul2onp6mxb737el3skvhfohb4usmoeh7mvm2rg5ae6gyixlvhe/$:/ipfs/core/logo/bluelight.jpg\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/jpg\"\n        },\n        \"$:/tiddlywiki.ico\": {\n            \"title\": \"$:/tiddlywiki.ico\",\n            \"_canonical_uri\": \"ipfs://bafybeihh34pihp7uiroxnyeifrdto2owstdn2sryuatsu5h4lu32gy4yni/$_tiddlywiki.ico\",\n            \"altSourceUri\": \"https://dweb.link/ipfs/bafybeihh34pihp7uiroxnyeifrdto2owstdn2sryuatsu5h4lu32gy4yni/$_tiddlywiki.ico\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/x-icon\"\n        },\n        \"$:/boot/bundle\": {\n            \"title\": \"$:/boot/bundle\",\n            \"tags\": \"$:/boot/bundle\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n// boot modules\\n{{{ [is[system]type[application/javascript]boot-bundle[yes]] ||$:/core/templates/plain-text-tiddler}}}\\n\"\n        },\n        \"$:/config/PreferredSaver\": {\n            \"title\": \"$:/config/PreferredSaver\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/core/modules/savers/download.js\"\n        },\n        \"$:/config/encryption\": {\n            \"title\": \"$:/config/encryption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"standford\"\n        },\n        \"$:/config/HtmlParser/DisableSandbox\": {\n            \"title\": \"$:/config/HtmlParser/DisableSandbox\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/config/HtmlParser/SandboxTokens\": {\n            \"title\": \"$:/config/HtmlParser/SandboxTokens\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_sandbox_source_uri\": \"https://developer.mozilla.org/fr/docs/Web/HTML/Element/iframe\"\n        },\n        \"$:/ipfs/build/ipns/cid\": {\n            \"title\": \"$:/ipfs/build/ipns/cid\",\n            \"tags\": \"$:/ipfs/core\",\n            \"peerId\": \"12D3KooWMLtu3emAahojNa4C7CHZShvQvafMcYHtFupb7Ep5LfK3\",\n            \"text\": \"ipns://k51qzi5uqu5dmj8zym08576inkibqy8apl49xg888d1x0q5vhk1lt2uj6sp2wl\"\n        },\n        \"$:/ipfs/http/long/timeout\": {\n            \"title\": \"$:/ipfs/http/long/timeout\",\n            \"tags\": \"$:/ipfs/core\",\n            \"timeout\": \"960000\"\n        },\n        \"$:/ipfs/http/short/timeout\": {\n            \"title\": \"$:/ipfs/http/short/timeout\",\n            \"tags\": \"$:/ipfs/core\",\n            \"timeout\": \"4000\"\n        },\n        \"$:/ipfs/raw/build/ipns/cid\": {\n            \"title\": \"$:/ipfs/raw/build/ipns/cid\",\n            \"tags\": \"$:/ipfs/core\",\n            \"peerId\": \"12D3KooWMLtu3emAahojNa4C7CHZShvQvafMcYHtFupb7Ep5LfK3\",\n            \"text\": \"ipns://k51qzi5uqu5dh9giahc358e235iqoncw9lpyc6vrn1aqguruj2nncupmbv9355\"\n        },\n        \"$:/ipfs/saver/api\": {\n            \"title\": \"$:/ipfs/saver/api\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\"\n        },\n        \"$:/ipfs/saver/directory/wrapped\": {\n            \"title\": \"$:/ipfs/saver/directory/wrapped\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/ipfs/saver/ens/domain\": {\n            \"title\": \"$:/ipfs/saver/ens/domain\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/eth-link/resolve\": {\n            \"title\": \"$:/ipfs/saver/eth-link/resolve\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/ipfs/saver/export\": {\n            \"title\": \"$:/ipfs/saver/export\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"json\"\n        },\n        \"$:/ipfs/saver/gateway\": {\n            \"title\": \"$:/ipfs/saver/gateway\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/gateway/https/dweb.link\"\n        },\n        \"$:/ipfs/saver/ipns/cid\": {\n            \"title\": \"$:/ipfs/saver/ipns/cid\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/ipns/key\": {\n            \"title\": \"$:/ipfs/saver/ipns/key\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/ipns/resolve\": {\n            \"title\": \"$:/ipfs/saver/ipns/resolve\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/ipfs/saver/pin\": {\n            \"title\": \"$:/ipfs/saver/pin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/ipfs/saver/policy\": {\n            \"title\": \"$:/ipfs/saver/policy\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"gateway\"\n        },\n        \"$:/ipfs/saver/protocol\": {\n            \"title\": \"$:/ipfs/saver/protocol\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ipfs\"\n        },\n        \"$:/ipfs/saver/provider\": {\n            \"title\": \"$:/ipfs/saver/provider\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"http\"\n        },\n        \"$:/ipfs/saver/unpin\": {\n            \"title\": \"$:/ipfs/saver/unpin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/ipfs/saver/verbose\": {\n            \"title\": \"$:/ipfs/saver/verbose\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/boot/boot.css-build\": {\n            \"title\": \"$:/boot/boot.css-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/css\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/boot/boot.css\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512344\",\n            \"sourceSize\": \"1462\",\n            \"sourceExtension\": \"css\",\n            \"sourceFilename\": \"$_boot_boot.css\",\n            \"sourceUri\": \"ipfs://bafybeiduxtzrx7euyjw3v6dbp3qaotc2iycehc4ystbin3v4zbzawmmc5i/$_boot_boot.css-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.css\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeiduxtzrx7euyjw3v6dbp3qaotc2iycehc4ystbin3v4zbzawmmc5i/$_boot_boot.css-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.css\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/boot/boot.css.json-build\": {\n            \"title\": \"$:/boot/boot.css.json-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/css\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/boot/boot.css.json\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512344\",\n            \"sourceSize\": \"2014\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_boot_boot.css.json\",\n            \"sourceUri\": \"ipfs://bafybeia4nevwleqmappkfhaomcflnsahxhtfcrslpsmr5qveorrcchnkwu/$_boot_boot.css.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeia4nevwleqmappkfhaomcflnsahxhtfcrslpsmr5qveorrcchnkwu/$_boot_boot.css.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/boot/boot.js-build\": {\n            \"title\": \"$:/boot/boot.js-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/bundle\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512478\",\n            \"name\": \"$:/boot/boot.js\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512478\",\n            \"sourceSize\": \"141209\",\n            \"sourceExtension\": \"js\",\n            \"sourceFilename\": \"$_boot_boot.js\",\n            \"sourceUri\": \"ipfs://bafybeiejs4acsw22xdh3wllx37lw6qgk23vv44nefw7fhfowpqfdoqbhrm/$_boot_boot.js-0.4.0-beta-tw-v5.1.24-pre-release+build-210512478.js\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeiejs4acsw22xdh3wllx37lw6qgk23vv44nefw7fhfowpqfdoqbhrm/$_boot_boot.js-0.4.0-beta-tw-v5.1.24-pre-release+build-210512478.js\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/boot/boot.js.json-build\": {\n            \"title\": \"$:/boot/boot.js.json-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/bundle\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512478\",\n            \"name\": \"$:/boot/boot.js.json\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512478\",\n            \"sourceSize\": \"146722\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_boot_boot.js.json\",\n            \"sourceUri\": \"ipfs://bafybeic6c7unr2u4jevobmdgaazxrbefewxynwqncf7pb3lgncgvvkcaye/$_boot_boot.js.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512478.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeic6c7unr2u4jevobmdgaazxrbefewxynwqncf7pb3lgncgvvkcaye/$_boot_boot.js.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512478.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/boot/bootprefix.js-build\": {\n            \"title\": \"$:/boot/bootprefix.js-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/bootprefix\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/boot/bootprefix.js\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512344\",\n            \"sourceSize\": \"3384\",\n            \"sourceExtension\": \"js\",\n            \"sourceFilename\": \"$_boot_bootprefix.js\",\n            \"sourceUri\": \"ipfs://bafybeib755tzfb7jabag2pmx2ujyg4ixptpnef7zx72neh7qdwuxo6q6ie/$_boot_bootprefix.js-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.js\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeib755tzfb7jabag2pmx2ujyg4ixptpnef7zx72neh7qdwuxo6q6ie/$_boot_bootprefix.js-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.js\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/boot/bootprefix.js.json-build\": {\n            \"title\": \"$:/boot/bootprefix.js.json-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/boot/bootprefix\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/boot/bootprefix.js.json\",\n            \"version\": \"0.4.0-beta-tw-v5.1.24-pre-release+build-210512344\",\n            \"sourceSize\": \"3967\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_boot_bootprefix.js.json\",\n            \"sourceUri\": \"ipfs://bafybeihfpuohfodurcq2kjcsocsxr5dxyhqs5gkqusr6scec7bbxv3f54q/$_boot_bootprefix.js.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeihfpuohfodurcq2kjcsocsxr5dxyhqs5gkqusr6scec7bbxv3f54q/$_boot_bootprefix.js.json-0.4.0-beta-tw-v5.1.24-pre-release+build-210512344.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/core.json-build\": {\n            \"title\": \"$:/core.json-build\",\n            \"tags\": \"$:/core $:/ipfs/documentation\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512343\",\n            \"name\": \"$:/core.json\",\n            \"version\": \"0.4.0-beta-tw-v5.1.23+release+build-210512343\",\n            \"sourceSize\": \"2064875\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_core.json\",\n            \"sourceUri\": \"ipfs://bafybeib7usmiyt2wbish5im5kj7aakhsxh6wniwenvd2vv7izwfpvd27by/$_core.json-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeib7usmiyt2wbish5im5kj7aakhsxh6wniwenvd2vv7izwfpvd27by/$_core.json-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/core.zlib.ipfs-build\": {\n            \"title\": \"$:/core.zlib.ipfs-build\",\n            \"tags\": \"$:/core $:/ipfs/documentation\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512343\",\n            \"name\": \"$:/core.zlib.ipfs\",\n            \"version\": \"0.4.0-beta-tw-v5.1.23+release+build-210512343\",\n            \"sourceSize\": \"530\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_core.zlib.ipfs\",\n            \"sourceUri\": \"ipfs://bafybeigm7inczzf63tu3pbjmwm75skchy2yieijqdjsl7dtk663a3awfcy/$_core.zlib.ipfs-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeigm7inczzf63tu3pbjmwm75skchy2yieijqdjsl7dtk663a3awfcy/$_core.zlib.ipfs-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/core.zlib-build\": {\n            \"title\": \"$:/core.zlib-build\",\n            \"tags\": \"$:/core $:/ipfs/documentation\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512343\",\n            \"name\": \"$:/core.zlib\",\n            \"version\": \"0.4.0-beta-tw-v5.1.23+release+build-210512343\",\n            \"sourceSize\": \"452679\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_core.zlib\",\n            \"sourceUri\": \"ipfs://bafybeihnh7qq3l4r63a27suk5xpua4lkmjuqigl27tydlqrygkqvvcywkq/$_core.zlib-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeihnh7qq3l4r63a27suk5xpua4lkmjuqigl27tydlqrygkqvvcywkq/$_core.zlib-0.4.0-beta-tw-v5.1.23+release+build-210512343.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/library/ipfs.js-build\": {\n            \"title\": \"$:/library/ipfs.js-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/library/ipfs\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/library/ipfs.js\",\n            \"version\": \"1.0.0+release-210512344\",\n            \"sourceSize\": \"129974\",\n            \"sourceExtension\": \"js\",\n            \"sourceFilename\": \"$_library_ipfs.js\",\n            \"sourceUri\": \"ipfs://bafybeihdjgfwyl7sh25nwyxidfnehnwpv7g7jtgdqu6crptk4rb5hf5olu/$_library_ipfs.js-1.0.0+release-210512344.js\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeihdjgfwyl7sh25nwyxidfnehnwpv7g7jtgdqu6crptk4rb5hf5olu/$_library_ipfs.js-1.0.0+release-210512344.js\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/library/ipfs.js.json-build\": {\n            \"title\": \"$:/library/ipfs.js.json-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/library/ipfs\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/library/ipfs.js.json\",\n            \"version\": \"1.0.0+release-210512344\",\n            \"sourceSize\": \"132986\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_library_ipfs.js.json\",\n            \"sourceUri\": \"ipfs://bafybeicnpptrffwo7s2ocht4tszvxnm2q5ewijx3fy7xuitltaasy45aom/$_library_ipfs.js.json-1.0.0+release-210512344.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeicnpptrffwo7s2ocht4tszvxnm2q5ewijx3fy7xuitltaasy45aom/$_library_ipfs.js.json-1.0.0+release-210512344.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/library/sjcl.js-build\": {\n            \"title\": \"$:/library/sjcl.js-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/library/sjcl\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/library/sjcl.js\",\n            \"version\": \"1.0.8+release-210512344\",\n            \"sourceSize\": \"25607\",\n            \"sourceExtension\": \"js\",\n            \"sourceFilename\": \"$_library_sjcl.js\",\n            \"sourceUri\": \"ipfs://bafybeiabrptlz4n6bdxnohidtqpchn5s62m4zqb76nnszkd37pybkn3dma/$_library_sjcl.js-1.0.8+release-210512344.js\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeiabrptlz4n6bdxnohidtqpchn5s62m4zqb76nnszkd37pybkn3dma/$_library_sjcl.js-1.0.8+release-210512344.js\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/library/sjcl.js.json-build\": {\n            \"title\": \"$:/library/sjcl.js.json-build\",\n            \"tags\": \"$:/ipfs/core $:/core $:/library/sjcl\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"build\": \"210512344\",\n            \"name\": \"$:/library/sjcl.js.json\",\n            \"version\": \"1.0.8+release-210512344\",\n            \"sourceSize\": \"26401\",\n            \"sourceExtension\": \"json\",\n            \"sourceFilename\": \"$_library_sjcl.js.json\",\n            \"sourceUri\": \"ipfs://bafybeihyse5zkqmiha2ujfow7rkjqvs3xc2fyindrrb4v6ex3itndttqhu/$_library_sjcl.js.json-1.0.8+release-210512344.json\",\n            \"altSourceUri\": \"https://bluelight.link/ipfs/bafybeihyse5zkqmiha2ujfow7rkjqvs3xc2fyindrrb4v6ex3itndttqhu/$_library_sjcl.js.json-1.0.8+release-210512344.json\",\n            \"text\": \"<$ipfslink value={{!!sourceUri}}>{{!!name}}-{{!!version}}</$ipfslink>\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Caption\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"mobile console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Hint\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Load/Show/Hide Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Hide\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Hide\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Hide Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Load\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Load\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Load Mobile Console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Show\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Show\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Show Mobile Console\"\n        },\n        \"$:/language/Buttons/Encryption/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set or clear a password or a public key for saving this wiki\"\n        },\n        \"$:/language/Buttons/Encryption/ClearPassword/Caption\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearPassword/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"clear password or public key\"\n        },\n        \"$:/language/Buttons/Encryption/ClearPassword/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearPassword/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Clear the password\"\n        },\n        \"$:/language/Buttons/Encryption/ClearEncryptionPublicKey/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/ClearEncryptionPublicKey/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Clear the public encryption key\"\n        },\n        \"$:/language/Buttons/Encryption/SetPassword/Caption\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetPassword/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"set password or public key\"\n        },\n        \"$:/language/Buttons/Encryption/SetPassword/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetPassword/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set a password for saving this wiki with Standford encryption\"\n        },\n        \"$:/language/Buttons/Encryption/SetEncryptionPublicKey/Hint\": {\n            \"title\": \"$:/language/Buttons/Encryption/SetEncryptionPublicKey/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Set a public encryption key for saving this wiki with Ethereum encryption\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Manager\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open ENS Domain Manager\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Domain\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open ENS Domain\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin this wiki to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin tiddler resources to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin tiddler resources from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin this wiki from IPFS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"fetch from IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Fetch IPNS cid\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"generate IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Generate IPNS cid\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/To/Ens/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/To/Ens/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to ENS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/To/Ens/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/To/Ens/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish IPNS key to ENS\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"remove\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Remove IPNS key and IPNS cid\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"rename\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Rename IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open IPNS\"\n        },\n        \"$:/language/Buttons/Tiddler/Refresh/Caption\": {\n            \"title\": \"$:/language/Buttons/Tiddler/Refresh/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"refresh\"\n        },\n        \"$:/language/Buttons/Tiddler/Refresh/Hint\": {\n            \"title\": \"$:/language/Buttons/Tiddler/Refresh/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Perform a full refresh of the tiddler\"\n        },\n        \"$:/language/ControlPanel/Appearance/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Appearance/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Ways to customise the appearance of your <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/ControlPanel/Basics/Version/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Basics/Version/Prompt\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>~TiddlyWiki</b>:\"\n        },\n        \"$:/language/ControlPanel/Editor/Body/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Editor/Body/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Editor\"\n        },\n        \"$:/language/ControlPanel/Editor/Fields/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Editor/Fields/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Fields\"\n        },\n        \"$:/language/ControlPanel/Info/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Info/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Information about this <b>~TiddlyWiki</b>\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Build/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Build/Prompt\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>IPFS</b>:\"\n        },\n        \"$:/language/ControlPanel/Saving/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Saving/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Settings used for saving the entire <b>~TiddlyWiki</b> as a single file via a saver module.\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Saver\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings are only used when saving to IPFS.\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Verbose\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Verbose\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Saver Verbose\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Url\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Url\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Server URL\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/ApiUrl\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/ApiUrl\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"API\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/GatewayUrl\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/GatewayUrl\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Ens\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Ens\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/EnsDomain\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/EnsDomain\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS domain\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Ipns\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Ipns\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/IpnsKey\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/IpnsKey\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS key\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/IpnsCid\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/IpnsCid\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS cid\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Resolved\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Resolved\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Resolved\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Global\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Global\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Global\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Verbose/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Verbose/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Verbose\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/IPNS/Resolve/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/IPNS/Resolve/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Resolve IPNS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/ETH/Resolve/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/ETH/Resolve/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Resolve ETH\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Directory/Wrapped/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Directory/Wrapped/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Wrapped Directory\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Pin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Pin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin Current\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Unpin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Unpin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin Previous\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Wait/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Wait/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Wait\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Policy\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Policy\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Relative URL Policy\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Policy/Origin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Policy/Origin/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Origin\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Policy/Gateway/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Policy/Gateway/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Protocol\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Protocol\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Protocol\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ens/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ens/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ipfs/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ipfs/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ipns/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Protocol/Ipns/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Export\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Export\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Export/Static/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Export/Static/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Static\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Export/Json/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Export/Json/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"JSON\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Export/Tid/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Export/Tid/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"TID\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Provider\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Provider\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Provider\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Provider/Default/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Provider/Default/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Default\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Provider/Window/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Provider/Window/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Companion\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Saver/Provider/HTTP/Description\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Saver/Provider/HTTP/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"HTTP Client\"\n        },\n        \"$:/language/ControlPanel/Settings/Compression/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Compression/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Compression\"\n        },\n        \"$:/language/ControlPanel/Settings/Compression/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Compression/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Content Compression\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Encryption\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Standford/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Standford/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Standford encryption\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Ethereum/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Ethereum/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Use Ethereum public key\"\n        },\n        \"$:/language/ControlPanel/Settings/Encryption/Signature/Description\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Encryption/Signature/Description\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Sign Ethereum encrypted content\"\n        },\n        \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Preferred Saver\"\n        },\n        \"$:/language/ControlPanel/Settings/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings let you customise the behaviour of <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/EditTemplate/Body/External/Hint\": {\n            \"title\": \"$:/language/EditTemplate/Body/External/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"This tiddler shows content stored outside of the main ~TiddlyWiki file.<br/>You can edit the tags and fields but cannot directly edit the content itself\"\n        },\n        \"$:/language/Export/Exported/Hint\": {\n            \"title\": \"$:/language/Export/Exported/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"The following tiddlers were exported:\"\n        },\n        \"$:/language/Export/Listing/Cancel/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Cancel/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Cancel\"\n        },\n        \"$:/language/Export/Listing/Hint\": {\n            \"title\": \"$:/language/Export/Listing/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These tiddlers are ready to be exported:\"\n        },\n        \"$:/language/Export/Listing/Export/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Export/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export All\"\n        },\n        \"$:/language/Export/Listing/Title/Caption\": {\n            \"title\": \"$:/language/Export/Listing/Title/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Title\"\n        },\n        \"$:/language/Import/Deleted/Hint\": {\n            \"title\": \"$:/language/Import/Deleted/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"The following tiddlers were deleted:\"\n        },\n        \"$:/language/Import/Listing/Hint\": {\n            \"title\": \"$:/language/Import/Listing/Hint\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These tiddlers are ready to be imported:\"\n        },\n        \"$:/language/Import/Listing/ImportAll/Caption\": {\n            \"title\": \"$:/language/Import/Listing/ImportAll/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Import\"\n        },\n        \"$:/language/Import/Listing/DeleteAll/Caption\": {\n            \"title\": \"$:/language/Import/Listing/DeleteAll/Caption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Delete\"\n        },\n        \"$:/language/NetworkError/Fetch\": {\n            \"title\": \"$:/language/NetworkError/Fetch\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Network Error while loading...\"\n        },\n        \"$:/language/LazyLoadingWarning\": {\n            \"title\": \"$:/language/LazyLoadingWarning\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<p>Trying to load external Tiddler content...</p>\"\n        },\n        \"$:/language/Encryption/ConfirmClearEncryptionPublicKey\": {\n            \"title\": \"$:/language/Encryption/ConfirmClearEncryptionPublicKey\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Do you wish to clear the encryption public key? This will remove the encryption applied when saving this wiki.\"\n        },\n        \"$:/ipfs/library/eruda\": {\n            \"title\": \"$:/ipfs/library/eruda\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/liriliri/eruda/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/liriliri/eruda\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/eruda@2.4.1/eruda.min.js\",\n            \"_source_sri\": \"sha384-nc47C28fBcDZCcelSM4kJI1x5Th9e2tkG9AdZK/7sJcbkRNdd184sr51K0dW+FIK\"\n        },\n        \"$:/ipfs/library/eth-sig-util\": {\n            \"title\": \"$:/ipfs/library/eth-sig-util\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/xmaysonnave/eth-sig-util/master/LICENSE\",\n            \"_project_uri\": \"https://github.com/xmaysonnave/eth-sig-util\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/gh/xmaysonnave/eth-sig-util@3.0.2/eth-sig-util.umd.min.js\",\n            \"_source_sri\": \"sha384-KPw7aDyLzgZUSvyhLPirerXfcDl5Hq55j21FNjhwxCYCZWga3pBRynL/cPs5phFN\"\n        },\n        \"$:/ipfs/library/ethers\": {\n            \"title\": \"$:/ipfs/library/ethers\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ethers-io/ethers.js/master/LICENSE.md\",\n            \"_project_uri\": \"https://github.com/ethers-io/ethers.js/\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/ethers@5.1.4/dist/ethers.umd.min.js\",\n            \"_source_sri\": \"sha384-cmAXnxAhPwGDIPqAfcx7VHUxNhX15X9BrUTRmwEOHYpD7K4xjaCIQ68HJUY2+gEV\"\n        },\n        \"$:/ipfs/library/ipfs-http-client\": {\n            \"title\": \"$:/ipfs/library/ipfs-http-client\",\n            \"tags\": \"$:/ipfs/core\",\n            \"_license_uri\": \"https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-http-client/LICENSE-MIT\",\n            \"_project_uri\": \"https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs-http-client\",\n            \"_source_uri\": \"https://cdn.jsdelivr.net/npm/ipfs-http-client@50.0.0/dist/index.min.js\",\n            \"_source_sri\": \"sha384-xDGEptsXfljiftRc042cHgj3KEdFDa0+CjSYUrlZyxaf8XBItaI002p22TP58pt7\"\n        },\n        \"$:/library/ipfs/bundle\": {\n            \"title\": \"$:/library/ipfs/bundle\",\n            \"tags\": \"$:/library/ipfs\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n// Ipfs Library modules\\n{{{ [is[system]type[application/javascript]library-ipfs[yes]] ||$:/core/templates/plain-text-tiddler}}}\\n\"\n        },\n        \"$:/core/modules/commands/clearkeys.js\": {\n            \"title\": \"$:/core/modules/commands/clearkeys.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/clearkeys.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nClear encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'clearkeys',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    $tw.crypto.setEncryptionKey(null, null)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/compress.js\": {\n            \"title\": \"$:/core/modules/commands/compress.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/compress.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSet compression state\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'compress',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    var compress = false\\n    if (this.params.length > 0) {\\n      compress = this.params[0] === 'yes'\\n    }\\n    $tw.compress.setCompressState(compress)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/encryptionkeys.js\": {\n            \"title\": \"$:/core/modules/commands/encryptionkeys.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/encryptionkeys.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'encryptionkeys',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing encryption public key'\\n    }\\n    if (this.params.length < 2) {\\n      return 'Missing private key'\\n    }\\n    $tw.crypto.setEncryptionKey(this.params[0], this.params[1])\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/encryptionpublickey.js\": {\n            \"title\": \"$:/core/modules/commands/encryptionpublickey.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/encryptionpublickey.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'encryptionpublickey',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing encryption public key'\\n    }\\n    $tw.crypto.setEncryptionKey(this.params[0], null)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/ipfsmodules.js\": {\n            \"title\": \"$:/core/modules/commands/ipfsmodules.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/ipfsmodules.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'ipfsmodules',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    var ipfsmodules = false\\n    if (this.params.length > 0) {\\n      ipfsmodules = this.params[0] === 'yes'\\n    }\\n    $tw.modulesState.setModulesState(ipfsmodules)\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/core/modules/commands/privatekey.js\": {\n            \"title\": \"$:/core/modules/commands/privatekey.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/commands/privatekey.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: command\\n\\nSave encryption public key for crypto operations\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.info = {\\n    name: 'privatekey',\\n    synchronous: true,\\n  }\\n\\n  var Command = function (params, commander, callback) {\\n    this.params = params\\n    this.commander = commander\\n    this.callback = callback\\n  }\\n\\n  Command.prototype.execute = function () {\\n    if (this.params.length < 1) {\\n      return 'Missing private key'\\n    }\\n    $tw.crypto.setEncryptionKey(null, this.params[0])\\n    return null\\n  }\\n\\n  exports.Command = Command\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"command\"\n        },\n        \"$:/plugins/ipfs/ipfs-deserializer.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-deserializer.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-deserializer.js\\ntags: $:/ipfs/core\\ntype: application/javascript\\nmodule-type: tiddlerdeserializer\\n\\nFunctions to deserialise tiddlers from a block of text\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /**\\n   * Utility function to parse an old-style tiddler DIV in a *.tid file. It looks like this:\\n   *\\n   * <div title=\\\"Title\\\" creator=\\\"JoeBloggs\\\" modifier=\\\"JoeBloggs\\\" created=\\\"201102111106\\\" modified=\\\"201102111310\\\" tags=\\\"myTag [[my long tag]]\\\">\\n   *   <pre>The text of the tiddler (without the expected HTML encoding).</pre>\\n   * </div>\\n   *\\n   * Note that the field attributes are HTML encoded, but that the body of the <PRE> tag is not encoded.\\n   *\\n   * When these tiddler DIVs are encountered within a TiddlyWiki HTML file then the body is encoded in the usual way.\\n   */\\n  var parseTiddlerDiv = function (text /* [,fields] */) {\\n    // Slot together the default results\\n    var result = {}\\n    if (arguments.length > 1) {\\n      for (var f = 1; f < arguments.length; f++) {\\n        var fields = arguments[f]\\n        for (var t in fields) {\\n          result[t] = fields[t]\\n        }\\n      }\\n    }\\n    // Parse the DIV body\\n    var startRegExp = /^\\\\s*<div\\\\s+([^>]*)>(\\\\s*<pre>)?/gi\\n    var endRegExp\\n    var match = startRegExp.exec(text)\\n    if (match) {\\n      // Old-style DIVs don't have the <pre> tag\\n      if (match[2]) {\\n        endRegExp = /<\\\\/pre>\\\\s*<\\\\/div>\\\\s*$/gi\\n      } else {\\n        endRegExp = /<\\\\/div>\\\\s*$/gi\\n      }\\n      var endMatch = endRegExp.exec(text)\\n      if (endMatch) {\\n        // Extract the text\\n        result.text = text.substring(match.index + match[0].length, endMatch.index)\\n        // Process the attributes\\n        var attrRegExp = /\\\\s*([^=\\\\s]+)\\\\s*=\\\\s*(?:\\\"([^\\\"]*)\\\"|'([^']*)')/gi\\n        var attrMatch\\n        do {\\n          attrMatch = attrRegExp.exec(match[1])\\n          if (attrMatch) {\\n            var name = attrMatch[1]\\n            var value = attrMatch[2] !== undefined ? attrMatch[2] : attrMatch[3]\\n            result[name] = value\\n          }\\n        } while (attrMatch)\\n        return result\\n      }\\n    }\\n    return undefined\\n  }\\n\\n  exports['application/x-tiddler-html-div'] = function (text, fields) {\\n    return [parseTiddlerDiv(text, fields)]\\n  }\\n\\n  exports['application/json'] = function (text, fields) {\\n    const inflated = $tw.utils.inflate(text)\\n    if (inflated !== null) {\\n      return inflated\\n    }\\n    var incoming\\n    var results = []\\n    try {\\n      incoming = JSON.parse(text)\\n    } catch (e) {\\n      incoming = [\\n        {\\n          title: 'JSON error: ' + e,\\n          text: '',\\n        },\\n      ]\\n    }\\n    if (!$tw.utils.isArray(incoming)) {\\n      incoming = [incoming]\\n    }\\n    for (var t = 0; t < incoming.length; t++) {\\n      var incomingFields = incoming[t]\\n      var fields = {}\\n      for (var f in incomingFields) {\\n        if (typeof incomingFields[f] === 'string') {\\n          fields[f] = incomingFields[f]\\n        }\\n      }\\n      results.push(fields)\\n    }\\n    return results\\n  }\\n\\n  /**\\n   * Parse an HTML file into tiddlers. There are three possibilities:\\n   * A TiddlyWiki classic HTML file containing `text/x-tiddlywiki` tiddlers\\n   * A TiddlyWiki5 HTML file containing `text/vnd.tiddlywiki` tiddlers\\n   * An ordinary HTML file\\n   */\\n  exports['text/html'] = function (text, fields) {\\n    // Check if we've got a store area\\n    var storeAreaMarkerRegExp = /<div id=[\\\"']?storeArea['\\\"]?( style=[\\\"']?display:none;[\\\"']?)?>/gi\\n    var match = storeAreaMarkerRegExp.exec(text)\\n    if (match) {\\n      // If so, it's either a classic TiddlyWiki file or an unencrypted TW5 file\\n      // First read the normal tiddlers\\n      var results = deserializeTiddlyWikiFile(text, storeAreaMarkerRegExp.lastIndex, !!match[1], fields)\\n      // Then any system tiddlers\\n      var systemAreaMarkerRegExp = /<div id=[\\\"']?systemArea['\\\"]?( style=[\\\"']?display:none;[\\\"']?)?>/gi\\n      var sysMatch = systemAreaMarkerRegExp.exec(text)\\n      if (sysMatch) {\\n        results.push.apply(results, deserializeTiddlyWikiFile(text, systemAreaMarkerRegExp.lastIndex, !!sysMatch[1], fields))\\n      }\\n      return results\\n    } else {\\n      // Check whether this is a compressed TiddlyWiki file\\n      var compressedStoreArea = $tw.utils.extractCompressedStoreArea(text)\\n      if (compressedStoreArea) {\\n        return $tw.utils.inflate(compressedStoreArea)\\n      } else {\\n        // Check whether this is an encrypted TiddlyWiki file\\n        var encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(text)\\n        if (encryptedStoreArea) {\\n          // If so, attempt to decrypt it using the current password\\n          return $tw.utils.decryptStoreArea(encryptedStoreArea)\\n        } else {\\n          // It's not a TiddlyWiki so we'll return the entire HTML file as a tiddler\\n          return deserializeHtmlFile(text, fields)\\n        }\\n      }\\n    }\\n  }\\n\\n  function deserializeHtmlFile (text, fields) {\\n    var result = {}\\n    $tw.utils.each(fields, function (value, name) {\\n      result[name] = value\\n    })\\n    result.text = text\\n    result.type = 'text/html'\\n    return [result]\\n  }\\n\\n  function deserializeTiddlyWikiFile (text, storeAreaEnd, isTiddlyWiki5, fields) {\\n    var results = []\\n    var endOfDivRegExp = /(<\\\\/div>\\\\s*)/gi\\n    var startPos = storeAreaEnd\\n    var defaultType = isTiddlyWiki5 ? undefined : 'text/x-tiddlywiki'\\n    endOfDivRegExp.lastIndex = startPos\\n    var match = endOfDivRegExp.exec(text)\\n    while (match) {\\n      var endPos = endOfDivRegExp.lastIndex\\n      var tiddlerFields = parseTiddlerDiv(text.substring(startPos, endPos), fields, { type: defaultType })\\n      if (!tiddlerFields) {\\n        break\\n      }\\n      $tw.utils.each(tiddlerFields, function (value, name) {\\n        if (typeof value === 'string') {\\n          tiddlerFields[name] = $tw.utils.htmlDecode(value)\\n        }\\n      })\\n      if (tiddlerFields.text !== null) {\\n        results.push(tiddlerFields)\\n      }\\n      startPos = endPos\\n      match = endOfDivRegExp.exec(text)\\n    }\\n    return results\\n  }\\n})()\\n\",\n            \"tags\": \"$:/ipfs/core\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"tiddlerdeserializer\"\n        },\n        \"$:/plugins/ipfs/filenamify.js\": {\n            \"title\": \"$:/plugins/ipfs/filenamify.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/filenamify.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: filteroperator\\n\\n\\n\\\\*/\\n;(function () {\\n  'use strict'\\n\\n  /**\\n   * Export our filter functions\\n   */\\n  exports.filenamify = function (source, operator, options) {\\n    var results = []\\n    var filenamify = $tw.node ? globalThis.filenamify || require('filenamify') : $tw.ipfs.filenamify\\n    source(function (tiddler, title) {\\n      results.push(filenamify(title, { replacement: '_' }))\\n    })\\n    return results\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"filteroperator\"\n        },\n        \"$:/core/modules/filters/savers.js\": {\n            \"title\": \"$:/core/modules/filters/savers.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/filters/savers.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: filteroperator\\n\\nThis Filter operator return savers title\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*\\n  Export our filter function\\n  */\\n  exports.savers = function (source, operator, options) {\\n    var results = []\\n    for (var i in $tw.saverHandler.savers) {\\n      results.push($tw.saverHandler.savers[i].title)\\n    }\\n    return results\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"filteroperator\"\n        },\n        \"$:/plugins/ipfs/ens-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Action\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const ipfsKeyword = 'ipfs'\\n  const ipnsKeyword = 'ipns'\\n\\n  const name = 'ens-action'\\n\\n  var EnsAction = function () {\\n    this.once = false\\n  }\\n\\n  EnsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    const self = this\\n    $tw.rootWidget.addEventListener('tm-ens-manager-open', function (event) {\\n      return self.handleOpenEnsManager(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ens-resolve-and-open', async function (event) {\\n      return await self.handleEnsResolveAndOpen(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ens-publish', async function (event) {\\n      return await self.handlePublishToEns(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-publish-to-ens', async function (event) {\\n      return await self.handlePublishIpnsToEns(event)\\n    })\\n    // Init once\\n    this.once = true\\n  }\\n\\n  EnsAction.prototype.handleOpenEnsManager = function (event) {\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      window.open('https://app.ens.domains', '_blank', 'noopener,noreferrer')\\n    } else {\\n      window.open(`https://app.ens.domains/name/${ensDomain}`, '_blank', 'noopener,noreferrer')\\n    }\\n    return true\\n  }\\n\\n  EnsAction.prototype.handleEnsResolveAndOpen = async function (event) {\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      var { resolvedUrl } = await $tw.ipfs.resolveUrl(ensDomain, $tw.utils.getIpnsResolve(), false, $tw.utils.getEthLinkResolve())\\n      if (resolvedUrl !== null) {\\n        window.open(resolvedUrl.href, '_blank', 'noopener,noreferrer')\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    return true\\n  }\\n\\n  EnsAction.prototype.handlePublishToEns = async function (event) {\\n    var ipfsCid = null\\n    var ipnsCid = null\\n    const wiki = $tw.ipfs.getDocumentUrl()\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      var { ipfsCid, ipnsCid } = await $tw.ipfs.resolveUrl(wiki, false, false, false)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    if (ipfsCid == null && ipnsCid == null) {\\n      $tw.utils.alert(name, 'Undefined IPFS identifier...')\\n      return false\\n    }\\n    if (ipfsCid !== null) {\\n      return await this.publishToEns(ensDomain, ipfsKeyword, ipfsCid)\\n    }\\n    return await this.publishToEns(ensDomain, ipnsKeyword, ipnsCid)\\n  }\\n\\n  EnsAction.prototype.handlePublishIpnsToEns = async function (event) {\\n    var ipnsCid = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    var ensDomain = $tw.utils.getIpfsEnsDomain()\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, 'Undefined ENS domain...')\\n      return false\\n    }\\n    try {\\n      var { ipnsCid } = await $tw.ipfs.resolveUrl(`/${ipnsKeyword}/${ipnsKey}`, false, false, false)\\n      if (ipnsCid == null) {\\n        $tw.utils.alert(name, 'Undefined IPFS identifier...')\\n        return false\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    return await this.publishToEns(ensDomain, ipnsKeyword, ipnsCid)\\n  }\\n\\n  EnsAction.prototype.publishToEns = async function (ensDomain, protocol, identifier) {\\n    var account = null\\n    var ipfsCid = null\\n    var ipnsCid = null\\n    var resolvedUrl = null\\n    var web3 = null\\n    try {\\n      var { account, web3 } = await $tw.ipfs.getEnabledWeb3Provider()\\n      var { ipfsCid, ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(ensDomain, $tw.utils.getIpnsResolve(), false, true, null, web3)\\n      if (protocol === ipfsKeyword && identifier === ipfsCid) {\\n        $tw.utils.alert(name, 'The current resolved ENS domain content is up to date...')\\n        return false\\n      }\\n      if (protocol === ipnsKeyword && identifier === ipnsCid) {\\n        $tw.utils.alert(name, 'The current resolved ENS domain content is up to date...')\\n        return false\\n      }\\n      const isOwner = await $tw.ipfs.isEnsOwner(ensDomain, web3, account)\\n      if (isOwner === false) {\\n        const err = new Error('Unauthorized Account...')\\n        err.name = 'OwnerError'\\n        throw err\\n      }\\n    } catch (error) {\\n      if (error.name !== 'OwnerError') {\\n        $tw.ipfs.getLogger().error(error)\\n      }\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    $tw.ipfs\\n      .addToUnpin(resolvedUrl !== null ? resolvedUrl.pathname : null)\\n      .then(unpin => {\\n        if (unpin) {\\n          $tw.ipfs.removeFromPinUnpin(resolvedUrl.pathname)\\n        }\\n        $tw.ipfs\\n          .setContentHash(ensDomain, `/${protocol}/${identifier}`, web3, account)\\n          .then(data => {\\n            $tw.utils.alert(name, 'Published to ENS...')\\n          })\\n          .catch(error => {\\n            if (error.name !== 'OwnerError' && error.name !== 'RejectedUserRequest' && error.name !== 'UnauthorizedUserAccount') {\\n              $tw.ipfs.getLogger().error(error)\\n            }\\n            $tw.utils.alert(name, error.message)\\n            $tw.ipfs.addToPin(resolvedUrl !== null ? resolvedUrl.pathname : null)\\n          })\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    return true\\n  }\\n\\n  exports.EnsAction = EnsAction\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ens-wrapper.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-wrapper.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-wrapper.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Wrapper\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n  const name = 'ens-wrapper'\\n\\n  var EnsWrapper = function (ensLibrary) {\\n    this.ensLibrary = ensLibrary\\n  }\\n\\n  EnsWrapper.prototype.getContentHash = async function (domain, web3) {\\n    try {\\n      var { content, protocol } = await this.ensLibrary.getContentHash(domain, web3)\\n      if (content !== null && protocol !== null) {\\n        // Success\\n        return {\\n          content: content,\\n          protocol: protocol,\\n        }\\n      }\\n      $tw.utils.alert(name, 'Unassigned ENS domain content...')\\n      return {\\n        content: null,\\n        protocol: null,\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      throw new Error('Unable to fetch ENS domain content...')\\n    }\\n  }\\n\\n  EnsWrapper.prototype.setContentHash = async function (domain, identifier, web3, account) {\\n    try {\\n      await this.ensLibrary.setContentHash(domain, identifier, web3, account)\\n    } catch (error) {\\n      if (error.name === 'OwnerError' || error.name === 'RejectedUserRequest' || error.name === 'UnauthorizedUserAccount') {\\n        throw error\\n      }\\n      $tw.ipfs.getLogger().error(error)\\n      throw new Error('Unable to set ENS domain content...')\\n    }\\n  }\\n\\n  exports.EnsWrapper = EnsWrapper\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Action\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const ipnsKeyword = 'ipns'\\n\\n  const name = 'ipfs-action'\\n\\n  var IpfsAction = function () {\\n    this.once = false\\n    this.console = false\\n    this.ipnsKey = $tw.utils.getIpnsKey()\\n    this.ipnsCid = $tw.utils.getIpnsCid()\\n  }\\n\\n  IpfsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    const self = this\\n    // Widget\\n    $tw.rootWidget.addEventListener('tm-ipfs-export', async function (event) {\\n      return await self.handleExportToIpfs(event, false)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-export-content', async function (event) {\\n      return await self.handleExportToIpfs(event, true)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-fetch', async function (event) {\\n      return await self.handleFetchIpnsCid(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-generate', async function (event) {\\n      return await self.handleGenerateIpnsCid(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-console-mobile', async function (event) {\\n      return await self.handleMobileConsole(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-export-attachment', async function (event) {\\n      return await self.handleExportAttachmentToIpfs(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-publish', async function (event) {\\n      return await self.handlePublishToIpns(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-remove', async function (event) {\\n      return await self.handleRemoveIpnsKey(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-rename', async function (event) {\\n      return await self.handleRenameIpnsKey(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipns-resolve-and-open', async function (event) {\\n      return await self.handleResolveIpnsKeyAndOpen(event)\\n    })\\n    // Init once\\n    this.once = true\\n  }\\n\\n  IpfsAction.prototype.handleExportToIpfs = async function (event, child) {\\n    var tiddler = $tw.wiki.getTiddler(event.tiddlerTitle)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    // Do not process if _export_uri is set\\n    const exportUri =\\n      tiddler.fields._export_uri !== undefined && tiddler.fields._export_uri !== null && tiddler.fields._export_uri.trim() !== '' ? tiddler.fields._export_uri.trim() : null\\n    const { content, extension } = await $tw.utils.exportTiddler(tiddler, child)\\n    if (content === undefined || content == null) {\\n      return false\\n    }\\n    var filename = '/'\\n    var incomingName = ''\\n    if ($tw.utils.getWrappedDirectory()) {\\n      try {\\n        var path = null\\n        if (exportUri !== null) {\\n          const { ipnsCid, normalizedUrl } = await $tw.ipfs.resolveUrl(exportUri, false, false, true)\\n          if (ipnsCid !== null) {\\n            const pathname = normalizedUrl.pathname.slice(`/ipns/${ipnsCid}`.length)\\n            if (pathname !== undefined && pathname !== null && pathname.trim() !== '') {\\n              path = pathname.substring(0, pathname.lastIndexOf('/'))\\n              if (path !== undefined && path !== null && path.trim() !== '') {\\n                const incoming = pathname.split('/').pop()\\n                if (incoming !== undefined && incoming !== null && incoming.trim() !== '') {\\n                  incomingName = decodeURI(incoming)\\n                  filename = `${path}/${incomingName}`\\n                }\\n              }\\n            }\\n          }\\n        }\\n        if (filename === '/') {\\n          const url = $tw.ipfs.getUrl(event.tiddlerTitle, $tw.ipfs.getIpfsBaseUrl())\\n          if (path === undefined || path == null || path.trim() === '') {\\n            path = url.pathname.substring(0, url.pathname.lastIndexOf('/'))\\n          }\\n          if (path !== undefined && path !== null && path.trim() !== '') {\\n            const incoming = url.pathname.split('/').pop()\\n            if (incoming !== undefined && incoming !== null && incoming.trim() !== '') {\\n              incomingName = decodeURI(incoming)\\n              filename = `${path}/${incomingName}`\\n            }\\n          }\\n        }\\n      } catch (error) {\\n        // Ignore\\n      }\\n      if (filename === '/') {\\n        incomingName = $tw.ipfs.filenamify(event.tiddlerTitle)\\n        filename = `${filename}${incomingName}`\\n      }\\n      if (filename.endsWith(extension) === false) {\\n        incomingName = `${incomingName}${extension}`\\n        filename = `${filename}${extension}`\\n      }\\n    }\\n    if (child) {\\n      $tw.ipfs.getLogger().info(`Export transcluded content: ${content.length} bytes`)\\n    } else {\\n      $tw.ipfs.getLogger().info(`Export content: ${content.length} bytes`)\\n    }\\n    // Beware async...\\n    $tw.utils.exportToIpfs(tiddler, content, [], '_export_uri', filename, incomingName)\\n  }\\n\\n  IpfsAction.prototype.handleExportAttachmentToIpfs = async function (event) {\\n    const title = event.tiddlerTitle\\n    var tiddler = $tw.wiki.getTiddler(title)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    // Do not process if _canonical_uri is set and the text field is empty\\n    const canonicalUri = tiddler.fields._canonical_uri\\n    if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '') {\\n      $tw.utils.alert(name, 'Attachment is already exported...')\\n      return false\\n    }\\n    if (tiddler.fields.text === undefined || tiddler.fields.text == null || tiddler.fields.text === '') {\\n      $tw.utils.alert(name, 'Empty attachment...')\\n      return false\\n    }\\n    const { type, info } = $tw.utils.getContentType(tiddler)\\n    try {\\n      const content = await $tw.ipfs.processContent(tiddler, tiddler.fields.text, info.encoding, type)\\n      var filename = '/'\\n      var incomingName = ''\\n      if ($tw.utils.getWrappedDirectory()) {\\n        try {\\n          const url = $tw.ipfs.getUrl(title, $tw.ipfs.getIpfsBaseUrl())\\n          const path = url.pathname.substring(0, url.pathname.lastIndexOf('/'))\\n          if (path !== undefined && path !== null && path.trim() !== '') {\\n            const incoming = url.pathname.split('/').pop()\\n            if (incoming !== undefined && incoming !== null && incoming.trim() !== '') {\\n              incomingName = decodeURI(incoming)\\n              filename = `${path}/${incomingName}`\\n            }\\n          }\\n        } catch (error) {\\n          // Ignore\\n        }\\n        if (filename === '/') {\\n          incomingName = $tw.ipfs.filenamify(tiddler.fields.title)\\n          filename = `${filename}${incomingName}`\\n        }\\n        if (filename.endsWith(info.extension) === false) {\\n          incomingName = `${incomingName}${info.extension}`\\n          filename = `${filename}${info.extension}`\\n        }\\n      }\\n      const fields = [{ key: 'text', value: '' }]\\n      // Beware async...\\n      $tw.utils.exportToIpfs(tiddler, content, fields, '_canonical_uri', filename, incomingName)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleRenameIpnsKey = async function (event) {\\n    var ipnsCid = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    if (this.ipnsKey == null || this.ipnsKey === ipnsKey) {\\n      $tw.utils.alert(name, 'Nothing to rename....')\\n      return false\\n    }\\n    try {\\n      var { ipnsCid, ipnsKey } = await $tw.ipfs.renameIpnsKey(this.ipnsKey, ipnsKey)\\n      $tw.utils.alert(name, `Renamed IPNS key: '${ipnsKey}'...`)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined && this.ipnsCid !== ipnsCid) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsCid }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsKey }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsCid = ipnsCid\\n    this.ipnsKey = ipnsKey\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleGenerateIpnsCid = async function (event) {\\n    var ipnsCid = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    try {\\n      var ipnsCid = await $tw.ipfs.generateIpnsCid(ipnsKey)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined && this.ipnsCid !== ipnsCid) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsCid }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsCid = ipnsCid\\n    this.ipnsKey = ipnsKey\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleRemoveIpnsKey = async function (event) {\\n    var resolvedUrl = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    try {\\n      var { resolvedUrl } = await $tw.ipfs.resolveUrl(`/ipns/${ipnsKey}`, $tw.utils.getIpnsResolve(), false, true)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    // Async\\n    $tw.ipfs\\n      .addToUnpin(resolvedUrl !== null ? resolvedUrl.pathname : null)\\n      .then(unpin => {\\n        $tw.ipfs\\n          .removeIpnsKey(ipnsKey)\\n          .then(data => {\\n            $tw.utils.alert(name, `Removed IPNS key: '${ipnsKey}'...`)\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(name, error.message)\\n          })\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: '' }],\\n      })\\n      $tw.wiki.addTiddler(updatedTiddler)\\n    }\\n    tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: '' }],\\n      })\\n      $tw.wiki.addTiddler(updatedTiddler)\\n    }\\n    this.ipnsCid = null\\n    this.ipnsKey = null\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleFetchIpnsCid = async function (event) {\\n    var ipnsCid = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    try {\\n      var { ipnsCid } = await $tw.ipfs.getIpnsIdentifier(ipnsKey)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined && this.ipnsCid !== ipnsCid) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsCid }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    this.ipnsCid = ipnsCid\\n    this.ipnsKey = ipnsKey\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleResolveIpnsKeyAndOpen = async function (event) {\\n    var ipnsCid = null\\n    var resolvedUrl = null\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    try {\\n      var { ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(`${ipnsKeyword}://${ipnsKey}`, $tw.utils.getIpnsResolve(), false, false)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined && ipnsCid !== null && this.ipnsCid !== ipnsCid) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: ipnsCid }],\\n      })\\n      $tw.wiki.addTiddler(tiddler)\\n    }\\n    if (ipnsCid !== null) {\\n      this.ipnsCid = ipnsCid\\n    }\\n    if (resolvedUrl !== null) {\\n      window.open(resolvedUrl.href, '_blank', 'noopener,noreferrer')\\n    }\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handleMobileConsole = async function (event) {\\n    // Show or Hide\\n    if (typeof window.eruda !== 'undefined') {\\n      if (this.console === false) {\\n        window.eruda.show()\\n        window.eruda.show('console')\\n        this.console = true\\n      } else {\\n        window.eruda.hide()\\n        this.console = false\\n      }\\n      $tw.rootWidget.refresh($tw.utils.getChangedTiddler('$:/core/ui/Buttons/ipfs/console/mobile'))\\n      return true\\n    }\\n    // Load library\\n    try {\\n      if (typeof globalThis.eruda === 'undefined') {\\n        await $tw.ipfs.loadErudaLibrary()\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    const erudaContainer = window.document.createElement('div')\\n    window.document.body.appendChild(erudaContainer)\\n    window.eruda.init({\\n      container: erudaContainer,\\n      tool: ['console'],\\n      useShadowDom: true,\\n      autoScale: true,\\n    })\\n    // Inherit font\\n    erudaContainer.style.fontFamily = 'inherit'\\n    // Preserve user preference if any, default is 80\\n    if (window.eruda.get().config.get('displaySize') === 80) {\\n      window.eruda.get().config.set('displaySize', 40)\\n    }\\n    // Preserve user preference if any, default is 0.95\\n    if (window.eruda.get().config.get('transparency') === 0.95) {\\n      window.eruda.get().config.set('transparency', 1)\\n    }\\n    // Hide Eruda button\\n    if (window.eruda._shadowRoot !== undefined) {\\n      const btn = window.eruda._shadowRoot.querySelector('.eruda-entry-btn')\\n      if (btn !== undefined) {\\n        btn.style.display = 'none'\\n      }\\n    }\\n    // Init Logger\\n    const log = window.log.getLogger('eruda')\\n    if ($tw.utils.getIpfsVerbose()) {\\n      log.setLevel('info', false)\\n    } else {\\n      log.setLevel('warn', false)\\n    }\\n    // Log\\n    log.info('Mobile console has been loaded...')\\n    // Show\\n    window.eruda.show()\\n    window.eruda.show('console')\\n    this.console = true\\n    $tw.rootWidget.refresh($tw.utils.getChangedTiddler('$:/core/ui/Buttons/ipfs/console/mobile'))\\n    return true\\n  }\\n\\n  IpfsAction.prototype.handlePublishToIpns = async function (event) {\\n    var ipnsCid = null\\n    var resolvedurl = null\\n    var wikiCid = null\\n    var wikiIpnsCid = null\\n    const wiki = $tw.ipfs.getDocumentUrl()\\n    var ipnsKey = $tw.utils.getIpnsKey()\\n    if (ipnsKey == null) {\\n      $tw.utils.alert(name, 'Undefined IPNS key....')\\n      return false\\n    }\\n    try {\\n      var { ipfsCid: wikiCid, ipnsCid: wikiIpnsCid } = await $tw.ipfs.resolveUrl(wiki, true, false, true)\\n      var { ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(`${ipnsKeyword}://${ipnsKey}`, $tw.utils.getIpnsResolve(), false, false)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n      return false\\n    }\\n    if (wikiCid == null && wikiIpnsCid == null) {\\n      $tw.utils.alert(name, 'Undefined IPFS identifier...')\\n      return false\\n    }\\n    if (wikiIpnsCid !== null && wikiIpnsCid === ipnsCid) {\\n      $tw.utils.alert(name, 'Default IPNS cid matches current IPNS cid....')\\n      return false\\n    }\\n    $tw.ipfs\\n      .publishIpnsKey(wikiCid, ipnsCid, ipnsKey)\\n      .then(data => {\\n        $tw.utils.alert(name, 'Published IPNS key: ' + ipnsKey)\\n        $tw.ipfs.addToUnpin(resolvedurl !== null ? resolvedUrl.pathname : null)\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    return true\\n  }\\n\\n  exports.IpfsAction = IpfsAction\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-bundle.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-bundle.js\",\n            \"text\": \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}g.IpfsBundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\\\"function\\\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\\\"Cannot find module '\\\"+i+\\\"'\\\");throw a.code=\\\"MODULE_NOT_FOUND\\\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\\\"function\\\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-bundle.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Bundle\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/es.typed-array.uint8-array.js\\\");\\n\\nrequire(\\\"core-js/modules/es.string.replace.js\\\");\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.to-json.js\\\");\\n\\nconst CID = require('cids');\\n\\nconst uint8ArrayFromString = require('uint8arrays/from-string');\\n\\nconst EnsLibrary = require('core/modules/library/ipfs-bundle/ens-library.js').EnsLibrary;\\n\\nconst EthereumLibrary = require('core/modules/library/ipfs-bundle/ethereum-library.js').EthereumLibrary;\\n\\nconst IpfsLibrary = require('core/modules/library/ipfs-bundle/ipfs-library.js').IpfsLibrary;\\n\\nconst IpfsLoader = require('core/modules/library/ipfs-bundle/ipfs-loader.js').IpfsLoader;\\n\\nconst IpfsUrl = require('core/modules/library/ipfs-bundle/ipfs-url.js').IpfsUrl;\\n\\nconst cidInspector = 'https://cid.ipfs.io/#';\\nconst libp2pKey = 'libp2p-key';\\nconst dagPb = 'dag-pb';\\n\\nvar IpfsBundle = function () {\\n  this.once = false;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ipfs-bundle';\\n};\\n\\nIpfsBundle.prototype.getLogger = function () {\\n  if (globalThis.log !== undefined && globalThis.log !== null) {\\n    const loggers = globalThis.log.getLoggers();\\n    var eruda = loggers.eruda;\\n\\n    if (eruda) {\\n      return eruda;\\n    }\\n\\n    var ipfs = loggers.ipfs;\\n\\n    if (ipfs) {\\n      return ipfs;\\n    }\\n  }\\n\\n  return console;\\n};\\n\\nIpfsBundle.prototype.init = function () {\\n  // Init once\\n  if (this.once) {\\n    return;\\n  }\\n\\n  this.ipfsLoader = new IpfsLoader(this);\\n  this.ethereumLibrary = new EthereumLibrary(this);\\n  this.ethereumLibrary.init();\\n  this.ensLibrary = new EnsLibrary(this);\\n  this.ipfsLibrary = new IpfsLibrary(this);\\n  this.ipfsUrl = new IpfsUrl(this); // Init once\\n\\n  this.once = true;\\n};\\n\\nIpfsBundle.prototype.filenamify = function (name, options) {\\n  return this.ipfsUrl.filenamify(name, options);\\n};\\n\\nIpfsBundle.prototype.getBase = function (base) {\\n  return this.ipfsUrl.getBase(base);\\n};\\n\\nIpfsBundle.prototype.getIpfsBaseUrl = function () {\\n  return this.ipfsUrl.getIpfsBaseUrl();\\n};\\n\\nIpfsBundle.prototype.normalizeUrl = function (value, base) {\\n  return this.ipfsUrl.normalizeUrl(value, base);\\n};\\n\\nIpfsBundle.prototype.getDocumentUrl = function () {\\n  return this.ipfsUrl.getDocumentUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultApiUrl = function () {\\n  return this.ipfsUrl.getIpfsDefaultApiUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultGatewayUrl = function () {\\n  return this.ipfsUrl.getIpfsDefaultGatewayUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultApi = function () {\\n  return this.ipfsUrl.getIpfsDefaultApi();\\n};\\n\\nIpfsBundle.prototype.getIpfsDefaultGateway = function () {\\n  return this.ipfsUrl.getIpfsDefaultGateway();\\n};\\n\\nIpfsBundle.prototype.getIpfsApiUrl = function () {\\n  return this.ipfsUrl.getIpfsApiUrl();\\n};\\n\\nIpfsBundle.prototype.getIpfsGatewayUrl = function () {\\n  return this.ipfsUrl.getIpfsGatewayUrl();\\n};\\n\\nIpfsBundle.prototype.getUrl = function (url, base) {\\n  return this.ipfsUrl.getUrl(url, base);\\n};\\n\\nIpfsBundle.prototype.getENSRegistry = function () {\\n  return this.ensLibrary.getENSRegistry();\\n};\\n\\nIpfsBundle.prototype.getBlockExplorerRegistry = function () {\\n  return this.ethereumLibrary.getBlockExplorerRegistry();\\n};\\n\\nIpfsBundle.prototype.getNetworkRegistry = function () {\\n  return this.ethereumLibrary.getNetworkRegistry();\\n};\\n\\nIpfsBundle.prototype.loadErudaLibrary = async function () {\\n  try {\\n    if (typeof globalThis.eruda === 'undefined') {\\n      await this.ipfsLoader.loadErudaLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.eruda === 'undefined') {\\n    throw new Error('Unavailable Eruda library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadEthSigUtilLibrary = async function () {\\n  try {\\n    if (typeof globalThis.sigUtil === 'undefined') {\\n      await this.ipfsLoader.loadEthSigUtilLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.sigUtil === 'undefined') {\\n    throw new Error('Unavailable eth-sig-util library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadEthersJsLibrary = async function () {\\n  try {\\n    if (typeof globalThis.ethers === 'undefined') {\\n      await this.ipfsLoader.loadEtherJsLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.ethers === 'undefined') {\\n    throw new Error('Unavailable Ethereum library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.loadIpfsHttpLibrary = async function () {\\n  try {\\n    if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n      await this.ipfsLoader.loadIpfsHttpLibrary();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n    throw new Error('Unavailable IPFS HTTP Client library...');\\n  }\\n};\\n\\nIpfsBundle.prototype.getPublicEncryptionKey = async function (provider) {\\n  try {\\n    return await this.ethereumLibrary.getPublicEncryptionKey(provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an Ethereum Public Encryption Key...');\\n  }\\n};\\n\\nIpfsBundle.prototype.personalRecover = async function (message, signature) {\\n  return await this.ethereumLibrary.personalRecover(message, signature);\\n};\\n\\nIpfsBundle.prototype.personalSign = async function (message, provider) {\\n  try {\\n    return await this.ethereumLibrary.personalSign(message, provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to sign content...');\\n  }\\n};\\n\\nIpfsBundle.prototype.decrypt = async function (text, provider) {\\n  try {\\n    return await this.ethereumLibrary.decrypt(text, provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to decrypt content...');\\n  }\\n};\\n\\nIpfsBundle.prototype.getBlockExplorerRegistry = function () {\\n  return this.ethereumLibrary.getBlockExplorerRegistry();\\n};\\n\\nIpfsBundle.prototype.getEnabledWeb3Provider = async function (provider) {\\n  return await this.ethereumLibrary.getEnabledWeb3Provider(provider);\\n};\\n\\nIpfsBundle.prototype.getWeb3Provider = async function (provider) {\\n  return await this.ethereumLibrary.getWeb3Provider(provider);\\n};\\n\\nIpfsBundle.prototype.isEnsOwner = async function (domain, web3, account) {\\n  return await this.ensLibrary.isOwner(domain, web3, account);\\n};\\n/*\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nIpfsBundle.prototype.getEthereumProvider = async function () {\\n  return await this.ethereumLibrary.getEthereumProvider();\\n};\\n\\nIpfsBundle.prototype.getEnabledWeb3Provider = async function () {\\n  var account = null;\\n  var chainId = null;\\n  var web3 = null;\\n  const explorer = this.getBlockExplorerRegistry();\\n  const network = this.getNetworkRegistry();\\n  const provider = await this.getEthereumProvider();\\n\\n  try {\\n    var {\\n      account,\\n      chainId,\\n      web3\\n    } = await this.ethereumLibrary.getEnabledWeb3Provider(provider);\\n  } catch (error) {\\n    if (error.name === 'RejectedUserRequest') {\\n      throw error;\\n    }\\n\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an enabled Ethereum Provider...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`New Enabled Web3 provider:\\nChain: ${network[chainId]}\\nAccount: ${explorer[chainId]}/address/${account}`);\\n  return {\\n    account: account,\\n    chainId: chainId,\\n    provider: provider,\\n    web3: web3\\n  };\\n};\\n\\nIpfsBundle.prototype.getWeb3Provider = async function () {\\n  var chainId = null;\\n  var web3 = null;\\n  const network = this.getNetworkRegistry();\\n  const provider = await this.getEthereumProvider();\\n\\n  try {\\n    var {\\n      web3,\\n      chainId\\n    } = await this.ethereumLibrary.getWeb3Provider(provider);\\n  } catch (error) {\\n    this.getLogger().error(error);\\n    throw new Error('Unable to retrieve an Ethereum Provider...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`New Web3 provider:\\n${network[chainId]}`);\\n  return {\\n    chainId: chainId,\\n    provider: provider,\\n    web3: web3\\n  };\\n};\\n\\nIpfsBundle.prototype.decode = function (b64) {\\n  return Base64Binary.decode(b64);\\n}; // https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer/21797381\\n// https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js\\n\\n/*\\n * Copyright (c) 2011, Daniel Guerrero\\n * All rights reserved.\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n * Redistributions of source code must retain the above copyright\\n * notice, this list of conditions and the following disclaimer.\\n * Redistributions in binary form must reproduce the above copyright\\n * notice, this list of conditions and the following disclaimer in the\\n * documentation and/or other materials provided with the distribution.\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND\\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY\\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n/**\\n * Uses the new array typed in javascript to binary base64 encode/decode\\n * at the moment just decodes a binary base64 encoded\\n * into either an ArrayBuffer (decodeArrayBuffer)\\n * or into an Uint8Array (decode)\\n *\\n * References:\\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer\\n * https://developer.mozilla.org/en/JavaScript_typed_arrays/Uint8Array\\n */\\n\\n\\nvar Base64Binary = {\\n  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\\n\\n  /* will return a  Uint8Array type */\\n  decodeArrayBuffer: function (input) {\\n    var bytes = input.length / 4 * 3;\\n    var ab = new ArrayBuffer(bytes);\\n    this.decode(input, ab);\\n    return ab;\\n  },\\n  removePaddingChars: function (input) {\\n    var lkey = this._keyStr.indexOf(input.charAt(input.length - 1));\\n\\n    if (lkey === 64) {\\n      return input.substring(0, input.length - 1);\\n    }\\n\\n    return input;\\n  },\\n  decode: function (input, ab) {\\n    //get last chars to see if are valid\\n    input = this.removePaddingChars(input);\\n    input = this.removePaddingChars(input);\\n    var bytes = parseInt(input.length / 4 * 3, 10);\\n    var ua;\\n    var chr1, chr2, chr3;\\n    var enc1, enc2, enc3, enc4;\\n    var i = 0;\\n    var j = 0;\\n    if (ab) ua = new Uint8Array(ab);else ua = new Uint8Array(bytes);\\n    /*eslint no-useless-escape:\\\"off\\\"*/\\n\\n    input = input.replace(/[^A-Za-z0-9\\\\+\\\\/\\\\=]/g, '');\\n\\n    for (i = 0; i < bytes; i += 3) {\\n      //get the 3 octects in 4 ascii chars\\n      enc1 = this._keyStr.indexOf(input.charAt(j++));\\n      enc2 = this._keyStr.indexOf(input.charAt(j++));\\n      enc3 = this._keyStr.indexOf(input.charAt(j++));\\n      enc4 = this._keyStr.indexOf(input.charAt(j++));\\n      chr1 = enc1 << 2 | enc2 >> 4;\\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\\n      chr3 = (enc3 & 3) << 6 | enc4;\\n      ua[i] = chr1;\\n      if (enc3 !== 64) ua[i + 1] = chr2;\\n      if (enc4 !== 64) ua[i + 2] = chr3;\\n    }\\n\\n    return ua;\\n  }\\n};\\n\\nIpfsBundle.prototype.isJson = function (content) {\\n  return this.ipfsLoader.isJson(content);\\n};\\n\\nIpfsBundle.prototype.loadToBase64 = async function (url, password) {\\n  return await this.ipfsLoader.loadToBase64(url, password);\\n};\\n\\nIpfsBundle.prototype.loadToUtf8 = async function (url, password) {\\n  return await this.ipfsLoader.loadToUtf8(url, password);\\n};\\n\\nIpfsBundle.prototype.analyzePinType = function (type) {\\n  return this.ipfsLibrary.analyzePinType(type);\\n};\\n\\nIpfsBundle.prototype.addAll = async function (client, source, options) {\\n  return await this.ipfsLibrary.addAll(client, source, options);\\n};\\n\\nIpfsBundle.prototype.hasPin = async function (client, key, type, ipfsPath) {\\n  return await this.ipfsLibrary.hasPin(client, key, type, ipfsPath);\\n};\\n\\nIpfsBundle.prototype.dagGet = async function (client, cid, options) {\\n  return await this.ipfsLibrary.dagGet(client, cid, options);\\n};\\n\\nIpfsBundle.prototype.dagPut = async function (client, dagNode, options) {\\n  return await this.ipfsLibrary.dagPut(client, dagNode, options);\\n};\\n\\nIpfsBundle.prototype.dagResolve = async function (client, ipfsPath, timeout) {\\n  return await this.ipfsLibrary.dagResolve(client, ipfsPath, timeout);\\n};\\n\\nIpfsBundle.prototype.filesStat = async function (client, ipfsPath, timeout) {\\n  return await this.ipfsLibrary.filesStat(client, ipfsPath, timeout);\\n};\\n\\nIpfsBundle.prototype.get = async function (client, ipfsPath, timeout) {\\n  return await this.ipfsLibrary.get(client, ipfsPath, timeout);\\n};\\n\\nIpfsBundle.prototype.isDirectory = function (ua) {\\n  return this.ipfsLibrary.isDirectory(ua);\\n};\\n\\nIpfsBundle.prototype.isIpfsDirectory = async function (client, cid, timeout) {\\n  return await this.ipfsLibrary.isIpfsDirectory(client, cid, timeout);\\n};\\n\\nIpfsBundle.prototype.ls = async function (client, ipfsPath) {\\n  return await this.ipfsLibrary.ls(client, ipfsPath);\\n};\\n\\nIpfsBundle.prototype.namePublish = async function (client, ipnsKey, cid, options) {\\n  return await this.ipfsLibrary.namePublish(client, ipnsKey, cid, options);\\n};\\n\\nIpfsBundle.prototype.nameResolve = async function (client, value, options) {\\n  return await this.ipfsLibrary.nameResolve(client, value, options);\\n};\\n\\nIpfsBundle.prototype.objectData = async function (client, cid, timeout) {\\n  return await this.ipfsLibrary.objectData(client, cid, timeout);\\n};\\n\\nIpfsBundle.prototype.objectStat = async function (client, cid, timeout) {\\n  return await this.ipfsLibrary.objectStat(client, cid, timeout);\\n};\\n\\nIpfsBundle.prototype.pinAdd = async function (client, ipfsPath, options) {\\n  return await this.ipfsLibrary.pinAdd(client, ipfsPath, options);\\n};\\n\\nIpfsBundle.prototype.pinRm = async function (client, ipfsPath, options) {\\n  return await this.ipfsLibrary.pinRm(client, ipfsPath, options);\\n};\\n\\nIpfsBundle.prototype.resolveIpfs = async function (client, value, timeout) {\\n  if (value === undefined || value == null || value.toString().trim() === '') {\\n    return {\\n      cid: null,\\n      remainderPath: ''\\n    };\\n  }\\n\\n  if (value instanceof URL === false) {\\n    try {\\n      value = this.getUrl(value, this.getIpfsBaseUrl());\\n    } catch (error) {\\n      return {\\n        cid: null,\\n        remainderPath: ''\\n      };\\n    }\\n  } // Pathname\\n\\n\\n  var cid = null;\\n  var ipfsPath = null;\\n  var {\\n    ipfsCid: cid,\\n    ipnsIdentifier,\\n    path\\n  } = this.decodePathname(value.pathname);\\n\\n  if (cid !== null) {\\n    ipfsPath = `/ipfs/${cid}${path}`;\\n  } else if (ipnsIdentifier !== null) {\\n    ipfsPath = `/ipns/${ipnsIdentifier}${path}`;\\n  }\\n\\n  if (ipfsPath !== null) {\\n    var {\\n      cid,\\n      remainderPath\\n    } = await this.dagResolve(client, ipfsPath, timeout);\\n    return {\\n      cid: cid,\\n      remainderPath: remainderPath\\n    };\\n  } // Hostname\\n\\n\\n  var {\\n    ipfsCid: cid,\\n    ipnsIdentifier,\\n    path\\n  } = this.decodeHostname(value.hostname);\\n\\n  if (cid !== null) {\\n    ipfsPath = `/ipfs/${cid}${path}`;\\n  } else if (ipnsIdentifier !== null) {\\n    ipfsPath = `/ipns/${ipnsIdentifier}${path}`;\\n  }\\n\\n  if (ipfsPath !== null) {\\n    var {\\n      cid,\\n      remainderPath\\n    } = await this.dagResolve(client, ipfsPath, timeout);\\n    return {\\n      cid: cid,\\n      remainderPath: remainderPath\\n    };\\n  }\\n\\n  return {\\n    cid: null,\\n    remainderPath: ''\\n  };\\n};\\n\\nIpfsBundle.prototype.resolveIpfsContainer = async function (client, value, timeout) {\\n  if (value === undefined || value == null || value.toString().trim() === '') {\\n    return null;\\n  }\\n\\n  if (value instanceof URL === false) {\\n    try {\\n      value = this.getUrl(value, this.getIpfsBaseUrl());\\n    } catch (error) {\\n      return null;\\n    }\\n  }\\n\\n  const self = this;\\n\\n  const resolveContainer = async function (client, ipfsPath, base, timeout) {\\n    const currentUrl = self.getUrl(ipfsPath, base);\\n    const {\\n      cid\\n    } = await self.resolveIpfs(client, currentUrl, timeout);\\n\\n    if (cid == null) {\\n      return null;\\n    }\\n\\n    if (await self.isIpfsDirectory(client, cid, timeout)) {\\n      return cid;\\n    }\\n\\n    var nextPath = '';\\n    const members = value.pathname.split('/');\\n\\n    for (var i = 0; i < members.length; i++) {\\n      if (members[i].trim() === '') {\\n        continue;\\n      }\\n\\n      if (i !== members.length - 1) {\\n        nextPath = `${nextPath}/${members[i]}`;\\n      }\\n    }\\n\\n    const nextUrl = self.getUrl(nextPath, base);\\n    const innerCid = await self.resolveIpfsContainer(client, nextUrl, timeout);\\n\\n    if (innerCid == null) {\\n      return cid;\\n    }\\n\\n    return innerCid;\\n  };\\n\\n  const base = this.getUrl(`${value.protocol}//${value.host}`); // Pathname\\n\\n  var ipfsPath = null;\\n  var {\\n    ipfsCid: innerCid,\\n    ipnsIdentifier,\\n    path\\n  } = this.decodePathname(value.pathname);\\n\\n  if (innerCid !== null) {\\n    ipfsPath = `/ipfs/${innerCid}${path}`;\\n  } else if (ipnsIdentifier !== null) {\\n    ipfsPath = `/ipns/${ipnsIdentifier}${path}`;\\n  }\\n\\n  if (ipfsPath !== null) {\\n    return await resolveContainer(client, ipfsPath, base, timeout);\\n  } // Hostname\\n\\n\\n  var {\\n    ipfsCid: innerCid,\\n    ipnsIdentifier,\\n    path\\n  } = this.decodeHostname(value.hostname);\\n\\n  if (innerCid !== null) {\\n    ipfsPath = `/ipfs/${innerCid}${path}`;\\n  } else if (ipnsIdentifier !== null) {\\n    ipfsPath = `/ipns/${ipnsIdentifier}${path}`;\\n  }\\n\\n  if (ipfsPath !== null) {\\n    return await resolveContainer(client, ipfsPath, base, timeout);\\n  }\\n\\n  return null;\\n};\\n\\nIpfsBundle.prototype.getIpfsIdentifier = function (value) {\\n  if (value === undefined || value == null) {\\n    return {\\n      hostname: null,\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      ipfsPath: ''\\n    };\\n  }\\n\\n  if (value instanceof CID) {\\n    return {\\n      hostname: null,\\n      ipfsCid: value,\\n      ipnsIdentifier: null,\\n      ipfsPath: ''\\n    };\\n  }\\n\\n  var ipfsCid = null;\\n  var hostname = null;\\n  var ipnsIdentifier = null;\\n  var path = null;\\n  var url = null;\\n\\n  if (value instanceof URL === false) {\\n    try {\\n      url = this.getUrl(encodeURI(value), this.getIpfsBaseUrl());\\n    } catch (error) {\\n      url = null;\\n    }\\n  } else {\\n    url = value;\\n  }\\n\\n  if (url !== null) {\\n    var {\\n      hostname,\\n      ipfsCid,\\n      ipnsIdentifier,\\n      path\\n    } = this.decodeUrl(url);\\n  } else {\\n    var {\\n      hostname,\\n      ipfsCid,\\n      ipnsIdentifier,\\n      path\\n    } = this.decodeHostname(value);\\n\\n    if (ipfsCid == null && ipnsIdentifier == null) {\\n      var {\\n        ipfsCid,\\n        ipnsIdentifier,\\n        path\\n      } = this.decodePathname(value);\\n    }\\n  }\\n\\n  return {\\n    hostname: hostname,\\n    ipfsCid: ipfsCid,\\n    ipnsIdentifier: ipnsIdentifier,\\n    ipfsPath: path !== undefined && path !== null ? path : ''\\n  };\\n};\\n\\nIpfsBundle.prototype.decodeUrl = function (url) {\\n  url = url !== undefined && url !== null && url.toString().trim() !== '' ? url : null;\\n\\n  if (url instanceof URL === false) {\\n    return {\\n      hostname: null,\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      path: ''\\n    };\\n  }\\n\\n  var hostname = null;\\n  var ipfsCid = null;\\n  var ipnsIdentifier = null;\\n  var protocol = null;\\n  var path = `${url.pathname}${url.search}${url.hash}`;\\n\\n  if (url.protocol === 'ipfs:' || url.protocol === 'ipns:') {\\n    if (url.hostname !== undefined && url.hostname !== null && url.hostname.trim() !== '') {\\n      if (url.protocol === 'ipns:') {\\n        ipnsIdentifier = url.hostname;\\n        protocol = 'ipns';\\n      } else if (url.protocol === 'ipfs:' && this.getCid(url.hostname) !== null) {\\n        ipfsCid = url.hostname;\\n        protocol = 'ipfs';\\n      }\\n    } else if (url.pathname !== undefined && url.pathname !== null && url.pathname.trim() !== '') {\\n      var pathname = null;\\n\\n      if (url.pathname.startsWith('//')) {\\n        pathname = `/${protocol}/${url.pathname.slice(2)}${url.search}${url.hash}`;\\n      } else {\\n        pathname = `/${protocol}/${url.pathname}${url.search}${url.hash}`;\\n      }\\n\\n      var {\\n        ipfsCid,\\n        ipnsIdentifier,\\n        path\\n      } = this.decodePathname(pathname);\\n    }\\n\\n    return {\\n      hostname: null,\\n      ipfsCid: ipfsCid,\\n      ipnsIdentifier: ipnsIdentifier,\\n      path: path\\n    };\\n  }\\n\\n  var {\\n    hostname,\\n    ipfsCid,\\n    ipnsIdentifier\\n  } = this.decodeHostname(url.hostname);\\n\\n  if (ipfsCid == null && ipnsIdentifier == null) {\\n    var {\\n      ipfsCid,\\n      ipnsIdentifier,\\n      path: innerPath\\n    } = this.decodePathname(url.pathname);\\n\\n    if (innerPath !== null) {\\n      path = `${innerPath}${url.search}${url.hash}`;\\n    }\\n  }\\n\\n  return {\\n    hostname: hostname,\\n    ipfsCid: ipfsCid,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: path\\n  };\\n};\\n\\nIpfsBundle.prototype.decodePathname = function (pathname) {\\n  pathname = pathname !== undefined && pathname !== null && pathname.trim() !== '' ? decodeURI(pathname.trim()) : null;\\n\\n  if (pathname == null || pathname === '/') {\\n    return {\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      path: pathname\\n    };\\n  }\\n\\n  var identifier = null;\\n  var protocol = null;\\n  var path = ''; // Parse\\n\\n  const members = pathname.split('/');\\n\\n  for (var i = 0; i < members.length; i++) {\\n    if (members[i].trim() === '') {\\n      continue;\\n    }\\n\\n    if (protocol == null) {\\n      protocol = members[i];\\n      continue;\\n    }\\n\\n    if (identifier == null) {\\n      identifier = members[i];\\n      continue;\\n    }\\n\\n    path = `${path}/${members[i]}`;\\n  }\\n\\n  if (pathname.slice(-1) === '/') {\\n    path = `${path}/`;\\n  }\\n\\n  if (protocol == null || identifier == null) {\\n    return {\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      path: pathname\\n    };\\n  }\\n\\n  var ipfsCid = null;\\n  var ipnsIdentifier = null;\\n\\n  if (protocol === 'ipns' || protocol === 'ipns:') {\\n    ipnsIdentifier = identifier;\\n  } else if ((protocol === 'ipfs' || protocol === 'ipfs:') && this.getCid(identifier) !== null) {\\n    ipfsCid = identifier;\\n  } else {\\n    protocol = null;\\n  }\\n\\n  return {\\n    ipfsCid: ipfsCid,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: protocol !== null ? path : pathname\\n  };\\n};\\n\\nIpfsBundle.prototype.decodeHostname = function (hostname) {\\n  hostname = hostname !== undefined && hostname !== null && hostname.trim() !== '' ? hostname.trim() : null;\\n\\n  if (hostname == null) {\\n    return {\\n      hostname: null,\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      path: '/'\\n    };\\n  }\\n\\n  var domain = null;\\n  var identifier = null;\\n  var protocol = null;\\n  var path = '/'; // Parse\\n\\n  const members = hostname.split('.');\\n\\n  for (var i = 0; i < members.length; i++) {\\n    if (members[i].trim() === '') {\\n      continue;\\n    }\\n\\n    if (identifier == null) {\\n      identifier = members[i];\\n      continue;\\n    }\\n\\n    if (protocol == null) {\\n      protocol = members[i];\\n      continue;\\n    }\\n\\n    const search = members[i].split('/', 1);\\n\\n    if (search[0] !== members[i]) {\\n      if (domain) {\\n        domain = `${domain}.${search[0]}`;\\n      } else {\\n        domain = search[0];\\n      }\\n\\n      path = search[1];\\n    } else {\\n      if (domain) {\\n        domain = `${domain}.${members[i]}`;\\n      } else {\\n        domain = members[i];\\n      }\\n    }\\n  }\\n\\n  if (identifier == null || protocol == null) {\\n    return {\\n      hostname: null,\\n      ipfsCid: null,\\n      ipnsIdentifier: null,\\n      path: '/'\\n    };\\n  }\\n\\n  var ipfsCid = null;\\n  var ipnsIdentifier = null;\\n\\n  if (protocol === 'ipns' || protocol === 'ipns:') {\\n    ipnsIdentifier = identifier;\\n  } else if ((protocol === 'ipfs' || protocol === 'ipfs:') && this.getCid(identifier) !== null) {\\n    ipfsCid = identifier;\\n  }\\n\\n  if (ipfsCid == null && ipnsIdentifier == null) {\\n    if (domain == null) {\\n      domain = `${identifier}.${protocol}`;\\n    } else {\\n      domain = `${identifier}.${protocol}.${domain}`;\\n    }\\n  }\\n\\n  return {\\n    hostname: domain,\\n    ipfsCid: ipfsCid,\\n    ipnsIdentifier: ipnsIdentifier,\\n    path: path !== undefined && path !== null ? path : '/'\\n  };\\n};\\n\\nIpfsBundle.prototype.getCid = function (cid) {\\n  try {\\n    const newCid = new CID(cid.toString());\\n\\n    if (CID.isCID(newCid)) {\\n      return newCid;\\n    }\\n  } catch (error) {// Ignore\\n  }\\n\\n  return null;\\n};\\n\\nIpfsBundle.prototype.cidToBase58CidV0 = function (cid, log) {\\n  return this.convertCidToBase58CidV0(cid, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToBase58CidV0 = function (cid, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec\\n  } = cid.toJSON();\\n\\n  if (cid.version === 1) {\\n    const converted = new CID(0, dagPb, cid.multihash, 'base58btc'); // Log\\n\\n    if (log) {\\n      const {\\n        codec: convertedCodec\\n      } = converted.toJSON();\\n      this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv1\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${convertedCodec}' \\\"cidv0\\\" (base58btc): ${cidInspector}${converted}`);\\n    }\\n\\n    return converted;\\n  } // Convert\\n\\n\\n  if (cidCodec !== dagPb || cid.multibaseName !== 'base58btc') {\\n    cid = this.convertCidToCid(cid, 0, dagPb, 'base58btc', log);\\n  }\\n\\n  return cid;\\n};\\n\\nIpfsBundle.prototype.cidToCidV1 = function (cid, protocol, log) {\\n  return this.convertCidToCidV1(cid, protocol, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToCidV1 = function (cid, protocol, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec\\n  } = cid.toJSON();\\n  var codec = protocol !== undefined && protocol !== null ? protocol === 'ipns' ? libp2pKey : dagPb : dagPb;\\n  var multibaseName = codec === libp2pKey ? 'base36' : 'base32'; // Convert\\n\\n  if (cid.version === 0) {\\n    const converted = new CID(1, codec, cid.multihash, multibaseName);\\n\\n    if (log) {\\n      this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv0\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${codec}' \\\"cidv1\\\" (${multibaseName}): ${cidInspector}${converted}`);\\n    }\\n\\n    return converted;\\n  } // Convert\\n\\n\\n  if (cidCodec !== codec || cid.multibaseName !== multibaseName) {\\n    cid = this.convertCidToCid(cid, 1, codec, multibaseName, log);\\n  }\\n\\n  return cid;\\n};\\n\\nIpfsBundle.prototype.cidToLibp2pKeyCidV1 = function (cid, multibaseName, log) {\\n  return this.convertCidToCid(cid, 1, 'libp2p-key', multibaseName, log);\\n};\\n\\nIpfsBundle.prototype.convertCidToCid = function (cid, version, codec, multibaseName, log) {\\n  cid = new CID(cid.toString());\\n  const {\\n    codec: cidCodec,\\n    version: cidVersion\\n  } = cid.toJSON();\\n\\n  if (cid.version === version && cidCodec === codec && cid.multibaseName === multibaseName) {\\n    return cid;\\n  }\\n\\n  const converted = new CID(version, codec, cid.multihash, multibaseName);\\n\\n  if (log) {\\n    const {\\n      codec: convertedCodec,\\n      version: convertedVersion\\n    } = converted.toJSON();\\n    this.getLogger().info(`Converted:\\n'${cidCodec}' \\\"cidv${cidVersion}\\\" (${cid.multibaseName}): ${cidInspector}${cid}\\nto '${convertedCodec}' \\\"cidv${convertedVersion}\\\" (${multibaseName}): ${cidInspector}${converted}`);\\n  }\\n\\n  return converted;\\n};\\n\\nIpfsBundle.prototype.Base64ToUint8Array = function (b64) {\\n  return Base64Binary.decode(b64);\\n}; // https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string\\n\\n\\nIpfsBundle.prototype.Uint8ArrayToBase64 = function (uint8) {\\n  var CHUNK_SIZE = 0x8000; //arbitrary number\\n\\n  var index = 0;\\n  var length = uint8.length;\\n  var str = '';\\n  var slice;\\n\\n  while (index < length) {\\n    slice = uint8.subarray(index, Math.min(index + CHUNK_SIZE, length));\\n    str += String.fromCharCode.apply(null, slice);\\n    index += CHUNK_SIZE;\\n  }\\n\\n  return btoa(str);\\n}; // String to uint array\\n\\n\\nIpfsBundle.prototype.StringToUint8Array = function (string) {\\n  return uint8ArrayFromString(string);\\n}; // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\\n\\n/*\\n * utf.js - UTF-8 <=> UTF-16 convertion\\n *\\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\\n * Version: 1.0\\n * LastModified: Dec 25 1999\\n * This library is free.  You can redistribute it and/or modify it.\\n */\\n\\n\\nIpfsBundle.prototype.Utf8ArrayToStr = function (array) {\\n  var c, char2, char3;\\n  var out = '';\\n  var len = array.length;\\n  var i = 0;\\n\\n  while (i < len) {\\n    c = array[i++];\\n\\n    switch (c >> 4) {\\n      case 0:\\n      case 1:\\n      case 2:\\n      case 3:\\n      case 4:\\n      case 5:\\n      case 6:\\n      case 7:\\n        // 0xxxxxxx\\n        out += String.fromCharCode(c);\\n        break;\\n\\n      case 12:\\n      case 13:\\n        // 110x xxxx   10xx xxxx\\n        char2 = array[i++];\\n        out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);\\n        break;\\n\\n      case 14:\\n        // 1110 xxxx  10xx xxxx  10xx xxxx\\n        char2 = array[i++];\\n        char3 = array[i++];\\n        out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);\\n        break;\\n    }\\n  }\\n\\n  return out;\\n};\\n\\nIpfsBundle.prototype.deflate = function (str) {\\n  var tStart = new Date();\\n  var ua = globalThis.pako.deflate(str, {\\n    raw: false\\n  });\\n  var b64 = this.Uint8ArrayToBase64(ua);\\n  var tStop = new Date() - tStart;\\n  var ratio = Math.floor(b64.length * 100 / str.length);\\n  this.getLogger().info(`Deflate: ${tStop}ms, In: ${str.length} bytes, Out: ${b64.length} bytes, Ratio: ${ratio}%`);\\n  return b64;\\n};\\n\\nIpfsBundle.prototype.inflate = function (b64) {\\n  var tStart = new Date();\\n  var ua = this.decode(b64);\\n  var str = globalThis.pako.inflate(ua, {\\n    to: 'string'\\n  });\\n  var tStop = new Date() - tStart;\\n  var ratio = Math.floor(str.length * 100 / b64.length);\\n  this.getLogger().info(`Inflate: ${tStop}ms, In: ${b64.length} bytes, Out: ${str.length} bytes, Ratio: ${ratio}%`);\\n  return str;\\n};\\n\\nexports.IpfsBundle = IpfsBundle;\\n\\n},{\\\"cids\\\":19,\\\"core-js/modules/es.string.replace.js\\\":133,\\\"core-js/modules/es.typed-array.uint8-array.js\\\":135,\\\"core-js/modules/web.dom-collections.iterator.js\\\":149,\\\"core-js/modules/web.url.js\\\":151,\\\"core-js/modules/web.url.to-json.js\\\":152,\\\"core/modules/library/ipfs-bundle/ens-library.js\\\":2,\\\"core/modules/library/ipfs-bundle/ethereum-library.js\\\":3,\\\"core/modules/library/ipfs-bundle/ipfs-library.js\\\":4,\\\"core/modules/library/ipfs-bundle/ipfs-loader.js\\\":5,\\\"core/modules/library/ipfs-bundle/ipfs-url.js\\\":6,\\\"uint8arrays/from-string\\\":203}],2:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ens-library.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/es.typed-array.from.js\\\");\\n\\nrequire(\\\"core-js/modules/es.typed-array.uint8-array.js\\\");\\n\\nconst basex = require('@multiformats/base-x');\\n\\nconst CID = require('cids');\\n\\nconst concat = require('uint8arrays').concat;\\n\\nconst fromString = require('uint8arrays').fromString;\\n\\nconst multiC = require('multicodec');\\n\\nconst multiH = require('multihashes');\\n/*eslint no-unused-vars:\\\"off\\\"*/\\n\\n\\nconst BASE58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\\nconst bs58 = basex(BASE58); // https://github.com/ensdomains/resolvers\\n\\nvar EnsLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ens-library'; // https://docs.ens.domains/ens-deployments\\n  // https://github.com/ensdomains/ui/blob/master/src/ens.js\\n\\n  this.registry = {\\n    0x1: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x3: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x4: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n    0x5: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\\n  };\\n};\\n\\nEnsLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nEnsLibrary.prototype.getENSRegistry = function () {\\n  return this.registry;\\n};\\n\\nEnsLibrary.prototype.hexStringToUint8Array = function (hex) {\\n  const prefix = hex.slice(0, 2);\\n  const value = hex.slice(2);\\n  var res = '';\\n\\n  if (prefix === '0x') {\\n    res = value;\\n  } else {\\n    res = hex;\\n  }\\n\\n  return multiH.fromHexString(res);\\n};\\n\\nEnsLibrary.prototype.getCodec = function (hash) {\\n  const ua = this.hexStringToUint8Array(hash);\\n  return multiC.getCodec(ua);\\n};\\n\\nEnsLibrary.prototype.b58MultiHash = function (hash) {\\n  const ua = this.hexStringToUint8Array(hash);\\n  const value = multiC.rmPrefix(ua);\\n  const cid = new CID(value);\\n  return multiH.toB58String(cid.multihash);\\n}; // https://github.com/ensdomains/ui/blob/master/src/utils/contents.js\\n\\n\\nEnsLibrary.prototype.decodeContenthash = function (encoded) {\\n  var decoded = null;\\n  var protocol = null;\\n\\n  if (encoded.error) {\\n    throw new Error(encoded.error);\\n  }\\n\\n  if (encoded) {\\n    try {\\n      const codec = this.getCodec(encoded);\\n      decoded = this.b58MultiHash(encoded);\\n\\n      if (codec === 'ipfs-ns') {\\n        protocol = 'ipfs';\\n        decoded = this.ipfsBundle.cidToCidV1(decoded, protocol, true);\\n      } else if (codec === 'ipns-ns') {\\n        protocol = 'ipns';\\n        decoded = this.ipfsBundle.cidToCidV1(decoded, protocol, true);\\n      } else {\\n        throw new Error(`Unsupported ENS Content Hash codec: ${codec}`);\\n      }\\n\\n      decoded = decoded.toString();\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n  }\\n\\n  return {\\n    decoded: decoded,\\n    protocol: protocol\\n  };\\n}; // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1577.md\\n// https://github.com/ensdomains/ui/blob/master/src/utils/contents.js\\n\\n\\nEnsLibrary.prototype.encodeContenthash = function (content) {\\n  var type = null;\\n  var text = null;\\n  var encoded = null;\\n  content = content === undefined || content == null || content.trim() === '' ? null : content.trim();\\n\\n  if (content == null) {\\n    return null;\\n  }\\n\\n  const matched = content.match(/^(ipfs|ipns|bzz|onion|onion3):\\\\/\\\\/(.*)/) || content.match(/\\\\/(ipfs)\\\\/(.*)/) || content.match(/\\\\/(ipns)\\\\/(.*)/);\\n\\n  if (matched) {\\n    type = matched[1];\\n    text = matched[2];\\n  } // https://stackoverflow.com/questions/39225161/convert-uint8array-into-hex-string-equivalent-in-node-js\\n\\n\\n  function i2hex(i) {\\n    return ('0' + i.toString(16)).slice(-2);\\n  }\\n\\n  if (type === 'ipfs') {\\n    encoded = this.ipfsBundle.cidToBase58CidV0(text, true);\\n    encoded = new CID(1, 'dag-pb', multiH.fromB58String(encoded.toString()));\\n    encoded = multiC.addPrefix('ipfs-ns', encoded.bytes);\\n    encoded = Array.from(encoded).map(i2hex).join('');\\n    encoded = `0x${encoded}`;\\n  } else if (type === 'ipns') {\\n    var ua = [Uint8Array.from([0, text.length]), fromString(text)];\\n    ua = concat(ua, 2 + text.length);\\n    encoded = bs58.encode(ua);\\n    encoded = new CID(1, 'dag-pb', multiH.fromB58String(encoded));\\n    encoded = multiC.addPrefix('ipns-ns', encoded.bytes);\\n    encoded = Array.from(encoded).map(i2hex).join('');\\n    encoded = `0x${encoded}`;\\n  } else {\\n    throw new Error(`Unsupported ENS Content Hash type: ${type}`);\\n  }\\n\\n  return {\\n    encoded: encoded\\n  };\\n};\\n\\nEnsLibrary.prototype.getRegistry = async function (web3) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  } // Retrieve network\\n\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId); // Retrieve an Ethereum ENS Registry address\\n\\n  var registry = null;\\n\\n  try {\\n    registry = this.registry[chainId];\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (registry === undefined || registry == null) {\\n    throw new Error(`Unsupported Ethereum network: ${chainId}`);\\n  } // Return registry address\\n\\n\\n  return {\\n    chainId: chainId,\\n    registry: registry\\n  };\\n};\\n\\nEnsLibrary.prototype.getResolver = async function (web3, registry, node) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  node = node === undefined || node == null || node.trim() === '' ? null : node.trim();\\n\\n  if (node == null) {\\n    throw new Error('Undefined ENS domain resolver...');\\n  }\\n\\n  registry = registry === undefined || registry == null || registry.trim() === '' ? null : registry.trim();\\n\\n  if (registry == null) {\\n    throw new Error('Undefined ENS registry address...');\\n  }\\n\\n  const abi = ['function resolver(bytes32 node) external view returns (address)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('resolver', [node]);\\n  const result = await web3.call({\\n    to: registry,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return null;\\n  }\\n\\n  try {\\n    const decoded = iface.decodeFunctionResult('resolver', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0];\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  } // Return\\n\\n\\n  return null;\\n}; // https://eips.ethereum.org/EIPS/eip-165\\n\\n\\nEnsLibrary.prototype.checkEip165 = async function (web3, address) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  address = address === undefined || address == null || address.trim() === '' ? null : address.trim();\\n\\n  if (address == null) {\\n    throw new Error('Undefined Ethereum address...');\\n  }\\n\\n  var abi = ['function supportsInterface(bytes4 interfaceID) public pure returns(bool)'];\\n  var iface = new globalThis.ethers.utils.Interface(abi);\\n  var data = iface.encodeFunctionData('supportsInterface', ['0x01ffc9a7']);\\n  var result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      if (decoded[0] === false) {\\n        return false;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n    return false;\\n  }\\n\\n  data = iface.encodeFunctionData('supportsInterface', ['0xffffffff']);\\n  result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      // conform to spec\\n      if (decoded[0] === false) {\\n        return true;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  } // do not conform to spec\\n\\n\\n  return false;\\n}; // https://eips.ethereum.org/EIPS/eip-1577\\n\\n\\nEnsLibrary.prototype.checkEip1577 = async function (web3, address) {\\n  if (web3 === undefined || web3 == null) {\\n    throw new Error('Undefined Web3 provider...');\\n  }\\n\\n  address = address === undefined || address == null || address.trim() === '' ? null : address.trim();\\n\\n  if (address == null) {\\n    throw new Error('Undefined Ethereum address...');\\n  } // contenthash, true when interfaceID is 0xbc1c58d1\\n\\n\\n  var abi = ['function supportsInterface(bytes4 interfaceID) public pure returns(bool)'];\\n  var iface = new globalThis.ethers.utils.Interface(abi);\\n  var data = iface.encodeFunctionData('supportsInterface', ['0xbc1c58d1']);\\n  var result = await web3.call({\\n    to: address,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  }\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('supportsInterface', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0];\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  return false;\\n};\\n\\nEnsLibrary.prototype.getContentHash = async function (domain, web3) {\\n  domain = domain === undefined || domain == null || domain.trim() === '' ? null : domain.trim();\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (web3 === undefined) {\\n    var {\\n      web3\\n    } = await this.ipfsBundle.getWeb3Provider();\\n  }\\n\\n  const explorer = this.ipfsBundle.getBlockExplorerRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${explorer[chainId]}/address/${registry}`); // Fetch resolver address\\n\\n  var resolver = await this.getResolver(web3, registry, domainHash); // Check\\n\\n  if (resolver == null || /^0x0+$/.test(resolver) === true) {\\n    throw new Error('Undefined ENS domain resolver...');\\n  } // Log\\n\\n\\n  this.getLogger().info(`ENS domain resolver:\\n${explorer[chainId]}/address/${resolver}`); // Check if resolver is EIP165\\n\\n  const eip165 = await this.checkEip165(web3, resolver);\\n\\n  if (eip165 === false) {\\n    throw new Error('ENS domain resolver do not conform to EIP165...');\\n  } // Check if resolver is EIP1577\\n\\n\\n  const eip1577 = await this.checkEip1577(web3, resolver);\\n\\n  if (eip1577 === false) {\\n    throw new Error('ENS domain resolver do not conform to EIP1577...');\\n  } // Retrieve content hash\\n\\n\\n  this.getLogger().info('Retrieving ENS domain content...');\\n  const abi = ['function contenthash(bytes32 node) external view returns (bytes memory)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('contenthash', [domainHash]);\\n  const result = await web3.call({\\n    to: resolver,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return {\\n      content: null,\\n      protocol: null\\n    };\\n  }\\n\\n  var content = iface.decodeFunctionResult('contenthash', result);\\n\\n  if (content !== undefined && content !== null && Array.isArray(content) && content.length > 0) {\\n    var {\\n      decoded,\\n      protocol\\n    } = this.decodeContenthash(content[0]);\\n    return {\\n      content: decoded,\\n      protocol: protocol\\n    };\\n  }\\n\\n  return {\\n    content: null,\\n    protocol: null\\n  };\\n};\\n\\nEnsLibrary.prototype.isOwner = async function (domain, web3, account) {\\n  domain = domain === undefined || domain == null || domain.trim() === '' ? null : domain.trim();\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (account === undefined || account == null || web3 === undefined || web3 == null) {\\n    var {\\n      account,\\n      web3\\n    } = await this.ipfsBundle.getEnabledWeb3Provider();\\n  }\\n\\n  const explorer = this.ipfsBundle.getBlockExplorerRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${explorer[chainId]}/address/${registry}`);\\n  const abi = ['function owner(bytes32 node) public view returns(address)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('owner', [domainHash]);\\n  const result = await web3.call({\\n    to: registry,\\n    data: data\\n  });\\n\\n  if (result === undefined || result == null || result === '0x') {\\n    return false;\\n  } // decode if applicable\\n\\n\\n  try {\\n    var decoded = iface.decodeFunctionResult('owner', result);\\n\\n    if (decoded !== undefined && decoded !== null && Array.isArray(decoded) && decoded.length > 0) {\\n      return decoded[0].toLowerCase() === account.toLowerCase();\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  return false;\\n};\\n\\nEnsLibrary.prototype.setContentHash = async function (domain, identifier, web3, account) {\\n  identifier = identifier !== undefined && identifier !== null && identifier.toString().trim() !== '' ? identifier.toString().trim() : null;\\n\\n  if (identifier == null) {\\n    throw new Error('Undefined IPFS identifier...');\\n  }\\n\\n  domain = domain !== undefined && domain !== null && domain.trim() !== '' ? domain.trim() : null;\\n\\n  if (domain == null) {\\n    throw new Error('Undefined ENS domain...');\\n  }\\n\\n  if (account === undefined || web3 === undefined) {\\n    var {\\n      account,\\n      web3\\n    } = await this.ipfsBundle.getEnabledWeb3Provider();\\n  }\\n\\n  const explorer = this.ipfsBundle.getBlockExplorerRegistry(); // Resolve domain as namehash\\n\\n  const domainHash = globalThis.ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n  const {\\n    chainId,\\n    registry\\n  } = await this.getRegistry(web3);\\n  this.getLogger().info(`ENS registry:\\n${explorer[chainId]}/address/${registry}`);\\n  var resolver = await this.getResolver(web3, registry, domainHash);\\n\\n  if (resolver == null || /^0x0+$/.test(resolver) === true) {\\n    throw new Error('Undefined ENS resolver...');\\n  }\\n\\n  this.getLogger().info(`ENS domain resolver:\\n${explorer[chainId]}/address/${resolver}`); // Check if resolver is EIP165\\n\\n  const eip165 = await this.checkEip165(web3, resolver);\\n\\n  if (eip165 === false) {\\n    throw new Error('ENS resolver do not conform to EIP165...');\\n  } // Check if resolver is EIP1577\\n\\n\\n  const eip1577 = await this.checkEip1577(web3, resolver);\\n\\n  if (eip1577 === false) {\\n    throw new Error('ENS resolver do not conform to EIP1577...');\\n  } // Encode identifier\\n\\n\\n  const {\\n    encoded\\n  } = this.encodeContenthash(identifier); // Set Contenthash\\n\\n  this.getLogger().info('Processing ENS domain content...');\\n  const abi = ['function setContenthash(bytes32 node, bytes calldata hash)'];\\n  const iface = new globalThis.ethers.utils.Interface(abi);\\n  const data = iface.encodeFunctionData('setContenthash', [domainHash, encoded]);\\n\\n  try {\\n    const signer = web3.getSigner(account);\\n    const tx = await signer.sendTransaction({\\n      to: resolver,\\n      data: data\\n    });\\n    this.getLogger().info(`Processing Transaction:\\n${explorer[chainId]}/tx/${tx.hash}`); // Wait for transaction completion\\n\\n    await tx.wait();\\n    this.getLogger().info('Processed ENS domain content...');\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    if (error.code === 4100) {\\n      const err = new Error('Unauthorized User Account...');\\n      err.name = 'UnauthorizedUserAccount';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nexports.EnsLibrary = EnsLibrary;\\n\\n},{\\\"@multiformats/base-x\\\":7,\\\"cids\\\":19,\\\"core-js/modules/es.typed-array.from.js\\\":134,\\\"core-js/modules/es.typed-array.uint8-array.js\\\":135,\\\"multicodec\\\":184,\\\"multihashes\\\":195,\\\"uint8arrays\\\":204}],3:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ethereum-library.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\n\\\\*/\\n'use strict'; // https://github.com/ensdomains/resolvers\\n\\nvar EthereumLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  this.name = 'ethereum-library';\\n  this.network = {\\n    0x1: 'Ethereum Main Network: \\\"Mainnet\\\", chainId: \\\"0x1\\\": \\\"1\\\"',\\n    0x2a: 'Ethereum Test Network (PoA): \\\"Kovan\\\", chainId: \\\"0x2a\\\": \\\"42\\\"',\\n    0x3: 'Ethereum Test Network (PoW): \\\"Ropsten\\\", chainId: \\\"0x3\\\": \\\"3\\\"',\\n    0x38: 'Binance Smart Chain Main Network (bsc-mainnet): \\\"0x38\\\": \\\"56\\\"',\\n    // https://bsc-dataseed.binance.org/\\n    0x4: 'Ethereum Test Network (PoA): \\\"Rinkeby\\\", chainId: \\\"0x4\\\": \\\"4\\\"',\\n    0x5: 'Ethereum Test Network (PoA): \\\"Goerli\\\", chainId: \\\"0x5\\\": \\\"5\\\"',\\n    0x61: 'Binance Smart Chain Test Network (bsc-testnet): \\\"0x61\\\": \\\"97\\\"',\\n    // https://data-seed-prebsc-1-s1.binance.org:8545/\\n    0x64: 'xDai Main Network: \\\"Mainnet\\\", chainId: \\\"0x64\\\": \\\"100\\\"',\\n    // https://rpc.xdaichain.com/\\n    0x89: 'Polygon Main Network, chainId: \\\"0x89\\\": \\\"127\\\"' // https://rpc-mainnet.maticvigil.com/\\n\\n  };\\n  this.explorer = {\\n    0x1: 'https://etherscan.io',\\n    0x2a: 'https://kovan.etherscan.io',\\n    0x3: 'https://ropsten.etherscan.io',\\n    0x38: 'https://bscscan.com',\\n    0x4: 'https://rinkeby.etherscan.io',\\n    0x5: 'https://goerli.etherscan.io',\\n    0x61: 'https://testnet.bscscan.com/',\\n    0x64: 'https://blockscout.com/poa/xdai',\\n    0x89: 'https://explorer.matic.network'\\n  };\\n  this.once = false;\\n  this.provider = null;\\n};\\n\\nEthereumLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nEthereumLibrary.prototype.getEthereumProvider = async function () {\\n  if (this.provider == null) {\\n    this.provider = await this.detectEthereumProvider();\\n  }\\n\\n  return this.provider;\\n};\\n/*\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nEthereumLibrary.prototype.init = async function () {\\n  // Init once\\n  if (this.once) {\\n    return;\\n  }\\n\\n  const self = this;\\n\\n  try {\\n    const provider = await this.getEthereumProvider();\\n    const chainId = await this.getChainId(provider);\\n    this.getLogger().info(`Chain: ${this.network[chainId]}`); // Init Ethereum listener\\n\\n    provider.on('accountsChanged', accounts => {\\n      self.accounts(provider, accounts);\\n    });\\n    provider.on('chainChanged', chainId => {\\n      const id = parseInt(chainId, 16);\\n      self.getLogger().info(`Chain: ${self.network[id]}`);\\n    });\\n    provider.on('connect', chainId => {\\n      const id = parseInt(chainId, 16);\\n      self.getLogger().info(`Chain: ${self.network[id]}`);\\n    });\\n    provider.on('disconnect', (code, reason) => {\\n      self.disconnectedFromAllChains(code, reason);\\n    });\\n    provider.on('message', message => {\\n      self.providerMessage(message);\\n    });\\n  } catch (error) {\\n    if (error.name !== 'MissingBrowserExtension') {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(this.name, error.message);\\n    }\\n  } // Init once\\n\\n\\n  this.once = true;\\n};\\n\\nEthereumLibrary.prototype.getChainId = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  var chainId = await provider.request({\\n    method: 'eth_chainId'\\n  });\\n  chainId = chainId !== undefined && chainId !== null && chainId.trim() !== '' ? chainId.trim() : null;\\n  return chainId !== null ? parseInt(chainId, 16) : null;\\n};\\n\\nEthereumLibrary.prototype.accounts = async function (provider, accounts) {\\n  if (accounts !== undefined && accounts !== null && Array.isArray(accounts) === true && accounts.length > 0) {\\n    try {\\n      const chainId = await this.getChainId(provider);\\n      this.getLogger().info(`Chain: ${this.network[chainId]}`);\\n      this.getLogger().info(`Ethereum account: ${this.explorer[chainId]}/address/${accounts[0]}`);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(this.name, error.message);\\n    }\\n  } else {\\n    this.getLogger().info('Unavailable Ethereum account...');\\n  }\\n};\\n\\nEthereumLibrary.prototype.disconnectedFromAllChains = function (code, reason) {\\n  this.getLogger().info(`Ethereum Provider is disconnected: ${reason}. Code: ${code}`);\\n};\\n\\nEthereumLibrary.prototype.providerMessage = function (message) {\\n  this.getLogger().info(`Ethereum Provider message: ${message}`);\\n};\\n\\nEthereumLibrary.prototype.getBlockExplorerRegistry = function () {\\n  return this.explorer;\\n};\\n\\nEthereumLibrary.prototype.getNetworkRegistry = function () {\\n  return this.network;\\n};\\n\\nEthereumLibrary.prototype.personalSign = async function (message, provider) {\\n  message = message !== undefined && message !== null && message.trim() !== '' ? message.trim() : null;\\n\\n  if (message == null) {\\n    throw new Error('Undefined Message....');\\n  }\\n\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    const account = await this.getAccount(provider);\\n    const signature = await provider.request({\\n      method: 'personal_sign',\\n      params: [message, account]\\n    });\\n    return signature;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.personalRecover = async function (message, signature) {\\n  message = message !== undefined && message !== null && message.trim() !== '' ? message.trim() : null;\\n\\n  if (message == null) {\\n    throw new Error('Undefined Message....');\\n  }\\n\\n  signature = signature !== undefined && signature !== null && signature.trim() !== '' ? signature.trim() : null;\\n\\n  if (signature == null) {\\n    throw new Error('Undefined Signature....');\\n  }\\n\\n  if (typeof globalThis.sigUtil === 'undefined') {\\n    await this.ipfsBundle.loadEthSigUtilLibrary();\\n  }\\n\\n  const msgParams = {\\n    data: message,\\n    sig: signature\\n  };\\n  const recovered = globalThis.sigUtil.recoverPersonalSignature(msgParams);\\n\\n  if (recovered === undefined || recovered == null) {\\n    const err = new Error('Unrecoverable signature...');\\n    err.name = 'UnrecoverableSignature';\\n    throw err;\\n  }\\n\\n  return recovered;\\n};\\n\\nEthereumLibrary.prototype.decrypt = async function (text, provider) {\\n  text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null;\\n\\n  if (text == null) {\\n    throw new Error('Undefined Text....');\\n  }\\n\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    const account = await this.getAccount(provider);\\n    var tStart = new Date();\\n    const decryptedText = await provider.request({\\n      method: 'eth_decrypt',\\n      params: [text, account]\\n    });\\n\\n    if (decryptedText !== undefined || decryptedText !== null) {\\n      var tStop = new Date() - tStart;\\n      var ratio = Math.floor(decryptedText.length * 100 / text.length);\\n      this.getLogger().info(`Ethereum Decrypt: ${tStop}ms, In: ${text.length}, Out: ${decryptedText.length}, Ratio: ${ratio}%`);\\n    }\\n\\n    return decryptedText;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.getPublicEncryptionKey = async function (provider, account) {\\n  try {\\n    if (provider === undefined || provider == null) {\\n      provider = await this.getEthereumProvider();\\n    }\\n\\n    if (account === undefined) {\\n      account = await this.getAccount(provider);\\n    }\\n\\n    const encryptionKey = await provider.request({\\n      method: 'eth_getEncryptionPublicKey',\\n      params: [account]\\n    });\\n    return encryptionKey;\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n/*\\n * https://eips.ethereum.org/EIPS/eip-1102\\n * https://eips.ethereum.org/EIPS/eip-1193\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n * https://eips.ethereum.org/EIPS/eip-2255\\n * https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n */\\n\\n\\nEthereumLibrary.prototype.detectEthereumProvider = async function () {\\n  var provider = null;\\n\\n  try {\\n    if (typeof globalThis.detectEthereumProvider === 'function') {\\n      provider = await globalThis.detectEthereumProvider({\\n        mustBeMetaMask: true\\n      });\\n\\n      if (provider !== undefined && provider !== null) {\\n        provider.autoRefreshOnNetworkChange = false;\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  if (provider === undefined || provider == null) {\\n    const err = new Error('Please install MetaMask...');\\n    err.name = 'MissingBrowserExtension';\\n    throw err;\\n  }\\n\\n  return provider;\\n};\\n\\nEthereumLibrary.prototype.checkAccountPermission = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof provider.request === 'function') {\\n    const permissions = await provider.request({\\n      method: 'wallet_getPermissions'\\n    });\\n    const accountsPermission = permissions.find(permission => permission.parentCapability === 'eth_accounts');\\n\\n    if (accountsPermission) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n};\\n\\nEthereumLibrary.prototype.requestAccountPermission = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof provider.request === 'function') {\\n    const permissions = await provider.request({\\n      method: 'wallet_requestPermissions',\\n      params: [{\\n        eth_accounts: {}\\n      }]\\n    });\\n    const accountsPermission = permissions.find(permission => permission.parentCapability === 'eth_accounts');\\n\\n    if (accountsPermission) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n};\\n/*\\n * https://docs.metamask.io/guide/provider-migration.html#migrating-to-the-new-provider-api\\n */\\n\\n\\nEthereumLibrary.prototype.getAccount = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  try {\\n    var accounts = null;\\n    var permission = false; // Permission Attempt\\n\\n    try {\\n      permission = await this.checkAccountPermission(provider);\\n\\n      if (permission === false) {\\n        permission = await this.requestAccountPermission(provider);\\n      }\\n    } catch (error) {\\n      if (error.code === 4001) {\\n        throw error;\\n      }\\n\\n      this.getLogger().error(error);\\n    } // Request Accounts attempt\\n\\n\\n    try {\\n      if (permission === false || (await provider._metamask.isUnlocked()) === false) {\\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md\\n        accounts = await provider.request({\\n          method: 'eth_requestAccounts'\\n        });\\n      }\\n\\n      if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n        accounts = await provider.request({\\n          method: 'eth_accounts'\\n        });\\n      }\\n    } catch (error) {\\n      if (error.code === 4001) {\\n        throw error;\\n      }\\n\\n      this.getLogger().error(error);\\n    } // Enable attempt\\n\\n\\n    if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n      if (typeof provider.enable === 'function') {\\n        accounts = await provider.enable();\\n      }\\n    }\\n\\n    if (accounts === undefined || accounts == null || Array.isArray(accounts) === false || accounts.length === 0) {\\n      throw new Error('Unable to retrieve any Ethereum accounts...');\\n    }\\n\\n    await this.accounts(provider, accounts);\\n    return accounts[0];\\n  } catch (error) {\\n    // EIP 1193 user Rejected Request\\n    if (error.code === 4001) {\\n      const err = new Error('Rejected User Request...');\\n      err.name = 'RejectedUserRequest';\\n      throw err;\\n    }\\n\\n    throw error;\\n  }\\n};\\n\\nEthereumLibrary.prototype.getEnabledWeb3Provider = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof globalThis.ethers === 'undefined') {\\n    await this.ipfsBundle.loadEthersJsLibrary();\\n  } // Enable provider\\n  // https://github.com/ethers-io/ethers.js/issues/433\\n\\n\\n  const account = await this.getAccount(provider); // Instantiate a Web3Provider\\n\\n  const web3 = new globalThis.ethers.providers.Web3Provider(provider, 'any'); // Retrieve current network\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId, 16);\\n  return {\\n    account: account,\\n    chainId: chainId,\\n    web3: web3\\n  };\\n};\\n\\nEthereumLibrary.prototype.getWeb3Provider = async function (provider) {\\n  if (provider === undefined || provider == null) {\\n    provider = await this.getEthereumProvider();\\n  }\\n\\n  if (typeof globalThis.ethers === 'undefined') {\\n    await this.ipfsBundle.loadEthersJsLibrary();\\n  } // Instantiate an ethers Web3Provider\\n\\n\\n  const web3 = new globalThis.ethers.providers.Web3Provider(provider, 'any'); // Retrieve current network\\n\\n  const network = await web3.getNetwork();\\n  const chainId = parseInt(network.chainId, 16);\\n  return {\\n    web3: web3,\\n    chainId: chainId\\n  };\\n};\\n\\nexports.EthereumLibrary = EthereumLibrary;\\n\\n},{}],4:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-library.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/esnext.map.delete-all.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.every.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.filter.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.find.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.find-key.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.includes.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.key-of.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.map-keys.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.map-values.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.merge.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.reduce.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.some.js\\\");\\n\\nrequire(\\\"core-js/modules/esnext.map.update.js\\\");\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nrequire(\\\"core-js/modules/es.string.replace.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.js\\\");\\n\\nconst fromString = require('uint8arrays').fromString;\\n\\nconst getIpfs = require('ipfs-provider').getIpfs;\\n\\nconst Mutex = require('async-mutex').Mutex;\\n\\nconst providers = require('ipfs-provider').providers;\\n\\nconst {\\n  httpClient,\\n  windowIpfs\\n} = providers;\\nconst shortTimeout = 4000;\\nconst longTimeout = 4 * 60 * shortTimeout;\\nconst dagDirectory = fromString('\\\\u0008\\\\u0001');\\n/*\\n * https://infura.io/docs\\n * https://cid.ipfs.io\\n * https://github.com/ipfs/js-ipfs/tree/master/docs/core-api\\n **/\\n\\nvar IpfsLibrary = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  this.ipfsClients = new Map();\\n  this.mutex = new Mutex();\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ipfs-library';\\n};\\n\\nIpfsLibrary.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nIpfsLibrary.prototype.add = async function (client, content, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  if (content === undefined || content == null) {\\n    throw new Error('Undefined content...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['add']\\n    });\\n  }\\n\\n  if (client === undefined || client.add === undefined) {\\n    throw new Error('Undefined IPFS add...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      chunker: 'rabin-262144-524288-1048576',\\n      cidVersion: 0,\\n      hashAlg: 'sha2-256',\\n      pin: true,\\n      rawLeaves: false\\n    };\\n  } // 1 - https://github.com/ipfs/go-ipfs/issues/5683\\n  // default chunker: \\\"size-262144\\\"\\n  // chunker: \\\"rabin-262144-524288-1048576\\\"\\n  // 2 - TODO: small content generates an incnsistent cid when cidVersion: 1 is set.\\n  // Not a 'dag-pb' but a 'raw' multicodec instead\\n  // We generate a V0 and convert it to a V1\\n  // https://github.com/xmaysonnave/tiddlywiki-ipfs/issues/14\\n\\n\\n  const result = await client.add(content, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var cid = null;\\n\\n  if (result.cid !== undefined && result.cid !== null) {\\n    cid = result.cid;\\n  }\\n\\n  const mode = result.mode;\\n  const mtime = result.mtime;\\n  var path = null;\\n\\n  if (result.path !== undefined && result.path !== null) {\\n    path = result.path;\\n  }\\n\\n  var size = null;\\n\\n  if (result.size !== undefined && result.size !== null) {\\n    size = result.size;\\n  }\\n\\n  if (cid == null || path == null || size == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  const cidV1 = this.ipfsBundle.cidToCidV1(cid, 'ipfs', true);\\n  return {\\n    cid: cidV1,\\n    mode: mode,\\n    mtime: mtime,\\n    path: path,\\n    size: size\\n  };\\n};\\n\\nIpfsLibrary.prototype.addAll = async function (client, content, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  if (content === undefined || content == null) {\\n    throw new Error('Undefined content...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['addAll']\\n    });\\n  }\\n\\n  if (client === undefined || client.addAll === undefined) {\\n    throw new Error('Undefined IPFS addAll...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      chunker: 'rabin-262144-524288-1048576',\\n      cidVersion: 0,\\n      hashAlg: 'sha2-256',\\n      pin: false,\\n      rawLeaves: false\\n    };\\n  }\\n\\n  const added = new Map();\\n\\n  for await (const result of client.addAll(content, options)) {\\n    if (result === undefined || result == null) {\\n      const err = new Error('IPFS returned an unknown result...');\\n      err.name = 'IPFSUnknownResult';\\n      throw err;\\n    }\\n\\n    var cid = null;\\n\\n    if (result.cid !== undefined && result.cid !== null) {\\n      cid = result.cid;\\n    }\\n\\n    var path = null;\\n\\n    if (result.path !== undefined && result.path !== null) {\\n      path = result.path;\\n    }\\n\\n    const mode = result.mode;\\n    const mtime = result.mtime;\\n    var size = null;\\n\\n    if (result.size !== undefined && result.size !== null) {\\n      size = result.size;\\n    }\\n\\n    if (cid == null || path == null || size == null) {\\n      const err = new Error('IPFS returned an unknown result...');\\n      err.name = 'IPFSUnknownResult';\\n      throw err;\\n    }\\n\\n    const cidV1 = this.ipfsBundle.cidToCidV1(cid);\\n    added.set(cidV1, {\\n      path: path,\\n      mode: mode,\\n      mtime: mtime,\\n      size: size\\n    });\\n  }\\n\\n  return added;\\n};\\n\\nIpfsLibrary.prototype.analyzePinType = function (type) {\\n  type = type !== undefined && type !== null && type.trim() !== '' ? type.trim() : null;\\n\\n  if (type == null) {\\n    return {\\n      parentCid: null,\\n      type: null\\n    };\\n  }\\n\\n  var res = type.split(' ');\\n\\n  if (res.length === 1) {\\n    return {\\n      parentCid: null,\\n      type: res[0]\\n    };\\n  }\\n\\n  if (res.length !== 3 && res.length !== 4) {\\n    throw new Error(`Unknown pin type: ${type}`);\\n  }\\n\\n  const index = res.length % 3;\\n\\n  if (res[index] !== 'indirect') {\\n    throw new Error(`Unknown pin type: ${type}`);\\n  }\\n\\n  if (res[index + 1] !== 'through') {\\n    throw new Error(`Unknown pin type: ${type}`);\\n  }\\n\\n  const parentCid = this.ipfsBundle.getCid(res[index + 2]);\\n\\n  if (parentCid == null) {\\n    throw new Error(`Unknown pin type: ${type}`);\\n  }\\n\\n  return {\\n    parentCid: parentCid,\\n    type: res[0]\\n  };\\n};\\n\\nIpfsLibrary.prototype.dagGet = async function (client, cid, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  cid = this.ipfsBundle.getCid(cid) !== null ? cid : null;\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS cid...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['dag']\\n    });\\n  }\\n\\n  if (client === undefined || client.dag === undefined || client.dag.get === undefined) {\\n    throw new Error('Undefined IPFS dag get...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      localResolve: false\\n    };\\n  }\\n\\n  const result = await client.dag.get(cid, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return result;\\n}; // https://discuss.ipfs.io/t/what-is-the-data-in-object/5221\\n// https://github.com/ipfs/go-unixfs/blob/master/pb/unixfs.pb.go\\n\\n\\nIpfsLibrary.prototype.dagPut = async function (client, dagNode, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  if (dagNode === undefined || dagNode == null) {\\n    throw new Error('Undefined DAG node...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['dag']\\n    });\\n  }\\n\\n  if (client === undefined || client.dag === undefined || client.dag.put === undefined) {\\n    throw new Error('Undefined IPFS dag put...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      format: 'dag-pb',\\n      hashAlg: 'sha2-256',\\n      pin: false\\n    };\\n  }\\n\\n  const result = await client.dag.put(dagNode, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  const stat = await this.objectStat(client, result, options.timeout);\\n  const cidV1 = this.ipfsBundle.cidToCidV1(result);\\n  return {\\n    cid: `${cidV1}`,\\n    size: stat.CumulativeSize\\n  };\\n};\\n\\nIpfsLibrary.prototype.dagResolve = async function (client, ipfsPath, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null;\\n\\n  if (this.ipfsBundle.getCid(ipfsPath) == null) {\\n    ipfsPath = ipfsPath.replace(/\\\\/$/, '');\\n  }\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['dag']\\n    });\\n  }\\n\\n  if (client === undefined || client.dag === undefined || client.dag.resolve === undefined) {\\n    throw new Error('Undefined IPFS dag resolve...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  var result = null;\\n\\n  if (timeout == null) {\\n    result = await client.dag.resolve(ipfsPath);\\n  } else {\\n    result = await client.dag.resolve(ipfsPath, {\\n      timeout: timeout\\n    });\\n  }\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var cid = null;\\n\\n  if (result.cid !== undefined && result.cid !== null) {\\n    cid = result.cid;\\n  }\\n\\n  var remainderPath = null;\\n\\n  if (result.remainderPath !== undefined && result.remainderPath !== null) {\\n    remainderPath = result.remainderPath;\\n  }\\n\\n  if (cid == null || remainderPath == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  const cidV1 = this.ipfsBundle.cidToCidV1(cid);\\n  return {\\n    cid: cidV1,\\n    remainderPath: remainderPath\\n  };\\n};\\n\\nIpfsLibrary.prototype.filesStat = async function (client, ipfsPath, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.trim() !== '' ? ipfsPath.trim() : null;\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['files']\\n    });\\n  }\\n\\n  if (client === undefined || client.files === undefined || client.files.stat === undefined) {\\n    throw new Error('Undefined IPFS files stat...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  var result = null;\\n\\n  if (timeout == null) {\\n    result = await client.files.stat(ipfsPath);\\n  } else {\\n    result = await client.files.stat(ipfsPath, {\\n      timeout: timeout\\n    });\\n  }\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var cid = null;\\n\\n  if (result.cid !== undefined && result.cid !== null) {\\n    cid = result.cid;\\n  }\\n\\n  var blocks = null;\\n\\n  if (result.blocks !== undefined && result.blocks !== null) {\\n    blocks = result.blocks;\\n  }\\n\\n  var cumulativeSize = null;\\n\\n  if (result.cumulativeSize !== undefined && result.cumulativeSize !== null) {\\n    cumulativeSize = result.cumulativeSize;\\n  }\\n\\n  var local = null;\\n\\n  if (result.local !== undefined && result.local !== null) {\\n    local = result.local;\\n  }\\n\\n  var size = null;\\n\\n  if (result.size !== undefined && result.size !== null) {\\n    size = result.size;\\n  }\\n\\n  var sizeLocal = null;\\n\\n  if (result.sizeLocal !== undefined && result.sizeLocal !== null) {\\n    sizeLocal = result.sizeLocal;\\n  }\\n\\n  var type = null;\\n\\n  if (result.type !== undefined && result.type !== null) {\\n    type = result.type;\\n  }\\n\\n  var withLocality = null;\\n\\n  if (result.withLocality !== undefined && result.withLocality !== null) {\\n    withLocality = result.withLocality;\\n  }\\n\\n  if (cid == null || blocks == null || cumulativeSize == null || size == null || type == null || withLocality == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  if (withLocality) {\\n    if (local == null || sizeLocal == null) {\\n      const err = new Error('IPFS returned an unknown result...');\\n      err.name = 'IPFSUnknownResult';\\n      throw err;\\n    }\\n  }\\n\\n  const cidV1 = this.ipfsBundle.cidToCidV1(cid);\\n  return {\\n    cid: cidV1,\\n    blocks: blocks,\\n    cumulativeSize: cumulativeSize,\\n    local: local,\\n    size: size,\\n    sizeLocal: sizeLocal,\\n    type: type,\\n    withLocality: withLocality\\n  };\\n}; // https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/KEY.md#keygen\\n// https://github.com/libp2p/js-libp2p-crypto/issues/145\\n\\n\\nIpfsLibrary.prototype.genKey = async function (client, ipnsKey) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.trim() !== '' ? ipnsKey.trim() : null;\\n\\n  if (ipnsKey == null) {\\n    throw new Error('Undefined IPNS key...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['key']\\n    });\\n  }\\n\\n  if (client === undefined || client.key === undefined || client.key.gen === undefined) {\\n    throw new Error('Undefined IPFS key gen...');\\n  }\\n\\n  const key = await client.key.gen(ipnsKey, {\\n    type: 'ed25519'\\n  });\\n\\n  if (key === undefined || key == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var ipnsCid = null;\\n\\n  if (key.id !== undefined && key.id !== null) {\\n    ipnsCid = key.id;\\n  }\\n\\n  if (ipnsCid == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return ipnsCid;\\n};\\n\\nIpfsLibrary.prototype.get = async function (client, ipfsPath, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null;\\n\\n  if (this.ipfsBundle.getCid(ipfsPath) == null) {\\n    ipfsPath = ipfsPath.replace(/\\\\/$/, '');\\n  }\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['get']\\n    });\\n  }\\n\\n  if (client === undefined || client.get === undefined) {\\n    throw new Error('Undefined IPFS get...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  const content = [];\\n\\n  if (timeout == null) {\\n    for await (const file of client.get(ipfsPath)) {\\n      if (file.content === undefined || file.content == null) {\\n        const err = new Error('IPFS returned an unknown result...');\\n        err.name = 'IPFSUnknownResult';\\n        throw err;\\n      }\\n\\n      for await (const chunk of file.content) {\\n        content.push(chunk);\\n      }\\n    }\\n  } else {\\n    for await (const file of client.get(ipfsPath, {\\n      timeout: timeout\\n    })) {\\n      if (file.content === undefined || file.content == null) {\\n        const err = new Error('IPFS returned an unknown result...');\\n        err.name = 'IPFSUnknownResult';\\n        throw err;\\n      }\\n\\n      for await (const chunk of file.content) {\\n        content.push(chunk);\\n      }\\n    }\\n  }\\n\\n  return content;\\n}; // Default\\n\\n\\nIpfsLibrary.prototype.getDefaultIpfs = async function (apiUrl) {\\n  // IPFS Companion first\\n  try {\\n    const {\\n      ipfs,\\n      provider\\n    } = await this.getWindowIpfs();\\n\\n    if (ipfs !== null) {\\n      return {\\n        ipfs: ipfs,\\n        provider: provider\\n      };\\n    }\\n  } catch (error) {// IPFS Companion failed\\n  } // Load IpfsHttpClient\\n\\n\\n  try {\\n    const {\\n      ipfs,\\n      provider\\n    } = await this.getHttpIpfs(apiUrl);\\n\\n    if (ipfs !== null) {\\n      return {\\n        ipfs: ipfs,\\n        provider: provider\\n      };\\n    }\\n  } catch (error) {// IPFS HTTP client failed\\n  }\\n\\n  throw new Error('Unable to retrieve IPFS Companion and IPFS API URL...');\\n}; // ipfs-http-client\\n\\n\\nIpfsLibrary.prototype.getHttpIpfs = async function (apiUrl) {\\n  apiUrl = apiUrl !== undefined && apiUrl !== null && apiUrl.toString().trim() !== '' ? apiUrl : null;\\n\\n  if (apiUrl == null) {\\n    throw new Error('Undefined IPFS API URL...');\\n  }\\n\\n  if (apiUrl instanceof URL === false) {\\n    apiUrl = this.ipfsBundle.getUrl(apiUrl);\\n  }\\n\\n  const self = this;\\n\\n  try {\\n    if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n      await this.ipfsBundle.loadIpfsHttpLibrary();\\n    }\\n\\n    const client = this.ipfsClients.get(apiUrl.toString());\\n\\n    if (client !== undefined) {\\n      return {\\n        ipfs: client.ipfs,\\n        provider: client.provider\\n      };\\n    }\\n\\n    const {\\n      ipfs,\\n      provider\\n    } = await this.mutex.runExclusive(async () => {\\n      const protocol = apiUrl.protocol.slice(0, -1);\\n      var port = apiUrl.port;\\n\\n      if (port === undefined || port == null || port.trim() === '') {\\n        port = 443;\\n\\n        if (protocol === 'http') {\\n          port = 80;\\n        }\\n      }\\n\\n      const client = self.ipfsClients.get(apiUrl.toString());\\n\\n      if (client !== undefined) {\\n        return {\\n          ipfs: client.ipfs,\\n          provider: client.provider\\n        };\\n      }\\n\\n      const {\\n        ipfs,\\n        provider\\n      } = await getIpfs({\\n        providers: [httpClient({\\n          // loadHttpClientModule: () => require('ipfs-http-client'),\\n          loadHttpClientModule: () => globalThis.IpfsHttpClient.create,\\n          apiAddress: {\\n            protocol: protocol,\\n            host: apiUrl.hostname,\\n            port: port,\\n            timeout: $tw.utils.getLongTimeout()\\n          }\\n        })]\\n      });\\n      self.ipfsClients.set(apiUrl.toString(), {\\n        ipfs,\\n        provider\\n      });\\n      $tw.ipfs.getLogger().info(`New IPFS provider: \\\"${apiUrl}\\\"`);\\n      return {\\n        ipfs: ipfs,\\n        provider: provider\\n      };\\n    });\\n    return {\\n      ipfs: ipfs,\\n      provider: `${provider}, ${apiUrl}`\\n    };\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n}; // IPFS companion\\n\\n\\nIpfsLibrary.prototype.getWindowIpfs = async function () {\\n  try {\\n    this.getLogger().info('Processing connection to IPFS Companion...');\\n    const {\\n      ipfs,\\n      provider\\n    } = await getIpfs({\\n      providers: [windowIpfs()]\\n    });\\n    return {\\n      ipfs: ipfs,\\n      provider: provider\\n    };\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  throw new Error('Unreachable IPFS Companion...');\\n};\\n\\nIpfsLibrary.prototype.hasPin = async function (client, key, type, ipfsPath) {\\n  try {\\n    if (ipfsPath) {\\n      ipfsPath = `${key}${ipfsPath}`;\\n    } else {\\n      ipfsPath = key;\\n    }\\n\\n    for await (var {\\n      cid,\\n      type: fetchedType\\n    } of client.pin.ls({\\n      paths: [ipfsPath]\\n    })) {\\n      if (cid !== undefined && cid !== null) {\\n        var {\\n          type: fetchedType,\\n          parentCid\\n        } = this.analyzePinType(fetchedType);\\n        const cidV1 = this.ipfsBundle.cidToCidV1(cid);\\n        const parentCidV1 = parentCid !== null ? this.ipfsBundle.cidToCidV1(parentCid) : null;\\n\\n        if (type) {\\n          if (type === fetchedType) {\\n            return {\\n              cid: cidV1,\\n              parentCid: parentCidV1,\\n              type: type\\n            };\\n          }\\n        }\\n\\n        return {\\n          cid: cidV1,\\n          parentCid: parentCidV1,\\n          type: fetchedType\\n        };\\n      }\\n    }\\n  } catch (error) {// Ignore\\n  }\\n\\n  return {\\n    cid: '',\\n    parentCid: null,\\n    type: ''\\n  };\\n};\\n\\nIpfsLibrary.prototype.isDirectory = function (ua) {\\n  if (ua.byteLength !== dagDirectory.byteLength) return false;\\n  return ua.every((val, i) => val === dagDirectory[i]);\\n};\\n\\nIpfsLibrary.prototype.isIpfsDirectory = async function (client, cid, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  cid = this.ipfsBundle.getCid(cid) !== null ? cid : null;\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS cid...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  var stat = null;\\n\\n  if (timeout == null) {\\n    stat = await this.objectStat(client, cid);\\n  } else {\\n    stat = await this.objectStat(client, cid, timeout);\\n  }\\n\\n  if (stat.DataSize === 2) {\\n    var ua = null;\\n\\n    if (timeout == null) {\\n      ua = await this.objectData(client, cid);\\n    } else {\\n      ua = await this.objectData(client, cid, timeout);\\n    }\\n\\n    return this.isDirectory(ua);\\n  }\\n\\n  return false;\\n};\\n\\nIpfsLibrary.prototype.keyList = async function (client) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['key']\\n    });\\n  }\\n\\n  if (client === undefined || client.key === undefined || client.key.list === undefined) {\\n    throw new Error('Undefined IPFS key list...');\\n  }\\n\\n  const result = await client.key.list();\\n\\n  if (result === undefined || result == null || Array.isArray(result) === false) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return result;\\n};\\n\\nIpfsLibrary.prototype.keyRename = async function (client, oldIpnsKey, newIpnsKey) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  oldIpnsKey = oldIpnsKey !== undefined && oldIpnsKey !== null || oldIpnsKey.trim() !== '' ? oldIpnsKey.trim() : null;\\n\\n  if (oldIpnsKey == null) {\\n    throw new Error('Undefined Old IPNS key...');\\n  }\\n\\n  newIpnsKey = newIpnsKey !== undefined && newIpnsKey !== null && newIpnsKey.trim() !== '' ? newIpnsKey.trim() : null;\\n\\n  if (newIpnsKey == null) {\\n    throw new Error('Undefined New IPNS key...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['key']\\n    });\\n  }\\n\\n  if (client === undefined || client.key === undefined || client.key.rename === undefined) {\\n    throw new Error('Undefined IPFS key rename...');\\n  }\\n\\n  const key = await client.key.rename(oldIpnsKey, newIpnsKey);\\n\\n  if (key === undefined || key == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var ipnsCid = null;\\n\\n  if (key.id !== undefined && key.id !== null) {\\n    ipnsCid = key.id;\\n  }\\n\\n  var was = null;\\n\\n  if (key.was !== undefined && key.was !== null) {\\n    was = key.was;\\n  }\\n\\n  var now = null;\\n\\n  if (key.now !== undefined && key.now !== null) {\\n    now = key.now;\\n  }\\n\\n  var overwrite = null;\\n\\n  if (key.overwrite !== undefined && key.overwrite !== null) {\\n    overwrite = key.overwrite;\\n  }\\n\\n  if (ipnsCid == null || was == null || now == null || overwrite == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return {\\n    ipnsCid: ipnsCid,\\n    now: now,\\n    overwrite: overwrite,\\n    was: was\\n  };\\n};\\n\\nIpfsLibrary.prototype.ls = async function (client, ipfsPath) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null;\\n\\n  if (this.ipfsBundle.getCid(ipfsPath) == null) {\\n    ipfsPath = ipfsPath.replace(/\\\\/$/, '');\\n  }\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['ls']\\n    });\\n  }\\n\\n  if (client === undefined || client.ls === undefined) {\\n    throw new Error('Undefined IPFS ls...');\\n  }\\n\\n  const content = new Map();\\n\\n  for await (const result of client.ls(ipfsPath)) {\\n    if (result === undefined || result == null) {\\n      const err = new Error('IPFS returned an unknown result...');\\n      err.name = 'IPFSUnknownResult';\\n      throw err;\\n    }\\n\\n    var cid = null;\\n\\n    if (result.cid !== undefined && result.cid !== null) {\\n      cid = result.cid;\\n    }\\n\\n    var depth = null;\\n\\n    if (result.depth !== undefined && result.depth !== null) {\\n      depth = result.depth;\\n    }\\n\\n    const mode = result.mode;\\n    const mtime = result.mtime;\\n    var name = null;\\n\\n    if (result.name !== undefined && result.name !== null) {\\n      name = result.name;\\n    }\\n\\n    var path = null;\\n\\n    if (result.path !== undefined && result.path !== null) {\\n      path = result.path;\\n    }\\n\\n    var size = null;\\n\\n    if (result.size !== undefined && result.size !== null) {\\n      size = result.size;\\n    }\\n\\n    var type = null;\\n\\n    if (result.type !== undefined && result.type !== null) {\\n      type = result.type;\\n    }\\n\\n    if (cid == null || depth == null || name == null || path == null || size == null || type == null) {\\n      const err = new Error('IPFS returned an unknown result...');\\n      err.name = 'IPFSUnknownResult';\\n      throw err;\\n    }\\n\\n    const cidV1 = this.ipfsBundle.cidToCidV1(cid);\\n    content.set(cidV1, {\\n      depth: depth,\\n      mode: mode,\\n      mtime: mtime,\\n      name: name,\\n      path: path,\\n      size: size,\\n      type: type\\n    });\\n  }\\n\\n  return content;\\n};\\n\\nIpfsLibrary.prototype.namePublish = async function (client, ipnsKey, cid, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.trim() !== '' ? ipnsKey.trim() : null;\\n\\n  if (ipnsKey == null) {\\n    throw new Error('Undefined IPNS key...');\\n  }\\n\\n  cid = this.ipfsBundle.getCid(cid) !== null ? cid : null;\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS identifier...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['name']\\n    });\\n  }\\n\\n  if (client === undefined || client.name === undefined || client.name.publish === undefined) {\\n    throw new Error('Undefined IPFS name publish...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      resolve: false,\\n      key: ipnsKey,\\n      allowOffline: false\\n    };\\n  }\\n\\n  const result = await client.name.publish(`/ipfs/${cid}`, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var name = null;\\n\\n  if (result.name !== undefined && result.name !== null) {\\n    name = result.name;\\n  }\\n\\n  var value = null;\\n\\n  if (result.value !== undefined && result.value !== null) {\\n    value = result.value;\\n  }\\n\\n  if (name == null || value == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return {\\n    name: name,\\n    value: value\\n  };\\n};\\n\\nIpfsLibrary.prototype.nameResolve = async function (client, value, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  value = value !== undefined && value !== null && value.trim() !== '' ? value.trim() : null;\\n\\n  if (value == null) {\\n    throw new Error('Undefined IPNS address...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['name']\\n    });\\n  }\\n\\n  if (client === undefined || client.name === undefined || client.name.resolve === undefined) {\\n    throw new Error('Undefined IPFS name resolve...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      nocache: false,\\n      recursive: true\\n    };\\n  }\\n\\n  const resolvedPaths = await client.name.resolve(value, options);\\n\\n  if (resolvedPaths === undefined || resolvedPaths == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var lastPath = null; // https://gist.github.com/alanshaw/04b2ddc35a6fff25c040c011ac6acf26\\n\\n  for await (const path of resolvedPaths) {\\n    lastPath = path !== undefined || path !== null ? path : null;\\n  }\\n\\n  if (lastPath == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return lastPath;\\n};\\n\\nIpfsLibrary.prototype.objectData = async function (client, cid, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  cid = this.ipfsBundle.getCid(cid) !== null ? cid : null;\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS identifier...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['object']\\n    });\\n  }\\n\\n  if (client === undefined || client.object === undefined || client.object.data === undefined) {\\n    throw new Error('Undefined IPFS object data...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  var ua = null;\\n\\n  if (timeout == null) {\\n    ua = await client.object.data(cid);\\n  } else {\\n    ua = await client.object.data(cid, {\\n      timeout: timeout\\n    });\\n  }\\n\\n  if (ua === undefined || ua == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return ua;\\n};\\n\\nIpfsLibrary.prototype.objectStat = async function (client, cid, timeout) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  cid = this.ipfsBundle.getCid(cid) !== null ? cid : null;\\n\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS identifier...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['object']\\n    });\\n  }\\n\\n  if (client === undefined || client.object === undefined || client.object.stat === undefined) {\\n    throw new Error('Undefined IPFS object stat...');\\n  }\\n\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null;\\n  var stat = null;\\n\\n  if (timeout == null) {\\n    stat = await client.object.stat(cid);\\n  } else {\\n    stat = await client.object.stat(cid, {\\n      timeout: timeout\\n    });\\n  }\\n\\n  if (stat === undefined || stat == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var Hash = null;\\n\\n  if (stat.Hash !== undefined && stat.Hash !== null) {\\n    Hash = stat.Hash;\\n  }\\n\\n  var NumLinks = null;\\n\\n  if (stat.NumLinks !== undefined && stat.NumLinks !== null) {\\n    NumLinks = stat.NumLinks;\\n  }\\n\\n  var BlockSize = null;\\n\\n  if (stat.BlockSize !== undefined && stat.BlockSize !== null) {\\n    BlockSize = stat.BlockSize;\\n  }\\n\\n  var LinksSize = null;\\n\\n  if (stat.LinksSize !== undefined && stat.LinksSize !== null) {\\n    LinksSize = stat.LinksSize;\\n  }\\n\\n  var DataSize = null;\\n\\n  if (stat.DataSize !== undefined && stat.DataSize !== null) {\\n    DataSize = stat.DataSize;\\n  }\\n\\n  var CumulativeSize = null;\\n\\n  if (stat.CumulativeSize !== undefined && stat.CumulativeSize !== null) {\\n    CumulativeSize = stat.CumulativeSize;\\n  }\\n\\n  if (Hash == null || NumLinks == null || BlockSize == null || LinksSize == null || DataSize == null || CumulativeSize == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  const cidV1 = this.ipfsBundle.cidToCidV1(Hash);\\n  return {\\n    Hash: cidV1,\\n    NumLinks: NumLinks,\\n    BlockSize: BlockSize,\\n    LinksSize: LinksSize,\\n    DataSize: DataSize,\\n    CumulativeSize: CumulativeSize\\n  };\\n};\\n\\nIpfsLibrary.prototype.pinAdd = async function (client, ipfsPath, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null;\\n\\n  if (this.ipfsBundle.getCid(ipfsPath) == null) {\\n    ipfsPath = ipfsPath.replace(/\\\\/$/, '');\\n  }\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['pin']\\n    });\\n  }\\n\\n  if (client === undefined || client.pin === undefined || client.pin.add === undefined) {\\n    throw new Error('Undefined IPFS pin add...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      recursive: true\\n    };\\n  }\\n\\n  const result = await client.pin.add(ipfsPath, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return this.ipfsBundle.cidToCidV1(result, 'ipfs', true);\\n};\\n\\nIpfsLibrary.prototype.pinRm = async function (client, ipfsPath, options) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null;\\n\\n  if (this.ipfsBundle.getCid(ipfsPath) == null) {\\n    ipfsPath = ipfsPath.replace(/\\\\/$/, '');\\n  }\\n\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['pin']\\n    });\\n  }\\n\\n  if (client === undefined || client.pin === undefined || client.pin.rm === undefined) {\\n    throw new Error('Undefined IPFS pin rm...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      recursive: true\\n    };\\n  }\\n\\n  const result = await client.pin.rm(ipfsPath, options);\\n\\n  if (result === undefined || result == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return this.ipfsBundle.cidToCidV1(result, 'ipfs', true);\\n};\\n\\nIpfsLibrary.prototype.rmKey = async function (client, ipnsKey) {\\n  if (client === undefined || client == null) {\\n    throw new Error('Undefined IPFS provider...');\\n  }\\n\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.trim() !== '' ? ipnsKey.trim() : null;\\n\\n  if (ipnsKey == null) {\\n    throw new Error('Undefined IPNS key...');\\n  }\\n\\n  if (client.enable) {\\n    client = await client.enable({\\n      commands: ['key']\\n    });\\n  }\\n\\n  if (client === undefined || client.key === undefined || client.key.rm === undefined) {\\n    throw new Error('Undefined IPFS key rm...');\\n  }\\n\\n  const key = await client.key.rm(ipnsKey);\\n\\n  if (key === undefined || key == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  var ipnsCid = null;\\n\\n  if (key.id !== undefined && key.id !== null) {\\n    ipnsCid = key.id;\\n  }\\n\\n  if (ipnsCid == null) {\\n    const err = new Error('IPFS returned an unknown result...');\\n    err.name = 'IPFSUnknownResult';\\n    throw err;\\n  }\\n\\n  return ipnsCid;\\n};\\n\\nexports.IpfsLibrary = IpfsLibrary;\\n\\n},{\\\"async-mutex\\\":11,\\\"core-js/modules/es.string.replace.js\\\":133,\\\"core-js/modules/esnext.map.delete-all.js\\\":136,\\\"core-js/modules/esnext.map.every.js\\\":137,\\\"core-js/modules/esnext.map.filter.js\\\":138,\\\"core-js/modules/esnext.map.find-key.js\\\":139,\\\"core-js/modules/esnext.map.find.js\\\":140,\\\"core-js/modules/esnext.map.includes.js\\\":141,\\\"core-js/modules/esnext.map.key-of.js\\\":142,\\\"core-js/modules/esnext.map.map-keys.js\\\":143,\\\"core-js/modules/esnext.map.map-values.js\\\":144,\\\"core-js/modules/esnext.map.merge.js\\\":145,\\\"core-js/modules/esnext.map.reduce.js\\\":146,\\\"core-js/modules/esnext.map.some.js\\\":147,\\\"core-js/modules/esnext.map.update.js\\\":148,\\\"core-js/modules/web.dom-collections.iterator.js\\\":149,\\\"core-js/modules/web.url.js\\\":151,\\\"ipfs-provider\\\":161,\\\"uint8arrays\\\":204}],5:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-loader.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.js\\\");\\n\\nrequire(\\\"core-js/modules/es.typed-array.uint8-array.js\\\");\\n\\nconst Mutex = require('async-mutex').Mutex;\\n\\nvar IpfsLoader = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  this.mutex = new Mutex();\\n  this.name = 'ipfs-loader';\\n};\\n\\nIpfsLoader.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n}; // https://github.com/liriliri/eruda\\n\\n\\nIpfsLoader.prototype.loadErudaLibrary = async function () {\\n  if (typeof globalThis.eruda === 'undefined') {\\n    await this.loadTiddlerLibrary('$:/ipfs/library/eruda', 'eruda', true);\\n  }\\n}; // https://github.com/ethers-io/ethers.js/\\n\\n\\nIpfsLoader.prototype.loadEtherJsLibrary = async function () {\\n  if (typeof globalThis.ethers === 'undefined') {\\n    await this.loadTiddlerLibrary('$:/ipfs/library/ethers', 'ethers', true);\\n  }\\n}; // https://github.com/xmaysonnave/eth-sig-util\\n\\n\\nIpfsLoader.prototype.loadEthSigUtilLibrary = async function () {\\n  if (typeof globalThis.sigUtil === 'undefined') {\\n    await this.loadTiddlerLibrary('$:/ipfs/library/eth-sig-util', 'sigUtil', true);\\n  }\\n}; // https://github.com/ipfs/js-ipfs-http-client\\n\\n\\nIpfsLoader.prototype.loadIpfsHttpLibrary = async function () {\\n  if (typeof globalThis.IpfsHttpClient === 'undefined') {\\n    await this.loadTiddlerLibrary('$:/ipfs/library/ipfs-http-client', 'IpfsHttpClient', true);\\n  }\\n};\\n/*eslint no-new:\\\"off\\\",no-new-func:\\\"off\\\"*/\\n\\n\\nIpfsLoader.prototype.supportDynamicImport = function () {\\n  try {\\n    new Function('import(\\\"\\\")');\\n    return true;\\n  } catch (error) {\\n    return false;\\n  }\\n}; // https://www.srihash.org/\\n\\n\\nIpfsLoader.prototype.loadTiddlerLibrary = async function (title, obj, isModule) {\\n  if (globalThis[obj] !== undefined && globalThis[obj] !== null) {\\n    return;\\n  }\\n\\n  const self = this;\\n  const tiddler = $tw.wiki.getTiddler(title);\\n\\n  if (tiddler === undefined || tiddler == null) {\\n    throw new Error(`Undefined Library: ${title}`);\\n  }\\n\\n  const sourceUri = tiddler.fields._source_uri;\\n  const sourceSri = tiddler.fields._source_sri;\\n  await this.mutex.runExclusive(async () => {\\n    if (globalThis[obj] === undefined || globalThis[obj] == null) {\\n      const loaded = await self.loadLibrary(title, sourceUri, sourceSri, isModule);\\n\\n      if (loaded !== undefined && loaded !== null && globalThis[obj] !== undefined && globalThis[obj] !== null) {\\n        self.getLogger().info(`Loaded ${title}:\\n ${sourceUri}`);\\n        return;\\n      }\\n\\n      throw new Error(`Unable to load Library: ${title}`);\\n    }\\n  });\\n}; // https://observablehq.com/@bryangingechen/dynamic-import-polyfill\\n\\n\\nIpfsLoader.prototype.loadLibrary = function (id, url, sri, isModule) {\\n  // Dynamic import\\n  // if (this.supportDynamicImport()) {\\n  //   try {\\n  //     return new Function(`return import(\\\"${url}\\\")`)();\\n  //   } catch (error) {\\n  //     // Ignore\\n  //   }\\n  // }\\n  const self = this;\\n  return new Promise((resolve, reject) => {\\n    // Process\\n    const script = globalThis.document.createElement('script'); // Functions\\n\\n    const cleanup = () => {\\n      try {\\n        delete globalThis[id];\\n        script.onerror = null;\\n        script.onload = null;\\n        script.remove();\\n        URL.revokeObjectURL(script.src);\\n        script.src = '';\\n      } catch (error) {\\n        self.getLogger().error(error);\\n      }\\n    };\\n\\n    script.onload = () => {\\n      resolve(globalThis[id]);\\n      cleanup();\\n    };\\n\\n    script.onerror = () => {\\n      reject(new Error(`Failed to load: ${url}`));\\n      cleanup();\\n    }; // Attributes\\n\\n\\n    if (isModule) {\\n      script.type = 'module';\\n    } else {\\n      script.type = 'text/javascript';\\n    }\\n\\n    script.id = id;\\n    script.async = false;\\n    script.defer = 'defer';\\n\\n    if (sri) {\\n      script.integrity = sri;\\n    }\\n\\n    script.crossOrigin = 'anonymous'; // URL\\n\\n    script.src = url; // Load\\n\\n    globalThis.document.head.appendChild(script);\\n  });\\n};\\n\\nIpfsLoader.prototype.isJson = function (content) {\\n  if (content !== undefined && content !== null && typeof content === 'string') {\\n    try {\\n      JSON.parse(content);\\n      return true;\\n    } catch (error) {// Ignore\\n    }\\n  }\\n\\n  return false;\\n};\\n\\nIpfsLoader.prototype.fetchUint8Array = async function (url) {\\n  var options = null;\\n  const optionsController = new AbortController();\\n  const optionsId = globalThis.setTimeout(() => optionsController.abort(), $tw.utils.getLongTimeout()); // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\\n\\n  var fetchHeaders = {\\n    'Accept-Encoding': 'identity;q=0\\\", *;q=0'\\n  };\\n\\n  try {\\n    const params = {\\n      method: 'options',\\n      signal: optionsController.signal\\n    };\\n    options = await fetch(url, params);\\n\\n    if (options === undefined || options == null || options.ok === false) {\\n      throw new Error(`Unexpected response ${options.statusText}`);\\n    }\\n  } catch (error) {\\n    if (error.name === 'AbortError') {\\n      $tw.boot.getLogger().error(`*** Timeout exceeded: ${$tw.utils.getLongTimeout()} ms ***`);\\n    } else {\\n      $tw.boot.getLogger().error(`*** Options error: ${error.message} ***`);\\n    }\\n  }\\n\\n  globalThis.clearTimeout(optionsId);\\n\\n  try {\\n    const responseController = new AbortController();\\n    const responseId = globalThis.setTimeout(() => responseController.abort(), $tw.utils.getLongTimeout()); // https://fetch.spec.whatwg.org/#cors-safelisted-method\\n    // https://fetch.spec.whatwg.org/#cors-safelisted-request-header\\n\\n    const params = {\\n      headers: fetchHeaders,\\n      method: 'get',\\n      mode: 'no-cors',\\n      signal: responseController.signal\\n    };\\n    var newUrl = null;\\n\\n    if (options && options.ok && options.url) {\\n      newUrl = new URL(options.url);\\n    }\\n\\n    if (options && options.ok && newUrl == null && options.headers.get('Location') !== undefined) {\\n      newUrl = new URL(options.headers.get('Location'));\\n    }\\n\\n    if (newUrl == null) {\\n      newUrl = url;\\n    }\\n\\n    const response = await fetch(newUrl, params);\\n    globalThis.clearTimeout(responseId);\\n\\n    if (response === undefined || response == null || response.ok === false) {\\n      throw new Error(`Unexpected response ${response.statusText}`);\\n    }\\n\\n    if ($tw.browser && !$tw.node) {\\n      const ab = await response.arrayBuffer();\\n      const ua = new Uint8Array(ab);\\n      this.getLogger().info(`[${response.status}] Loaded:\\n ${response.url}`);\\n      return ua;\\n    }\\n\\n    return await response.buffer();\\n  } catch (error) {\\n    if (error.name === 'AbortError') {\\n      this.getLogger().error(`*** Timeout exceeded: ${$tw.utils.getLongTimeout()} ms ***`);\\n    } else {\\n      this.getLogger().error(`*** [${error.message}] ${$tw.language.getString('NetworkError/Fetch')} ***`);\\n    }\\n  }\\n\\n  throw new Error(`${$tw.language.getString('NetworkError/Fetch')}`);\\n};\\n\\nIpfsLoader.prototype.xhrToJson = async function (url) {\\n  return await this.httpRequest(url, 'post', 'json');\\n};\\n\\nIpfsLoader.prototype.xhrToUint8Array = async function (url) {\\n  return await this.httpRequest(url, 'get', 'arraybuffer');\\n};\\n\\nIpfsLoader.prototype.httpRequest = function (url, method, responseType) {\\n  const self = this;\\n  const xhr = new XMLHttpRequest();\\n  return new Promise(function (resolve, reject) {\\n    xhr.responseType = responseType;\\n\\n    xhr.onreadystatechange = function () {\\n      if (xhr.readyState === 4 && xhr.status !== 0) {\\n        if (xhr.status >= 300) {\\n          reject(new Error($tw.language.getString('NetworkError/Fetch')));\\n          return;\\n        }\\n\\n        try {\\n          var result = null;\\n\\n          if (responseType === 'arraybuffer') {\\n            result = new Uint8Array(this.response);\\n          } else {\\n            result = this.response;\\n          }\\n\\n          self.getLogger().info(`[${xhr.status}] Loaded:\\n ${xhr.responseURL}`);\\n          resolve(result);\\n        } catch (error) {\\n          reject(error);\\n        }\\n      }\\n    };\\n\\n    xhr.onerror = function () {\\n      reject(new Error($tw.language.getString('NetworkError/Fetch')));\\n    };\\n\\n    try {\\n      xhr.open(method, url, true);\\n      xhr.send();\\n    } catch (error) {\\n      reject(error);\\n    }\\n  });\\n};\\n\\nIpfsLoader.prototype.checkMessage = async function (message, keccak256, signature) {\\n  message = message !== undefined && message !== null && message.trim() !== '' ? message.trim() : null;\\n\\n  if (message == null) {\\n    throw new Error('Undefined encrypted content...');\\n  }\\n\\n  if (keccak256) {\\n    const hash = $tw.crypto.keccak256(message);\\n\\n    if (keccak256 !== hash) {\\n      throw new Error('Tampered encrypted content, signature do not match...');\\n    }\\n  }\\n\\n  if (signature) {\\n    try {\\n      const recovered = await this.ipfsBundle.personalRecover(keccak256, signature);\\n      $tw.ipfs.getLogger().info(`Signed from: https://app.ens.domains/address/${recovered}`);\\n      $tw.utils.alert(this.name, `Signed from: <a class=\\\"tc-tiddlylink-external\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"https://app.ens.domains/address/${recovered}\\\">${recovered}</a>`);\\n    } catch (error) {\\n      if (error.name === 'UnrecoverableSignature') {\\n        throw new Error(`Tampered encrypted content. ${error.message}`);\\n      }\\n\\n      throw error;\\n    }\\n  }\\n};\\n/**\\n * Load to Base64\\n */\\n\\n\\nIpfsLoader.prototype.loadToBase64 = async function (url, password) {\\n  url = url !== undefined && url !== null && url.toString().trim() !== '' ? url.toString().trim() : null;\\n\\n  if (url == null) {\\n    throw new Error('Undefined URL...');\\n  }\\n\\n  password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null;\\n  const ua = await this.fetchUint8Array(url);\\n\\n  if (ua === undefined || ua == null || ua.length === undefined || ua.length === 0) {\\n    return '';\\n  }\\n\\n  var content = this.ipfsBundle.Utf8ArrayToStr(ua);\\n\\n  if (content.match(/^{\\\"compressed\\\":/)) {\\n    const json = JSON.parse(content);\\n\\n    if (json.compressed.match(/^{\\\"iv\\\":/)) {\\n      if (password == null && $tw.crypto.hasPassword() === false) {\\n        content = await $tw.boot.decryptFromPasswordPrompt(json.compressed);\\n      } else {\\n        content = $tw.crypto.decrypt(json.compressed, password);\\n      }\\n\\n      content = this.ipfsBundle.inflate(content);\\n    } else if (json.compressed.match(/^{\\\"version\\\":/)) {\\n      if (json.signature) {\\n        const signature = await this.ipfsBundle.decrypt(json.signature);\\n        await this.checkMessage(json.compressed, json.keccak256, signature);\\n      }\\n\\n      content = await this.ipfsBundle.decrypt(json.compressed);\\n      content = this.ipfsBundle.inflate(content);\\n    } else {\\n      content = this.ipfsBundle.inflate(json.compressed);\\n    }\\n  } else if (content.match(/^{\\\"encrypted\\\":/)) {\\n    const json = JSON.parse(content);\\n\\n    if (json.signature) {\\n      const signature = await this.ipfsBundle.decrypt(json.signature);\\n      await this.checkMessage(json.encrypted, json.keccak256, signature);\\n    }\\n\\n    content = await this.ipfsBundle.decrypt(json.encrypted);\\n    content = btoa(content);\\n  } else if (content.match(/^{\\\"iv\\\":/)) {\\n    if (password == null && $tw.crypto.hasPassword() === false) {\\n      content = await $tw.boot.decryptFromPasswordPrompt(content);\\n    } else {\\n      content = $tw.crypto.decrypt(content, password);\\n    }\\n\\n    content = btoa(content);\\n  } else {\\n    content = this.ipfsBundle.Uint8ArrayToBase64(ua);\\n  }\\n\\n  return content;\\n};\\n/**\\n * Load to UTF-8\\n */\\n\\n\\nIpfsLoader.prototype.loadToUtf8 = async function (url, password) {\\n  url = url !== undefined && url !== null && url.toString().trim() !== '' ? url.toString().trim() : null;\\n\\n  if (url == null) {\\n    throw new Error('Undefined URL...');\\n  }\\n\\n  password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null;\\n  const ua = await this.fetchUint8Array(url);\\n\\n  if (ua === undefined || ua == null || ua.length === undefined || ua.length === 0) {\\n    return '';\\n  }\\n\\n  var content = this.ipfsBundle.Utf8ArrayToStr(ua);\\n\\n  if (content.match(/^{\\\"compressed\\\":/)) {\\n    const compressedStoreArea = $tw.utils.extractCompressedStoreArea(content);\\n\\n    if (compressedStoreArea) {\\n      content = compressedStoreArea;\\n    }\\n\\n    const json = JSON.parse(content);\\n\\n    if (json.compressed.match(/^{\\\"iv\\\":/)) {\\n      if (password == null && $tw.crypto.hasPassword() === false) {\\n        content = await $tw.boot.decryptFromPasswordPrompt(json.compressed);\\n      } else {\\n        content = $tw.crypto.decrypt(json.compressed, password);\\n      }\\n\\n      content = this.ipfsBundle.inflate(content);\\n    } else if (json.compressed.match(/^{\\\"version\\\":/)) {\\n      if (json.signature) {\\n        const signature = await this.ipfsBundle.decrypt(json.signature);\\n        await this.checkMessage(json.compressed, json.keccak256, signature);\\n      }\\n\\n      content = await this.ipfsBundle.decrypt(json.compressed);\\n      content = this.ipfsBundle.inflate(content);\\n    } else {\\n      content = this.ipfsBundle.inflate(json.compressed);\\n    }\\n  } else if (content.match(/^{\\\"encrypted\\\":/)) {\\n    const encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(content);\\n\\n    if (encryptedStoreArea) {\\n      content = encryptedStoreArea;\\n    }\\n\\n    const json = JSON.parse(content);\\n\\n    if (json.signature) {\\n      const signature = await this.ipfsBundle.decrypt(json.signature);\\n      await this.checkMessage(json.encrypted, json.keccak256, signature);\\n    }\\n\\n    content = await this.ipfsBundle.decrypt(json.encrypted);\\n  } else if (content.match(/^{\\\"iv\\\":/)) {\\n    const encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(content);\\n\\n    if (encryptedStoreArea) {\\n      content = encryptedStoreArea;\\n    }\\n\\n    if (password == null && $tw.crypto.hasPassword() === false) {\\n      content = await $tw.boot.decryptFromPasswordPrompt(content);\\n    } else {\\n      content = $tw.crypto.decrypt(content, password);\\n    }\\n  }\\n\\n  return content;\\n};\\n\\nexports.IpfsLoader = IpfsLoader;\\n\\n},{\\\"async-mutex\\\":11,\\\"core-js/modules/es.typed-array.uint8-array.js\\\":135,\\\"core-js/modules/web.dom-collections.iterator.js\\\":149,\\\"core-js/modules/web.url.js\\\":151}],6:[function(require,module,exports){\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-url.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\n\\\\*/\\n'use strict';\\n\\nrequire(\\\"core-js/modules/web.dom-collections.iterator.js\\\");\\n\\nrequire(\\\"core-js/modules/web.url.js\\\");\\n\\nconst filenamify = require('filenamify');\\n\\nvar IpfsUrl = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle;\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n\\n  this.name = 'ipfs-url';\\n};\\n\\nIpfsUrl.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger();\\n};\\n\\nIpfsUrl.prototype.filenamify = function (filename, options) {\\n  filename = filename !== undefined && filename !== null && filename.trim() !== '' ? filename.trim() : null;\\n\\n  if (filename === null) {\\n    throw new Error('Undefined filename...');\\n  }\\n\\n  if (options === undefined || options == null) {\\n    options = {\\n      replacement: '_'\\n    };\\n  }\\n\\n  return filenamify(filename, options);\\n};\\n\\nIpfsUrl.prototype.getIpfsDefaultApiUrl = function () {\\n  return new URL(this.getIpfsDefaultApi());\\n};\\n\\nIpfsUrl.prototype.getIpfsDefaultGatewayUrl = function () {\\n  return new URL(this.getIpfsDefaultGateway());\\n};\\n\\nIpfsUrl.prototype.getIpfsApiUrl = function () {\\n  try {\\n    return this.getUrl($tw.utils.getIpfsSaverApiUrl());\\n  } catch (error) {\\n    return this.getIpfsDefaultApiUrl();\\n  }\\n};\\n\\nIpfsUrl.prototype.getIpfsGatewayUrl = function () {\\n  try {\\n    return this.getUrl($tw.utils.getIpfsSaverGatewayUrl());\\n  } catch (error) {\\n    return this.getIpfsDefaultGatewayUrl();\\n  }\\n};\\n\\nIpfsUrl.prototype.getIpfsDefaultApi = function () {\\n  return 'https://ipfs.infura.io:5001';\\n};\\n\\nIpfsUrl.prototype.getIpfsDefaultGateway = function () {\\n  return 'https://dweb.link';\\n};\\n/**\\n * url.href;\\n * url.origin\\n * url.protocol;\\n * url.username;\\n * url.password;\\n * url.host;\\n * url.hostname;\\n * url.port;\\n * url.pathname;\\n * url.search;\\n * url.hash;\\n * https://jsdom.github.io/whatwg-url/\\n * https://github.com/stevenvachon/universal-url\\n * https://github.com/stevenvachon/universal-url-lite\\n * https://url.spec.whatwg.org/\\n */\\n\\n\\nIpfsUrl.prototype.getDocumentUrl = function () {\\n  try {\\n    return new URL(globalThis.location.href);\\n  } catch (error) {\\n    this.getLogger().error(error);\\n  }\\n\\n  throw new Error('Invalid current HTML Document URL...');\\n};\\n\\nIpfsUrl.prototype.getUrl = function (url, base) {\\n  try {\\n    if (url instanceof URL) {\\n      return new URL(url.href, base);\\n    }\\n\\n    return new URL(url, base);\\n  } catch (error) {// Ignore\\n  }\\n\\n  if (url) {\\n    throw new Error('Invalid URL...');\\n  }\\n\\n  throw new Error('Undefined URL...');\\n};\\n\\nIpfsUrl.prototype.getIpfsBaseUrl = function () {\\n  var base = this.getIpfsGatewayUrl();\\n\\n  try {\\n    if ($tw.utils.getIpfsUrlPolicy() === 'origin') {\\n      base = this.getDocumentUrl();\\n    }\\n  } catch (error) {\\n    base = this.getIpfsGatewayUrl();\\n  }\\n\\n  return this.getUrl(base);\\n};\\n\\nIpfsUrl.prototype.resolveProtocol = function (value, base) {\\n  value = value !== undefined && value !== null && value.toString().trim() !== '' ? value : null;\\n\\n  if (value instanceof URL === false) {\\n    return value;\\n  }\\n\\n  if (value.protocol !== 'ipfs:' && value.protocol !== 'ipns:') {\\n    return value;\\n  }\\n\\n  if (base === undefined || base == null) {\\n    base = this.getIpfsBaseUrl();\\n  }\\n\\n  var credential = '';\\n  var pathname = '/';\\n  const protocol = value.protocol.slice(0, -1);\\n\\n  if (value.hostname !== undefined && value.hostname !== null && value.hostname.trim() !== '') {\\n    if (value.pathname.startsWith('//')) {\\n      pathname = `/${protocol}/${value.hostname}/${value.pathname.slice(2)}`;\\n    } else {\\n      pathname = `/${protocol}/${value.hostname}${value.pathname}`;\\n    }\\n  } else if (value.pathname !== undefined && value.pathname !== null && value.pathname.trim() !== '') {\\n    if (value.pathname.startsWith('//')) {\\n      pathname = `/${protocol}/${value.pathname.slice(2)}`;\\n    } else {\\n      pathname = `/${protocol}${value.pathname}`;\\n    }\\n  }\\n\\n  if (value.username && value.password) {\\n    credential = `${value.username}:${value.password}@`;\\n  }\\n\\n  return this.getUrl(`${base.protocol}//${credential}${base.host}${pathname}${value.search}${value.hash}`);\\n};\\n\\nIpfsUrl.prototype.getBase = function (base) {\\n  base = base !== undefined && base !== null && base.toString().trim() !== '' ? base.toString().trim() : null;\\n\\n  if (base == null) {\\n    base = this.getIpfsBaseUrl();\\n  }\\n\\n  try {\\n    base = this.getUrl(base);\\n  } catch (error) {\\n    base = this.getIpfsBaseUrl();\\n  } // Resolve\\n\\n\\n  base = this.resolveProtocol(base); // Parse\\n\\n  var {\\n    ipfsCid,\\n    hostname,\\n    ipnsIdentifier\\n  } = this.ipfsBundle.decodeHostname(base.hostname);\\n\\n  if (hostname === undefined || hostname == null || hostname.trim() === '') {\\n    return {\\n      base: base,\\n      ipfsCid: null,\\n      ipnsIdentifier: null\\n    };\\n  }\\n\\n  var credential = '';\\n  const host = base.port ? `${hostname}:${base.port}` : hostname;\\n\\n  if (base.username && base.password) {\\n    credential = `${base.username}:${base.password}@`;\\n  }\\n\\n  const path = `${base.pathname}${base.search}${base.hash}`;\\n\\n  if (ipfsCid !== null || ipnsIdentifier !== null) {\\n    if (ipfsCid !== null) {\\n      base = this.getUrl(`${base.protocol}//${credential}${host}/ipfs/${ipfsCid}${path}`);\\n    } else {\\n      base = this.getUrl(`${base.protocol}//${credential}${host}/ipns/${ipnsIdentifier}${path}`);\\n    }\\n  } else {\\n    base = this.getUrl(`${base.protocol}//${credential}${host}${path}`);\\n  }\\n\\n  return {\\n    base: base,\\n    ipfsCid: ipfsCid,\\n    ipnsIdentifier: ipnsIdentifier\\n  };\\n};\\n\\nIpfsUrl.prototype.normalizeUrl = function (value, base) {\\n  value = value !== undefined && value !== null && value.toString().trim() !== '' ? value.toString().trim() : null;\\n\\n  if (value == null) {\\n    return null;\\n  }\\n\\n  var url = null;\\n  var {\\n    base\\n  } = this.getBase(base); // Text or URL\\n\\n  try {\\n    url = this.getUrl(value);\\n  } catch (error) {\\n    if (value.startsWith('/') === false && value.startsWith('./') === false && value.startsWith('../') === false) {\\n      var text = true;\\n\\n      try {\\n        url = this.getUrl(`https://${value}`);\\n\\n        if (url.hostname.endsWith('.eth') === false && url.hostname.endsWith('.eth.link') === false) {\\n          url = null;\\n        } else {\\n          text = false;\\n        }\\n      } catch (error) {// ignore\\n      }\\n\\n      if (text) {\\n        return null;\\n      }\\n    } else if (value.startsWith('./') || value.startsWith('../')) {\\n      const origin = this.normalizeUrl(this.getDocumentUrl());\\n      const parent = origin.pathname.substring(0, origin.pathname.lastIndexOf('/'));\\n      value = `${parent}/${encodeURI(value)}`;\\n    }\\n  }\\n\\n  if (url == null) {\\n    url = this.getUrl(value, base);\\n  } else if (url.protocol === 'ipfs:' || url.protocol === 'ipns:') {\\n    url = this.resolveProtocol(url, base);\\n  } else {\\n    var credential = '';\\n    var {\\n      base,\\n      ipfsCid,\\n      ipnsIdentifier\\n    } = this.getBase(url);\\n\\n    if (url.username && url.password) {\\n      credential = `${url.username}:${url.password}@`;\\n    }\\n\\n    if (ipfsCid == null && ipnsIdentifier == null) {\\n      url = this.getUrl(`${base.protocol}//${credential}${base.host}${url.pathname}${url.search}${url.hash}`);\\n    } else if (ipfsCid !== null) {\\n      url = this.getUrl(`${base.protocol}//${credential}${base.host}/ipfs/${ipfsCid}${url.pathname}${url.search}${url.hash}`);\\n    } else {\\n      url = this.getUrl(`${base.protocol}//${credential}${base.host}/ipns/${ipnsIdentifier}${url.pathname}${url.search}${url.hash}`);\\n    }\\n  }\\n\\n  if (url.hostname.endsWith('.eth')) {\\n    const hostname = `${url.hostname}.link`;\\n    const host = url.port ? `${hostname}:${url.port}` : hostname;\\n    var credential = '';\\n\\n    if (url.username && url.password) {\\n      credential = `${url.username}:${url.password}@`;\\n    }\\n\\n    url = this.getUrl(`${url.protocol}//${credential}${host}${url.pathname}${url.search}${url.hash}`);\\n  }\\n\\n  return url;\\n};\\n\\nexports.IpfsUrl = IpfsUrl;\\n\\n},{\\\"core-js/modules/web.dom-collections.iterator.js\\\":149,\\\"core-js/modules/web.url.js\\\":151,\\\"filenamify\\\":157}],7:[function(require,module,exports){\\n'use strict'\\n// base-x encoding / decoding\\n// Copyright (c) 2018 base-x contributors\\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\\n// Distributed under the MIT software license, see the accompanying\\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\\nfunction base (ALPHABET) {\\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\\n  var BASE_MAP = new Uint8Array(256)\\n  for (var j = 0; j < BASE_MAP.length; j++) {\\n    BASE_MAP[j] = 255\\n  }\\n  for (var i = 0; i < ALPHABET.length; i++) {\\n    var x = ALPHABET.charAt(i)\\n    var xc = x.charCodeAt(0)\\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\\n    BASE_MAP[xc] = i\\n  }\\n  var BASE = ALPHABET.length\\n  var LEADER = ALPHABET.charAt(0)\\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\\n  function encode (source) {\\n    if (source instanceof Uint8Array) {\\n    } else if (ArrayBuffer.isView(source)) {\\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\\n    } else if (Array.isArray(source)) {\\n      source = Uint8Array.from(source)\\n    }\\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\\n    if (source.length === 0) { return '' }\\n        // Skip & count leading zeroes.\\n    var zeroes = 0\\n    var length = 0\\n    var pbegin = 0\\n    var pend = source.length\\n    while (pbegin !== pend && source[pbegin] === 0) {\\n      pbegin++\\n      zeroes++\\n    }\\n        // Allocate enough space in big-endian base58 representation.\\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\\n    var b58 = new Uint8Array(size)\\n        // Process the bytes.\\n    while (pbegin !== pend) {\\n      var carry = source[pbegin]\\n            // Apply \\\"b58 = b58 * 256 + ch\\\".\\n      var i = 0\\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\\n        carry += (256 * b58[it1]) >>> 0\\n        b58[it1] = (carry % BASE) >>> 0\\n        carry = (carry / BASE) >>> 0\\n      }\\n      if (carry !== 0) { throw new Error('Non-zero carry') }\\n      length = i\\n      pbegin++\\n    }\\n        // Skip leading zeroes in base58 result.\\n    var it2 = size - length\\n    while (it2 !== size && b58[it2] === 0) {\\n      it2++\\n    }\\n        // Translate the result into a string.\\n    var str = LEADER.repeat(zeroes)\\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\\n    return str\\n  }\\n  function decodeUnsafe (source) {\\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\\n    if (source.length === 0) { return new Uint8Array() }\\n    var psz = 0\\n        // Skip leading spaces.\\n    if (source[psz] === ' ') { return }\\n        // Skip and count leading '1's.\\n    var zeroes = 0\\n    var length = 0\\n    while (source[psz] === LEADER) {\\n      zeroes++\\n      psz++\\n    }\\n        // Allocate enough space in big-endian base256 representation.\\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\\n    var b256 = new Uint8Array(size)\\n        // Process the characters.\\n    while (source[psz]) {\\n            // Decode character\\n      var carry = BASE_MAP[source.charCodeAt(psz)]\\n            // Invalid character\\n      if (carry === 255) { return }\\n      var i = 0\\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\\n        carry += (BASE * b256[it3]) >>> 0\\n        b256[it3] = (carry % 256) >>> 0\\n        carry = (carry / 256) >>> 0\\n      }\\n      if (carry !== 0) { throw new Error('Non-zero carry') }\\n      length = i\\n      psz++\\n    }\\n        // Skip trailing spaces.\\n    if (source[psz] === ' ') { return }\\n        // Skip leading zeroes in b256.\\n    var it4 = size - length\\n    while (it4 !== size && b256[it4] === 0) {\\n      it4++\\n    }\\n    var vch = new Uint8Array(zeroes + (size - it4))\\n    var j = zeroes\\n    while (it4 !== size) {\\n      vch[j++] = b256[it4++]\\n    }\\n    return vch\\n  }\\n  function decode (string) {\\n    var buffer = decodeUnsafe(string)\\n    if (buffer) { return buffer }\\n    throw new Error('Non-base' + BASE + ' character')\\n  }\\n  return {\\n    encode: encode,\\n    decodeUnsafe: decodeUnsafe,\\n    decode: decode\\n  }\\n}\\nmodule.exports = base\\n\\n},{}],8:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar Semaphore_1 = require(\\\"./Semaphore\\\");\\nvar Mutex = /** @class */ (function () {\\n    function Mutex(cancelError) {\\n        this._semaphore = new Semaphore_1.default(1, cancelError);\\n    }\\n    Mutex.prototype.acquire = function () {\\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\\n            var _a, releaser;\\n            return tslib_1.__generator(this, function (_b) {\\n                switch (_b.label) {\\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\\n                    case 1:\\n                        _a = _b.sent(), releaser = _a[1];\\n                        return [2 /*return*/, releaser];\\n                }\\n            });\\n        });\\n    };\\n    Mutex.prototype.runExclusive = function (callback) {\\n        return this._semaphore.runExclusive(function () { return callback(); });\\n    };\\n    Mutex.prototype.isLocked = function () {\\n        return this._semaphore.isLocked();\\n    };\\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\\n    Mutex.prototype.release = function () {\\n        this._semaphore.release();\\n    };\\n    Mutex.prototype.cancel = function () {\\n        return this._semaphore.cancel();\\n    };\\n    return Mutex;\\n}());\\nexports.default = Mutex;\\n\\n},{\\\"./Semaphore\\\":9,\\\"tslib\\\":14}],9:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar errors_1 = require(\\\"./errors\\\");\\nvar Semaphore = /** @class */ (function () {\\n    function Semaphore(_maxConcurrency, _cancelError) {\\n        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }\\n        this._maxConcurrency = _maxConcurrency;\\n        this._cancelError = _cancelError;\\n        this._queue = [];\\n        if (_maxConcurrency <= 0) {\\n            throw new Error('semaphore must be initialized to a positive value');\\n        }\\n        this._value = _maxConcurrency;\\n    }\\n    Semaphore.prototype.acquire = function () {\\n        var _this = this;\\n        var locked = this.isLocked();\\n        var ticketPromise = new Promise(function (resolve, reject) {\\n            return _this._queue.push({ resolve: resolve, reject: reject });\\n        });\\n        if (!locked)\\n            this._dispatch();\\n        return ticketPromise;\\n    };\\n    Semaphore.prototype.runExclusive = function (callback) {\\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\\n            var _a, value, release;\\n            return tslib_1.__generator(this, function (_b) {\\n                switch (_b.label) {\\n                    case 0: return [4 /*yield*/, this.acquire()];\\n                    case 1:\\n                        _a = _b.sent(), value = _a[0], release = _a[1];\\n                        _b.label = 2;\\n                    case 2:\\n                        _b.trys.push([2, , 4, 5]);\\n                        return [4 /*yield*/, callback(value)];\\n                    case 3: return [2 /*return*/, _b.sent()];\\n                    case 4:\\n                        release();\\n                        return [7 /*endfinally*/];\\n                    case 5: return [2 /*return*/];\\n                }\\n            });\\n        });\\n    };\\n    Semaphore.prototype.isLocked = function () {\\n        return this._value <= 0;\\n    };\\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\\n    Semaphore.prototype.release = function () {\\n        if (this._maxConcurrency > 1) {\\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\\n        }\\n        if (this._currentReleaser) {\\n            var releaser = this._currentReleaser;\\n            this._currentReleaser = undefined;\\n            releaser();\\n        }\\n    };\\n    Semaphore.prototype.cancel = function () {\\n        var _this = this;\\n        this._queue.forEach(function (ticket) { return ticket.reject(_this._cancelError); });\\n        this._queue = [];\\n    };\\n    Semaphore.prototype._dispatch = function () {\\n        var _this = this;\\n        var nextTicket = this._queue.shift();\\n        if (!nextTicket)\\n            return;\\n        var released = false;\\n        this._currentReleaser = function () {\\n            if (released)\\n                return;\\n            released = true;\\n            _this._value++;\\n            _this._dispatch();\\n        };\\n        nextTicket.resolve([this._value--, this._currentReleaser]);\\n    };\\n    return Semaphore;\\n}());\\nexports.default = Semaphore;\\n\\n},{\\\"./errors\\\":10,\\\"tslib\\\":14}],10:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;\\nexports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\\nexports.E_ALREADY_LOCKED = new Error('mutex already locked');\\nexports.E_CANCELED = new Error('request for lock canceled');\\n\\n},{}],11:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar Mutex_1 = require(\\\"./Mutex\\\");\\nObject.defineProperty(exports, \\\"Mutex\\\", { enumerable: true, get: function () { return Mutex_1.default; } });\\nvar Semaphore_1 = require(\\\"./Semaphore\\\");\\nObject.defineProperty(exports, \\\"Semaphore\\\", { enumerable: true, get: function () { return Semaphore_1.default; } });\\nvar withTimeout_1 = require(\\\"./withTimeout\\\");\\nObject.defineProperty(exports, \\\"withTimeout\\\", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });\\nvar tryAcquire_1 = require(\\\"./tryAcquire\\\");\\nObject.defineProperty(exports, \\\"tryAcquire\\\", { enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } });\\ntslib_1.__exportStar(require(\\\"./errors\\\"), exports);\\n\\n},{\\\"./Mutex\\\":8,\\\"./Semaphore\\\":9,\\\"./errors\\\":10,\\\"./tryAcquire\\\":12,\\\"./withTimeout\\\":13,\\\"tslib\\\":14}],12:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.tryAcquire = void 0;\\nvar errors_1 = require(\\\"./errors\\\");\\nvar withTimeout_1 = require(\\\"./withTimeout\\\");\\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\\nfunction tryAcquire(sync, alreadyAcquiredError) {\\n    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }\\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n    return withTimeout_1.withTimeout(sync, 0, alreadyAcquiredError);\\n}\\nexports.tryAcquire = tryAcquire;\\n\\n},{\\\"./errors\\\":10,\\\"./withTimeout\\\":13}],13:[function(require,module,exports){\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.withTimeout = void 0;\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar errors_1 = require(\\\"./errors\\\");\\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\\nfunction withTimeout(sync, timeout, timeoutError) {\\n    var _this = this;\\n    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }\\n    return {\\n        acquire: function () {\\n            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\\n                var isTimeout, handle, ticket, release, e_1;\\n                return tslib_1.__generator(this, function (_a) {\\n                    switch (_a.label) {\\n                        case 0:\\n                            isTimeout = false;\\n                            handle = setTimeout(function () {\\n                                isTimeout = true;\\n                                reject(timeoutError);\\n                            }, timeout);\\n                            _a.label = 1;\\n                        case 1:\\n                            _a.trys.push([1, 3, , 4]);\\n                            return [4 /*yield*/, sync.acquire()];\\n                        case 2:\\n                            ticket = _a.sent();\\n                            if (isTimeout) {\\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\\n                                release();\\n                            }\\n                            else {\\n                                clearTimeout(handle);\\n                                resolve(ticket);\\n                            }\\n                            return [3 /*break*/, 4];\\n                        case 3:\\n                            e_1 = _a.sent();\\n                            if (!isTimeout) {\\n                                clearTimeout(handle);\\n                                reject(e_1);\\n                            }\\n                            return [3 /*break*/, 4];\\n                        case 4: return [2 /*return*/];\\n                    }\\n                });\\n            }); });\\n        },\\n        runExclusive: function (callback) {\\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\\n                var release, ticket;\\n                return tslib_1.__generator(this, function (_a) {\\n                    switch (_a.label) {\\n                        case 0:\\n                            release = function () { return undefined; };\\n                            _a.label = 1;\\n                        case 1:\\n                            _a.trys.push([1, , 7, 8]);\\n                            return [4 /*yield*/, this.acquire()];\\n                        case 2:\\n                            ticket = _a.sent();\\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\\n                            release = ticket[1];\\n                            return [4 /*yield*/, callback(ticket[0])];\\n                        case 3: return [2 /*return*/, _a.sent()];\\n                        case 4:\\n                            release = ticket;\\n                            return [4 /*yield*/, callback()];\\n                        case 5: return [2 /*return*/, _a.sent()];\\n                        case 6: return [3 /*break*/, 8];\\n                        case 7:\\n                            release();\\n                            return [7 /*endfinally*/];\\n                        case 8: return [2 /*return*/];\\n                    }\\n                });\\n            });\\n        },\\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\\n        release: function () {\\n            sync.release();\\n        },\\n        cancel: function () {\\n            return sync.cancel();\\n        },\\n        isLocked: function () { return sync.isLocked(); },\\n    };\\n}\\nexports.withTimeout = withTimeout;\\n\\n},{\\\"./errors\\\":10,\\\"tslib\\\":14}],14:[function(require,module,exports){\\n(function (global){(function (){\\n/*! *****************************************************************************\\r\\nCopyright (c) Microsoft Corporation.\\r\\n\\r\\nPermission to use, copy, modify, and/or distribute this software for any\\r\\npurpose with or without fee is hereby granted.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\\r\\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\\r\\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\\r\\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\\r\\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\\r\\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\\r\\nPERFORMANCE OF THIS SOFTWARE.\\r\\n***************************************************************************** */\\r\\n/* global global, define, System, Reflect, Promise */\\r\\nvar __extends;\\r\\nvar __assign;\\r\\nvar __rest;\\r\\nvar __decorate;\\r\\nvar __param;\\r\\nvar __metadata;\\r\\nvar __awaiter;\\r\\nvar __generator;\\r\\nvar __exportStar;\\r\\nvar __values;\\r\\nvar __read;\\r\\nvar __spread;\\r\\nvar __spreadArrays;\\r\\nvar __spreadArray;\\r\\nvar __await;\\r\\nvar __asyncGenerator;\\r\\nvar __asyncDelegator;\\r\\nvar __asyncValues;\\r\\nvar __makeTemplateObject;\\r\\nvar __importStar;\\r\\nvar __importDefault;\\r\\nvar __classPrivateFieldGet;\\r\\nvar __classPrivateFieldSet;\\r\\nvar __createBinding;\\r\\n(function (factory) {\\r\\n    var root = typeof global === \\\"object\\\" ? global : typeof self === \\\"object\\\" ? self : typeof this === \\\"object\\\" ? this : {};\\r\\n    if (typeof define === \\\"function\\\" && define.amd) {\\r\\n        define(\\\"tslib\\\", [\\\"exports\\\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\\r\\n    }\\r\\n    else if (typeof module === \\\"object\\\" && typeof module.exports === \\\"object\\\") {\\r\\n        factory(createExporter(root, createExporter(module.exports)));\\r\\n    }\\r\\n    else {\\r\\n        factory(createExporter(root));\\r\\n    }\\r\\n    function createExporter(exports, previous) {\\r\\n        if (exports !== root) {\\r\\n            if (typeof Object.create === \\\"function\\\") {\\r\\n                Object.defineProperty(exports, \\\"__esModule\\\", { value: true });\\r\\n            }\\r\\n            else {\\r\\n                exports.__esModule = true;\\r\\n            }\\r\\n        }\\r\\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\\r\\n    }\\r\\n})\\r\\n(function (exporter) {\\r\\n    var extendStatics = Object.setPrototypeOf ||\\r\\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\\r\\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\\r\\n\\r\\n    __extends = function (d, b) {\\r\\n        if (typeof b !== \\\"function\\\" && b !== null)\\r\\n            throw new TypeError(\\\"Class extends value \\\" + String(b) + \\\" is not a constructor or null\\\");\\r\\n        extendStatics(d, b);\\r\\n        function __() { this.constructor = d; }\\r\\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\r\\n    };\\r\\n\\r\\n    __assign = Object.assign || function (t) {\\r\\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\\r\\n            s = arguments[i];\\r\\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\\r\\n        }\\r\\n        return t;\\r\\n    };\\r\\n\\r\\n    __rest = function (s, e) {\\r\\n        var t = {};\\r\\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\\r\\n            t[p] = s[p];\\r\\n        if (s != null && typeof Object.getOwnPropertySymbols === \\\"function\\\")\\r\\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\\r\\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\\r\\n                    t[p[i]] = s[p[i]];\\r\\n            }\\r\\n        return t;\\r\\n    };\\r\\n\\r\\n    __decorate = function (decorators, target, key, desc) {\\r\\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\\r\\n        if (typeof Reflect === \\\"object\\\" && typeof Reflect.decorate === \\\"function\\\") r = Reflect.decorate(decorators, target, key, desc);\\r\\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\\r\\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\\r\\n    };\\r\\n\\r\\n    __param = function (paramIndex, decorator) {\\r\\n        return function (target, key) { decorator(target, key, paramIndex); }\\r\\n    };\\r\\n\\r\\n    __metadata = function (metadataKey, metadataValue) {\\r\\n        if (typeof Reflect === \\\"object\\\" && typeof Reflect.metadata === \\\"function\\\") return Reflect.metadata(metadataKey, metadataValue);\\r\\n    };\\r\\n\\r\\n    __awaiter = function (thisArg, _arguments, P, generator) {\\r\\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\\r\\n        return new (P || (P = Promise))(function (resolve, reject) {\\r\\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\r\\n            function rejected(value) { try { step(generator[\\\"throw\\\"](value)); } catch (e) { reject(e); } }\\r\\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\\r\\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\\r\\n        });\\r\\n    };\\r\\n\\r\\n    __generator = function (thisArg, body) {\\r\\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\r\\n        return g = { next: verb(0), \\\"throw\\\": verb(1), \\\"return\\\": verb(2) }, typeof Symbol === \\\"function\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\r\\n        function verb(n) { return function (v) { return step([n, v]); }; }\\r\\n        function step(op) {\\r\\n            if (f) throw new TypeError(\\\"Generator is already executing.\\\");\\r\\n            while (_) try {\\r\\n                if (f = 1, y && (t = op[0] & 2 ? y[\\\"return\\\"] : op[0] ? y[\\\"throw\\\"] || ((t = y[\\\"return\\\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\\r\\n                if (y = 0, t) op = [op[0] & 2, t.value];\\r\\n                switch (op[0]) {\\r\\n                    case 0: case 1: t = op; break;\\r\\n                    case 4: _.label++; return { value: op[1], done: false };\\r\\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\\r\\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\\r\\n                    default:\\r\\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\r\\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\r\\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\r\\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\r\\n                        if (t[2]) _.ops.pop();\\r\\n                        _.trys.pop(); continue;\\r\\n                }\\r\\n                op = body.call(thisArg, _);\\r\\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\r\\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\r\\n        }\\r\\n    };\\r\\n\\r\\n    __exportStar = function(m, o) {\\r\\n        for (var p in m) if (p !== \\\"default\\\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\\r\\n    };\\r\\n\\r\\n    __createBinding = Object.create ? (function(o, m, k, k2) {\\r\\n        if (k2 === undefined) k2 = k;\\r\\n        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\\r\\n    }) : (function(o, m, k, k2) {\\r\\n        if (k2 === undefined) k2 = k;\\r\\n        o[k2] = m[k];\\r\\n    });\\r\\n\\r\\n    __values = function (o) {\\r\\n        var s = typeof Symbol === \\\"function\\\" && Symbol.iterator, m = s && o[s], i = 0;\\r\\n        if (m) return m.call(o);\\r\\n        if (o && typeof o.length === \\\"number\\\") return {\\r\\n            next: function () {\\r\\n                if (o && i >= o.length) o = void 0;\\r\\n                return { value: o && o[i++], done: !o };\\r\\n            }\\r\\n        };\\r\\n        throw new TypeError(s ? \\\"Object is not iterable.\\\" : \\\"Symbol.iterator is not defined.\\\");\\r\\n    };\\r\\n\\r\\n    __read = function (o, n) {\\r\\n        var m = typeof Symbol === \\\"function\\\" && o[Symbol.iterator];\\r\\n        if (!m) return o;\\r\\n        var i = m.call(o), r, ar = [], e;\\r\\n        try {\\r\\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\\r\\n        }\\r\\n        catch (error) { e = { error: error }; }\\r\\n        finally {\\r\\n            try {\\r\\n                if (r && !r.done && (m = i[\\\"return\\\"])) m.call(i);\\r\\n            }\\r\\n            finally { if (e) throw e.error; }\\r\\n        }\\r\\n        return ar;\\r\\n    };\\r\\n\\r\\n    /** @deprecated */\\r\\n    __spread = function () {\\r\\n        for (var ar = [], i = 0; i < arguments.length; i++)\\r\\n            ar = ar.concat(__read(arguments[i]));\\r\\n        return ar;\\r\\n    };\\r\\n\\r\\n    /** @deprecated */\\r\\n    __spreadArrays = function () {\\r\\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\\r\\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\\r\\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\\r\\n                r[k] = a[j];\\r\\n        return r;\\r\\n    };\\r\\n\\r\\n    __spreadArray = function (to, from) {\\r\\n        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\\r\\n            to[j] = from[i];\\r\\n        return to;\\r\\n    };\\r\\n\\r\\n    __await = function (v) {\\r\\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\\r\\n    };\\r\\n\\r\\n    __asyncGenerator = function (thisArg, _arguments, generator) {\\r\\n        if (!Symbol.asyncIterator) throw new TypeError(\\\"Symbol.asyncIterator is not defined.\\\");\\r\\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\\r\\n        return i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\"), verb(\\\"return\\\"), i[Symbol.asyncIterator] = function () { return this; }, i;\\r\\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\\r\\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\\r\\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\\r\\n        function fulfill(value) { resume(\\\"next\\\", value); }\\r\\n        function reject(value) { resume(\\\"throw\\\", value); }\\r\\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\\r\\n    };\\r\\n\\r\\n    __asyncDelegator = function (o) {\\r\\n        var i, p;\\r\\n        return i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\", function (e) { throw e; }), verb(\\\"return\\\"), i[Symbol.iterator] = function () { return this; }, i;\\r\\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \\\"return\\\" } : f ? f(v) : v; } : f; }\\r\\n    };\\r\\n\\r\\n    __asyncValues = function (o) {\\r\\n        if (!Symbol.asyncIterator) throw new TypeError(\\\"Symbol.asyncIterator is not defined.\\\");\\r\\n        var m = o[Symbol.asyncIterator], i;\\r\\n        return m ? m.call(o) : (o = typeof __values === \\\"function\\\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\\\"next\\\"), verb(\\\"throw\\\"), verb(\\\"return\\\"), i[Symbol.asyncIterator] = function () { return this; }, i);\\r\\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\\r\\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\\r\\n    };\\r\\n\\r\\n    __makeTemplateObject = function (cooked, raw) {\\r\\n        if (Object.defineProperty) { Object.defineProperty(cooked, \\\"raw\\\", { value: raw }); } else { cooked.raw = raw; }\\r\\n        return cooked;\\r\\n    };\\r\\n\\r\\n    var __setModuleDefault = Object.create ? (function(o, v) {\\r\\n        Object.defineProperty(o, \\\"default\\\", { enumerable: true, value: v });\\r\\n    }) : function(o, v) {\\r\\n        o[\\\"default\\\"] = v;\\r\\n    };\\r\\n\\r\\n    __importStar = function (mod) {\\r\\n        if (mod && mod.__esModule) return mod;\\r\\n        var result = {};\\r\\n        if (mod != null) for (var k in mod) if (k !== \\\"default\\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\\r\\n        __setModuleDefault(result, mod);\\r\\n        return result;\\r\\n    };\\r\\n\\r\\n    __importDefault = function (mod) {\\r\\n        return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\r\\n    };\\r\\n\\r\\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\\r\\n        if (kind === \\\"a\\\" && !f) throw new TypeError(\\\"Private accessor was defined without a getter\\\");\\r\\n        if (typeof state === \\\"function\\\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\\\"Cannot read private member from an object whose class did not declare it\\\");\\r\\n        return kind === \\\"m\\\" ? f : kind === \\\"a\\\" ? f.call(receiver) : f ? f.value : state.get(receiver);\\r\\n    };\\r\\n\\r\\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\\r\\n        if (kind === \\\"m\\\") throw new TypeError(\\\"Private method is not writable\\\");\\r\\n        if (kind === \\\"a\\\" && !f) throw new TypeError(\\\"Private accessor was defined without a setter\\\");\\r\\n        if (typeof state === \\\"function\\\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\\\"Cannot write private member to an object whose class did not declare it\\\");\\r\\n        return (kind === \\\"a\\\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\\r\\n    };\\r\\n\\r\\n    exporter(\\\"__extends\\\", __extends);\\r\\n    exporter(\\\"__assign\\\", __assign);\\r\\n    exporter(\\\"__rest\\\", __rest);\\r\\n    exporter(\\\"__decorate\\\", __decorate);\\r\\n    exporter(\\\"__param\\\", __param);\\r\\n    exporter(\\\"__metadata\\\", __metadata);\\r\\n    exporter(\\\"__awaiter\\\", __awaiter);\\r\\n    exporter(\\\"__generator\\\", __generator);\\r\\n    exporter(\\\"__exportStar\\\", __exportStar);\\r\\n    exporter(\\\"__createBinding\\\", __createBinding);\\r\\n    exporter(\\\"__values\\\", __values);\\r\\n    exporter(\\\"__read\\\", __read);\\r\\n    exporter(\\\"__spread\\\", __spread);\\r\\n    exporter(\\\"__spreadArrays\\\", __spreadArrays);\\r\\n    exporter(\\\"__spreadArray\\\", __spreadArray);\\r\\n    exporter(\\\"__await\\\", __await);\\r\\n    exporter(\\\"__asyncGenerator\\\", __asyncGenerator);\\r\\n    exporter(\\\"__asyncDelegator\\\", __asyncDelegator);\\r\\n    exporter(\\\"__asyncValues\\\", __asyncValues);\\r\\n    exporter(\\\"__makeTemplateObject\\\", __makeTemplateObject);\\r\\n    exporter(\\\"__importStar\\\", __importStar);\\r\\n    exporter(\\\"__importDefault\\\", __importDefault);\\r\\n    exporter(\\\"__classPrivateFieldGet\\\", __classPrivateFieldGet);\\r\\n    exporter(\\\"__classPrivateFieldSet\\\", __classPrivateFieldSet);\\r\\n});\\r\\n\\n}).call(this)}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],15:[function(require,module,exports){\\n'use strict'\\n\\n/**\\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\\n *\\n * @param {Array<ArrayLike<number>>} arrays\\n * @param {number} [length]\\n */\\nfunction concat (arrays, length) {\\n  if (!length) {\\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\\n  }\\n\\n  const output = new Uint8Array(length)\\n  let offset = 0\\n\\n  for (const arr of arrays) {\\n    output.set(arr, offset)\\n    offset += arr.length\\n  }\\n\\n  return output\\n}\\n\\nmodule.exports = concat\\n\\n},{}],16:[function(require,module,exports){\\n'use strict'\\n\\n/**\\n * Returns true if the two passed Uint8Arrays have the same content\\n *\\n * @param {Uint8Array} a\\n * @param {Uint8Array} b\\n */\\nfunction equals (a, b) {\\n  if (a === b) {\\n    return true\\n  }\\n\\n  if (a.byteLength !== b.byteLength) {\\n    return false\\n  }\\n\\n  for (let i = 0; i < a.byteLength; i++) {\\n    if (a[i] !== b[i]) {\\n      return false\\n    }\\n  }\\n\\n  return true\\n}\\n\\nmodule.exports = equals\\n\\n},{}],17:[function(require,module,exports){\\n'use strict'\\n\\nconst { encoding: getCodec } = require('multibase')\\nconst utf8Decoder = new TextDecoder('utf8')\\n\\n/**\\n * @typedef {import('multibase/src/types').BaseName} BaseName\\n */\\n\\n/**\\n * Turns a Uint8Array of bytes into a string with each\\n * character being the char code of the corresponding byte\\n *\\n * @param {Uint8Array} array - The array to turn into a string\\n */\\nfunction uint8ArrayToAsciiString (array) {\\n  let string = ''\\n\\n  for (let i = 0; i < array.length; i++) {\\n    string += String.fromCharCode(array[i])\\n  }\\n  return string\\n}\\n\\n/**\\n * Turns a `Uint8Array` into a string.\\n *\\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\\n *\\n * Also `ascii` which is similar to node's 'binary' encoding.\\n *\\n * @param {Uint8Array} array - The array to turn into a string\\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - The encoding to use\\n * @returns {string}\\n */\\nfunction toString (array, encoding = 'utf8') {\\n  if (encoding === 'utf8' || encoding === 'utf-8') {\\n    return utf8Decoder.decode(array)\\n  }\\n\\n  if (encoding === 'ascii') {\\n    return uint8ArrayToAsciiString(array)\\n  }\\n\\n  return getCodec(encoding).encode(array)\\n}\\n\\nmodule.exports = toString\\n\\n},{\\\"multibase\\\":173}],18:[function(require,module,exports){\\n'use strict'\\n\\nconst mh = require('multihashes')\\n\\nconst CIDUtil = {\\n  /**\\n   * Test if the given input is a valid CID object.\\n   * Returns an error message if it is not.\\n   * Returns undefined if it is a valid CID.\\n   *\\n   * @param {any} other\\n   * @returns {string|undefined}\\n   */\\n  checkCIDComponents: function (other) {\\n    if (other == null) {\\n      return 'null values are not valid CIDs'\\n    }\\n\\n    if (!(other.version === 0 || other.version === 1)) {\\n      return 'Invalid version, must be a number equal to 1 or 0'\\n    }\\n\\n    if (typeof other.codec !== 'string') {\\n      return 'codec must be string'\\n    }\\n\\n    if (other.version === 0) {\\n      if (other.codec !== 'dag-pb') {\\n        return \\\"codec must be 'dag-pb' for CIDv0\\\"\\n      }\\n      if (other.multibaseName !== 'base58btc') {\\n        return \\\"multibaseName must be 'base58btc' for CIDv0\\\"\\n      }\\n    }\\n\\n    if (!(other.multihash instanceof Uint8Array)) {\\n      return 'multihash must be a Uint8Array'\\n    }\\n\\n    try {\\n      mh.validate(other.multihash)\\n    } catch (err) {\\n      let errorMsg = err.message\\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\\n        errorMsg = 'Multihash validation failed'\\n      }\\n      return errorMsg\\n    }\\n  }\\n}\\n\\nmodule.exports = CIDUtil\\n\\n},{\\\"multihashes\\\":195}],19:[function(require,module,exports){\\n'use strict'\\n\\nconst mh = require('multihashes')\\nconst multibase = require('multibase')\\nconst multicodec = require('multicodec')\\nconst CIDUtil = require('./cid-util')\\nconst uint8ArrayConcat = require('uint8arrays/concat')\\nconst uint8ArrayToString = require('uint8arrays/to-string')\\nconst uint8ArrayEquals = require('uint8arrays/equals')\\n\\nconst codecs = multicodec.nameToCode\\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\\n  p[codecs[name]] = name\\n  return p\\n}, /** @type {Record<CodecCode, CodecName>} */({}))\\n\\nconst symbol = Symbol.for('@ipld/js-cid/CID')\\n\\n/**\\n * @typedef {Object} SerializedCID\\n * @property {string} codec\\n * @property {number} version\\n * @property {Uint8Array} hash\\n */\\n/**\\n * @typedef {0|1} CIDVersion\\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\\n * @typedef {import('multicodec').CodecName} CodecName\\n * @typedef {import('multicodec').CodecCode} CodecCode\\n */\\n\\n/**\\n * Class representing a CID `<mbase><version><mcodec><mhash>`\\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\\n *\\n * @class CID\\n */\\nclass CID {\\n  /**\\n   * Create a new CID.\\n   *\\n   * The algorithm for argument input is roughly:\\n   * ```\\n   * if (cid)\\n   *   -> create a copy\\n   * else if (str)\\n   *   if (1st char is on multibase table) -> CID String\\n   *   else -> bs58 encoded multihash\\n   * else if (Uint8Array)\\n   *   if (1st byte is 0 or 1) -> CID\\n   *   else -> multihash\\n   * else if (Number)\\n   *   -> construct CID by parts\\n   * ```\\n   *\\n   * @param {CIDVersion | string | Uint8Array | CID} version\\n   * @param {string|number} [codec]\\n   * @param {Uint8Array} [multihash]\\n   * @param {string} [multibaseName]\\n   *\\n   * @example\\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\\n   * new CID(<cidStr>)\\n   * new CID(<cid.bytes>)\\n   * new CID(<multihash>)\\n   * new CID(<bs58 encoded multihash>)\\n   * new CID(<cid>)\\n   */\\n  constructor (version, codec, multihash, multibaseName) {\\n    // We have below three blank field accessors only because\\n    // otherwise TS will not pick them up if done after assignemnts\\n\\n    /**\\n     * The version of the CID.\\n     *\\n     * @type {CIDVersion}\\n     */\\n    // eslint-disable-next-line no-unused-expressions\\n    this.version\\n\\n    /**\\n     * The codec of the CID.\\n     *\\n     * @deprecated\\n     * @type {CodecName}\\n     */\\n    // eslint-disable-next-line no-unused-expressions\\n    this.codec\\n\\n    /**\\n     * The multihash of the CID.\\n     *\\n     * @type {Uint8Array}\\n     */\\n    // eslint-disable-next-line no-unused-expressions\\n    this.multihash\\n\\n    Object.defineProperty(this, symbol, { value: true })\\n    if (CID.isCID(version)) {\\n      // version is an exising CID instance\\n      const cid = /** @type {CID} */(version)\\n      this.version = cid.version\\n      this.codec = cid.codec\\n      this.multihash = cid.multihash\\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\\n      // @ts-ignore\\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\\n      return\\n    }\\n\\n    if (typeof version === 'string') {\\n      // e.g. 'base32' or false\\n      const baseName = multibase.isEncoded(version)\\n      if (baseName) {\\n        // version is a CID String encoded with multibase, so v1\\n        const cid = multibase.decode(version)\\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\\n        this.codec = multicodec.getCodec(cid.slice(1))\\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\\n        this.multibaseName = baseName\\n      } else {\\n        // version is a base58btc string multihash, so v0\\n        this.version = 0\\n        this.codec = 'dag-pb'\\n        this.multihash = mh.fromB58String(version)\\n        this.multibaseName = 'base58btc'\\n      }\\n      CID.validateCID(this)\\n      Object.defineProperty(this, 'string', { value: version })\\n      return\\n    }\\n\\n    if (version instanceof Uint8Array) {\\n      const v = parseInt(version[0].toString(), 16)\\n      if (v === 1) {\\n        // version is a CID Uint8Array\\n        const cid = version\\n        this.version = v\\n        this.codec = multicodec.getCodec(cid.slice(1))\\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\\n        this.multibaseName = 'base32'\\n      } else {\\n        // version is a raw multihash Uint8Array, so v0\\n        this.version = 0\\n        this.codec = 'dag-pb'\\n        this.multihash = version\\n        this.multibaseName = 'base58btc'\\n      }\\n      CID.validateCID(this)\\n      return\\n    }\\n\\n    // otherwise, assemble the CID from the parameters\\n\\n    this.version = version\\n\\n    if (typeof codec === 'number') {\\n      // @ts-ignore\\n      codec = codecInts[codec]\\n    }\\n\\n    this.codec = /** @type {CodecName} */ (codec)\\n\\n    this.multihash = /** @type {Uint8Array} */ (multihash)\\n\\n    /**\\n     * Multibase name as string.\\n     *\\n     * @deprecated\\n     * @type {string}\\n     */\\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\\n\\n    CID.validateCID(this)\\n  }\\n\\n  /**\\n   * The CID as a `Uint8Array`\\n   *\\n   * @returns {Uint8Array}\\n   *\\n   */\\n  get bytes () {\\n    // @ts-ignore\\n    let bytes = this._bytes\\n\\n    if (!bytes) {\\n      if (this.version === 0) {\\n        bytes = this.multihash\\n      } else if (this.version === 1) {\\n        const codec = multicodec.getCodeVarint(this.codec)\\n        bytes = uint8ArrayConcat([\\n          [1], codec, this.multihash\\n        ], 1 + codec.byteLength + this.multihash.byteLength)\\n      } else {\\n        throw new Error('unsupported version')\\n      }\\n\\n      // Cache this Uint8Array so it doesn't have to be recreated\\n      Object.defineProperty(this, '_bytes', { value: bytes })\\n    }\\n\\n    return bytes\\n  }\\n\\n  /**\\n   * The prefix of the CID.\\n   *\\n   * @returns {Uint8Array}\\n   */\\n  get prefix () {\\n    const codec = multicodec.getCodeVarint(this.codec)\\n    const multihash = mh.prefix(this.multihash)\\n    const prefix = uint8ArrayConcat([\\n      [this.version], codec, multihash\\n    ], 1 + codec.byteLength + multihash.byteLength)\\n\\n    return prefix\\n  }\\n\\n  /**\\n   * The codec of the CID in its number form.\\n   *\\n   * @returns {CodecCode}\\n   */\\n  get code () {\\n    return codecs[this.codec]\\n  }\\n\\n  /**\\n   * Convert to a CID of version `0`.\\n   *\\n   * @returns {CID}\\n   */\\n  toV0 () {\\n    if (this.codec !== 'dag-pb') {\\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\\n    }\\n\\n    const { name, length } = mh.decode(this.multihash)\\n\\n    if (name !== 'sha2-256') {\\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\\n    }\\n\\n    if (length !== 32) {\\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\\n    }\\n\\n    return new CID(0, this.codec, this.multihash)\\n  }\\n\\n  /**\\n   * Convert to a CID of version `1`.\\n   *\\n   * @returns {CID}\\n   */\\n  toV1 () {\\n    return new CID(1, this.codec, this.multihash)\\n  }\\n\\n  /**\\n   * Encode the CID into a string.\\n   *\\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\\n   * @returns {string}\\n   */\\n  toBaseEncodedString (base = this.multibaseName) {\\n    // @ts-ignore non enumerable cache property\\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\\n      // @ts-ignore non enumerable cache property\\n      return this.string\\n    }\\n    let str\\n    if (this.version === 0) {\\n      if (base !== 'base58btc') {\\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\\n      }\\n      str = mh.toB58String(this.multihash)\\n    } else if (this.version === 1) {\\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\\n    } else {\\n      throw new Error('unsupported version')\\n    }\\n    if (base === this.multibaseName) {\\n      // cache the string value\\n      Object.defineProperty(this, 'string', { value: str })\\n    }\\n    return str\\n  }\\n\\n  /**\\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\\n   *\\n   * @returns {string}\\n   */\\n  [Symbol.for('nodejs.util.inspect.custom')] () {\\n    return 'CID(' + this.toString() + ')'\\n  }\\n\\n  /**\\n   * Encode the CID into a string.\\n   *\\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\\n   * @returns {string}\\n   */\\n  toString (base) {\\n    return this.toBaseEncodedString(base)\\n  }\\n\\n  /**\\n   * Serialize to a plain object.\\n   *\\n   * @returns {SerializedCID}\\n   */\\n  toJSON () {\\n    return {\\n      codec: this.codec,\\n      version: this.version,\\n      hash: this.multihash\\n    }\\n  }\\n\\n  /**\\n   * Compare equality with another CID.\\n   *\\n   * @param {CID} other\\n   * @returns {boolean}\\n   */\\n  equals (other) {\\n    return this.codec === other.codec &&\\n      this.version === other.version &&\\n      uint8ArrayEquals(this.multihash, other.multihash)\\n  }\\n\\n  /**\\n   * Test if the given input is a valid CID object.\\n   * Throws if it is not.\\n   *\\n   * @param {any} other - The other CID.\\n   * @returns {void}\\n   */\\n  static validateCID (other) {\\n    const errorMsg = CIDUtil.checkCIDComponents(other)\\n    if (errorMsg) {\\n      throw new Error(errorMsg)\\n    }\\n  }\\n\\n  /**\\n   * Check if object is a CID instance\\n   *\\n   * @param {any} value\\n   * @returns {value is CID}\\n   */\\n  static isCID (value) {\\n    return value instanceof CID || Boolean(value && value[symbol])\\n  }\\n}\\n\\nCID.codecs = codecs\\n\\nmodule.exports = CID\\n\\n},{\\\"./cid-util\\\":18,\\\"multibase\\\":173,\\\"multicodec\\\":184,\\\"multihashes\\\":195,\\\"uint8arrays/concat\\\":15,\\\"uint8arrays/equals\\\":16,\\\"uint8arrays/to-string\\\":17}],20:[function(require,module,exports){\\nmodule.exports = function (it) {\\n  if (typeof it != 'function') {\\n    throw TypeError(String(it) + ' is not a function');\\n  } return it;\\n};\\n\\n},{}],21:[function(require,module,exports){\\nvar isObject = require('../internals/is-object');\\n\\nmodule.exports = function (it) {\\n  if (!isObject(it) && it !== null) {\\n    throw TypeError(\\\"Can't set \\\" + String(it) + ' as a prototype');\\n  } return it;\\n};\\n\\n},{\\\"../internals/is-object\\\":74}],22:[function(require,module,exports){\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar create = require('../internals/object-create');\\nvar definePropertyModule = require('../internals/object-define-property');\\n\\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\\nvar ArrayPrototype = Array.prototype;\\n\\n// Array.prototype[@@unscopables]\\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\\n    configurable: true,\\n    value: create(null)\\n  });\\n}\\n\\n// add a key to Array.prototype[@@unscopables]\\nmodule.exports = function (key) {\\n  ArrayPrototype[UNSCOPABLES][key] = true;\\n};\\n\\n},{\\\"../internals/object-create\\\":84,\\\"../internals/object-define-property\\\":86,\\\"../internals/well-known-symbol\\\":129}],23:[function(require,module,exports){\\n'use strict';\\nvar charAt = require('../internals/string-multibyte').charAt;\\n\\n// `AdvanceStringIndex` abstract operation\\n// https://tc39.es/ecma262/#sec-advancestringindex\\nmodule.exports = function (S, index, unicode) {\\n  return index + (unicode ? charAt(S, index).length : 1);\\n};\\n\\n},{\\\"../internals/string-multibyte\\\":112}],24:[function(require,module,exports){\\nmodule.exports = function (it, Constructor, name) {\\n  if (!(it instanceof Constructor)) {\\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\\n  } return it;\\n};\\n\\n},{}],25:[function(require,module,exports){\\nvar isObject = require('../internals/is-object');\\n\\nmodule.exports = function (it) {\\n  if (!isObject(it)) {\\n    throw TypeError(String(it) + ' is not an object');\\n  } return it;\\n};\\n\\n},{\\\"../internals/is-object\\\":74}],26:[function(require,module,exports){\\n// eslint-disable-next-line es/no-typed-arrays -- safe\\nmodule.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';\\n\\n},{}],27:[function(require,module,exports){\\n'use strict';\\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar global = require('../internals/global');\\nvar isObject = require('../internals/is-object');\\nvar has = require('../internals/has');\\nvar classof = require('../internals/classof');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar redefine = require('../internals/redefine');\\nvar defineProperty = require('../internals/object-define-property').f;\\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar uid = require('../internals/uid');\\n\\nvar Int8Array = global.Int8Array;\\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\\nvar Uint8ClampedArray = global.Uint8ClampedArray;\\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\\nvar ObjectPrototype = Object.prototype;\\nvar isPrototypeOf = ObjectPrototype.isPrototypeOf;\\n\\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\\nvar TYPED_ARRAY_TAG_REQIRED = false;\\nvar NAME;\\n\\nvar TypedArrayConstructorsList = {\\n  Int8Array: 1,\\n  Uint8Array: 1,\\n  Uint8ClampedArray: 1,\\n  Int16Array: 2,\\n  Uint16Array: 2,\\n  Int32Array: 4,\\n  Uint32Array: 4,\\n  Float32Array: 4,\\n  Float64Array: 8\\n};\\n\\nvar BigIntArrayConstructorsList = {\\n  BigInt64Array: 8,\\n  BigUint64Array: 8\\n};\\n\\nvar isView = function isView(it) {\\n  if (!isObject(it)) return false;\\n  var klass = classof(it);\\n  return klass === 'DataView'\\n    || has(TypedArrayConstructorsList, klass)\\n    || has(BigIntArrayConstructorsList, klass);\\n};\\n\\nvar isTypedArray = function (it) {\\n  if (!isObject(it)) return false;\\n  var klass = classof(it);\\n  return has(TypedArrayConstructorsList, klass)\\n    || has(BigIntArrayConstructorsList, klass);\\n};\\n\\nvar aTypedArray = function (it) {\\n  if (isTypedArray(it)) return it;\\n  throw TypeError('Target is not a typed array');\\n};\\n\\nvar aTypedArrayConstructor = function (C) {\\n  if (setPrototypeOf) {\\n    if (isPrototypeOf.call(TypedArray, C)) return C;\\n  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {\\n    var TypedArrayConstructor = global[ARRAY];\\n    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {\\n      return C;\\n    }\\n  } throw TypeError('Target is not a typed array constructor');\\n};\\n\\nvar exportTypedArrayMethod = function (KEY, property, forced) {\\n  if (!DESCRIPTORS) return;\\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\\n    var TypedArrayConstructor = global[ARRAY];\\n    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) try {\\n      delete TypedArrayConstructor.prototype[KEY];\\n    } catch (error) { /* empty */ }\\n  }\\n  if (!TypedArrayPrototype[KEY] || forced) {\\n    redefine(TypedArrayPrototype, KEY, forced ? property\\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);\\n  }\\n};\\n\\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\\n  var ARRAY, TypedArrayConstructor;\\n  if (!DESCRIPTORS) return;\\n  if (setPrototypeOf) {\\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\\n      TypedArrayConstructor = global[ARRAY];\\n      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) try {\\n        delete TypedArrayConstructor[KEY];\\n      } catch (error) { /* empty */ }\\n    }\\n    if (!TypedArray[KEY] || forced) {\\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\\n      try {\\n        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\\n      } catch (error) { /* empty */ }\\n    } else return;\\n  }\\n  for (ARRAY in TypedArrayConstructorsList) {\\n    TypedArrayConstructor = global[ARRAY];\\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\\n      redefine(TypedArrayConstructor, KEY, property);\\n    }\\n  }\\n};\\n\\nfor (NAME in TypedArrayConstructorsList) {\\n  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;\\n}\\n\\n// WebKit bug - typed arrays constructors prototype is Object.prototype\\nif (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {\\n  // eslint-disable-next-line no-shadow -- safe\\n  TypedArray = function TypedArray() {\\n    throw TypeError('Incorrect invocation');\\n  };\\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\\n    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);\\n  }\\n}\\n\\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\\n  TypedArrayPrototype = TypedArray.prototype;\\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\\n    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\\n  }\\n}\\n\\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\\n}\\n\\nif (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {\\n  TYPED_ARRAY_TAG_REQIRED = true;\\n  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {\\n    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\\n  } });\\n  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {\\n    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\\n  }\\n}\\n\\nmodule.exports = {\\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,\\n  aTypedArray: aTypedArray,\\n  aTypedArrayConstructor: aTypedArrayConstructor,\\n  exportTypedArrayMethod: exportTypedArrayMethod,\\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\\n  isView: isView,\\n  isTypedArray: isTypedArray,\\n  TypedArray: TypedArray,\\n  TypedArrayPrototype: TypedArrayPrototype\\n};\\n\\n},{\\\"../internals/array-buffer-native\\\":26,\\\"../internals/classof\\\":37,\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/descriptors\\\":46,\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/is-object\\\":74,\\\"../internals/object-define-property\\\":86,\\\"../internals/object-get-prototype-of\\\":90,\\\"../internals/object-set-prototype-of\\\":94,\\\"../internals/redefine\\\":98,\\\"../internals/uid\\\":127,\\\"../internals/well-known-symbol\\\":129}],28:[function(require,module,exports){\\n'use strict';\\nvar global = require('../internals/global');\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar redefineAll = require('../internals/redefine-all');\\nvar fails = require('../internals/fails');\\nvar anInstance = require('../internals/an-instance');\\nvar toInteger = require('../internals/to-integer');\\nvar toLength = require('../internals/to-length');\\nvar toIndex = require('../internals/to-index');\\nvar IEEE754 = require('../internals/ieee754');\\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\\nvar defineProperty = require('../internals/object-define-property').f;\\nvar arrayFill = require('../internals/array-fill');\\nvar setToStringTag = require('../internals/set-to-string-tag');\\nvar InternalStateModule = require('../internals/internal-state');\\n\\nvar getInternalState = InternalStateModule.get;\\nvar setInternalState = InternalStateModule.set;\\nvar ARRAY_BUFFER = 'ArrayBuffer';\\nvar DATA_VIEW = 'DataView';\\nvar PROTOTYPE = 'prototype';\\nvar WRONG_LENGTH = 'Wrong length';\\nvar WRONG_INDEX = 'Wrong index';\\nvar NativeArrayBuffer = global[ARRAY_BUFFER];\\nvar $ArrayBuffer = NativeArrayBuffer;\\nvar $DataView = global[DATA_VIEW];\\nvar $DataViewPrototype = $DataView && $DataView[PROTOTYPE];\\nvar ObjectPrototype = Object.prototype;\\nvar RangeError = global.RangeError;\\n\\nvar packIEEE754 = IEEE754.pack;\\nvar unpackIEEE754 = IEEE754.unpack;\\n\\nvar packInt8 = function (number) {\\n  return [number & 0xFF];\\n};\\n\\nvar packInt16 = function (number) {\\n  return [number & 0xFF, number >> 8 & 0xFF];\\n};\\n\\nvar packInt32 = function (number) {\\n  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];\\n};\\n\\nvar unpackInt32 = function (buffer) {\\n  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\\n};\\n\\nvar packFloat32 = function (number) {\\n  return packIEEE754(number, 23, 4);\\n};\\n\\nvar packFloat64 = function (number) {\\n  return packIEEE754(number, 52, 8);\\n};\\n\\nvar addGetter = function (Constructor, key) {\\n  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });\\n};\\n\\nvar get = function (view, count, index, isLittleEndian) {\\n  var intIndex = toIndex(index);\\n  var store = getInternalState(view);\\n  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);\\n  var bytes = getInternalState(store.buffer).bytes;\\n  var start = intIndex + store.byteOffset;\\n  var pack = bytes.slice(start, start + count);\\n  return isLittleEndian ? pack : pack.reverse();\\n};\\n\\nvar set = function (view, count, index, conversion, value, isLittleEndian) {\\n  var intIndex = toIndex(index);\\n  var store = getInternalState(view);\\n  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);\\n  var bytes = getInternalState(store.buffer).bytes;\\n  var start = intIndex + store.byteOffset;\\n  var pack = conversion(+value);\\n  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];\\n};\\n\\nif (!NATIVE_ARRAY_BUFFER) {\\n  $ArrayBuffer = function ArrayBuffer(length) {\\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\\n    var byteLength = toIndex(length);\\n    setInternalState(this, {\\n      bytes: arrayFill.call(new Array(byteLength), 0),\\n      byteLength: byteLength\\n    });\\n    if (!DESCRIPTORS) this.byteLength = byteLength;\\n  };\\n\\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\\n    anInstance(this, $DataView, DATA_VIEW);\\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\\n    var bufferLength = getInternalState(buffer).byteLength;\\n    var offset = toInteger(byteOffset);\\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');\\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\\n    setInternalState(this, {\\n      buffer: buffer,\\n      byteLength: byteLength,\\n      byteOffset: offset\\n    });\\n    if (!DESCRIPTORS) {\\n      this.buffer = buffer;\\n      this.byteLength = byteLength;\\n      this.byteOffset = offset;\\n    }\\n  };\\n\\n  if (DESCRIPTORS) {\\n    addGetter($ArrayBuffer, 'byteLength');\\n    addGetter($DataView, 'buffer');\\n    addGetter($DataView, 'byteLength');\\n    addGetter($DataView, 'byteOffset');\\n  }\\n\\n  redefineAll($DataView[PROTOTYPE], {\\n    getInt8: function getInt8(byteOffset) {\\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\\n    },\\n    getUint8: function getUint8(byteOffset) {\\n      return get(this, 1, byteOffset)[0];\\n    },\\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\\n    },\\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\\n      return bytes[1] << 8 | bytes[0];\\n    },\\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));\\n    },\\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;\\n    },\\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\\n      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);\\n    },\\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\\n      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);\\n    },\\n    setInt8: function setInt8(byteOffset, value) {\\n      set(this, 1, byteOffset, packInt8, value);\\n    },\\n    setUint8: function setUint8(byteOffset, value) {\\n      set(this, 1, byteOffset, packInt8, value);\\n    },\\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\\n    },\\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\\n    },\\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\\n    },\\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\\n    },\\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\\n      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);\\n    },\\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\\n      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);\\n    }\\n  });\\n} else {\\n  /* eslint-disable no-new -- required for testing */\\n  if (!fails(function () {\\n    NativeArrayBuffer(1);\\n  }) || !fails(function () {\\n    new NativeArrayBuffer(-1);\\n  }) || fails(function () {\\n    new NativeArrayBuffer();\\n    new NativeArrayBuffer(1.5);\\n    new NativeArrayBuffer(NaN);\\n    return NativeArrayBuffer.name != ARRAY_BUFFER;\\n  })) {\\n  /* eslint-enable no-new -- required for testing */\\n    $ArrayBuffer = function ArrayBuffer(length) {\\n      anInstance(this, $ArrayBuffer);\\n      return new NativeArrayBuffer(toIndex(length));\\n    };\\n    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];\\n    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {\\n      if (!((key = keys[j++]) in $ArrayBuffer)) {\\n        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);\\n      }\\n    }\\n    ArrayBufferPrototype.constructor = $ArrayBuffer;\\n  }\\n\\n  // WebKit bug - the same parent prototype for typed arrays and data view\\n  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {\\n    setPrototypeOf($DataViewPrototype, ObjectPrototype);\\n  }\\n\\n  // iOS Safari 7.x bug\\n  var testView = new $DataView(new $ArrayBuffer(2));\\n  var $setInt8 = $DataViewPrototype.setInt8;\\n  testView.setInt8(0, 2147483648);\\n  testView.setInt8(1, 2147483649);\\n  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {\\n    setInt8: function setInt8(byteOffset, value) {\\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\\n    },\\n    setUint8: function setUint8(byteOffset, value) {\\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\\n    }\\n  }, { unsafe: true });\\n}\\n\\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\\nsetToStringTag($DataView, DATA_VIEW);\\n\\nmodule.exports = {\\n  ArrayBuffer: $ArrayBuffer,\\n  DataView: $DataView\\n};\\n\\n},{\\\"../internals/an-instance\\\":24,\\\"../internals/array-buffer-native\\\":26,\\\"../internals/array-fill\\\":29,\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/descriptors\\\":46,\\\"../internals/fails\\\":53,\\\"../internals/global\\\":61,\\\"../internals/ieee754\\\":66,\\\"../internals/internal-state\\\":70,\\\"../internals/object-define-property\\\":86,\\\"../internals/object-get-own-property-names\\\":88,\\\"../internals/object-get-prototype-of\\\":90,\\\"../internals/object-set-prototype-of\\\":94,\\\"../internals/redefine-all\\\":97,\\\"../internals/set-to-string-tag\\\":107,\\\"../internals/to-index\\\":115,\\\"../internals/to-integer\\\":117,\\\"../internals/to-length\\\":118}],29:[function(require,module,exports){\\n'use strict';\\nvar toObject = require('../internals/to-object');\\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\\nvar toLength = require('../internals/to-length');\\n\\n// `Array.prototype.fill` method implementation\\n// https://tc39.es/ecma262/#sec-array.prototype.fill\\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\\n  var O = toObject(this);\\n  var length = toLength(O.length);\\n  var argumentsLength = arguments.length;\\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\\n  while (endPos > index) O[index++] = value;\\n  return O;\\n};\\n\\n},{\\\"../internals/to-absolute-index\\\":114,\\\"../internals/to-length\\\":118,\\\"../internals/to-object\\\":119}],30:[function(require,module,exports){\\n'use strict';\\nvar bind = require('../internals/function-bind-context');\\nvar toObject = require('../internals/to-object');\\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\\nvar toLength = require('../internals/to-length');\\nvar createProperty = require('../internals/create-property');\\nvar getIteratorMethod = require('../internals/get-iterator-method');\\n\\n// `Array.from` method implementation\\n// https://tc39.es/ecma262/#sec-array.from\\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\\n  var O = toObject(arrayLike);\\n  var C = typeof this == 'function' ? this : Array;\\n  var argumentsLength = arguments.length;\\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\\n  var mapping = mapfn !== undefined;\\n  var iteratorMethod = getIteratorMethod(O);\\n  var index = 0;\\n  var length, result, step, iterator, next, value;\\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\\n    iterator = iteratorMethod.call(O);\\n    next = iterator.next;\\n    result = new C();\\n    for (;!(step = next.call(iterator)).done; index++) {\\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\\n      createProperty(result, index, value);\\n    }\\n  } else {\\n    length = toLength(O.length);\\n    result = new C(length);\\n    for (;length > index; index++) {\\n      value = mapping ? mapfn(O[index], index) : O[index];\\n      createProperty(result, index, value);\\n    }\\n  }\\n  result.length = index;\\n  return result;\\n};\\n\\n},{\\\"../internals/call-with-safe-iteration-closing\\\":34,\\\"../internals/create-property\\\":44,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-iterator-method\\\":57,\\\"../internals/is-array-iterator-method\\\":71,\\\"../internals/to-length\\\":118,\\\"../internals/to-object\\\":119}],31:[function(require,module,exports){\\nvar toIndexedObject = require('../internals/to-indexed-object');\\nvar toLength = require('../internals/to-length');\\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\\n\\n// `Array.prototype.{ indexOf, includes }` methods implementation\\nvar createMethod = function (IS_INCLUDES) {\\n  return function ($this, el, fromIndex) {\\n    var O = toIndexedObject($this);\\n    var length = toLength(O.length);\\n    var index = toAbsoluteIndex(fromIndex, length);\\n    var value;\\n    // Array#includes uses SameValueZero equality algorithm\\n    // eslint-disable-next-line no-self-compare -- NaN check\\n    if (IS_INCLUDES && el != el) while (length > index) {\\n      value = O[index++];\\n      // eslint-disable-next-line no-self-compare -- NaN check\\n      if (value != value) return true;\\n    // Array#indexOf ignores holes, Array#includes - not\\n    } else for (;length > index; index++) {\\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\\n    } return !IS_INCLUDES && -1;\\n  };\\n};\\n\\nmodule.exports = {\\n  // `Array.prototype.includes` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\\n  includes: createMethod(true),\\n  // `Array.prototype.indexOf` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\\n  indexOf: createMethod(false)\\n};\\n\\n},{\\\"../internals/to-absolute-index\\\":114,\\\"../internals/to-indexed-object\\\":116,\\\"../internals/to-length\\\":118}],32:[function(require,module,exports){\\nvar bind = require('../internals/function-bind-context');\\nvar IndexedObject = require('../internals/indexed-object');\\nvar toObject = require('../internals/to-object');\\nvar toLength = require('../internals/to-length');\\nvar arraySpeciesCreate = require('../internals/array-species-create');\\n\\nvar push = [].push;\\n\\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation\\nvar createMethod = function (TYPE) {\\n  var IS_MAP = TYPE == 1;\\n  var IS_FILTER = TYPE == 2;\\n  var IS_SOME = TYPE == 3;\\n  var IS_EVERY = TYPE == 4;\\n  var IS_FIND_INDEX = TYPE == 6;\\n  var IS_FILTER_OUT = TYPE == 7;\\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\\n  return function ($this, callbackfn, that, specificCreate) {\\n    var O = toObject($this);\\n    var self = IndexedObject(O);\\n    var boundFunction = bind(callbackfn, that, 3);\\n    var length = toLength(self.length);\\n    var index = 0;\\n    var create = specificCreate || arraySpeciesCreate;\\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;\\n    var value, result;\\n    for (;length > index; index++) if (NO_HOLES || index in self) {\\n      value = self[index];\\n      result = boundFunction(value, index, O);\\n      if (TYPE) {\\n        if (IS_MAP) target[index] = result; // map\\n        else if (result) switch (TYPE) {\\n          case 3: return true;              // some\\n          case 5: return value;             // find\\n          case 6: return index;             // findIndex\\n          case 2: push.call(target, value); // filter\\n        } else switch (TYPE) {\\n          case 4: return false;             // every\\n          case 7: push.call(target, value); // filterOut\\n        }\\n      }\\n    }\\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\\n  };\\n};\\n\\nmodule.exports = {\\n  // `Array.prototype.forEach` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\\n  forEach: createMethod(0),\\n  // `Array.prototype.map` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.map\\n  map: createMethod(1),\\n  // `Array.prototype.filter` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\\n  filter: createMethod(2),\\n  // `Array.prototype.some` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.some\\n  some: createMethod(3),\\n  // `Array.prototype.every` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.every\\n  every: createMethod(4),\\n  // `Array.prototype.find` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.find\\n  find: createMethod(5),\\n  // `Array.prototype.findIndex` method\\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\\n  findIndex: createMethod(6),\\n  // `Array.prototype.filterOut` method\\n  // https://github.com/tc39/proposal-array-filtering\\n  filterOut: createMethod(7)\\n};\\n\\n},{\\\"../internals/array-species-create\\\":33,\\\"../internals/function-bind-context\\\":55,\\\"../internals/indexed-object\\\":67,\\\"../internals/to-length\\\":118,\\\"../internals/to-object\\\":119}],33:[function(require,module,exports){\\nvar isObject = require('../internals/is-object');\\nvar isArray = require('../internals/is-array');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar SPECIES = wellKnownSymbol('species');\\n\\n// `ArraySpeciesCreate` abstract operation\\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\\nmodule.exports = function (originalArray, length) {\\n  var C;\\n  if (isArray(originalArray)) {\\n    C = originalArray.constructor;\\n    // cross-realm fallback\\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\\n    else if (isObject(C)) {\\n      C = C[SPECIES];\\n      if (C === null) C = undefined;\\n    }\\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\\n};\\n\\n},{\\\"../internals/is-array\\\":72,\\\"../internals/is-object\\\":74,\\\"../internals/well-known-symbol\\\":129}],34:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\nvar iteratorClose = require('../internals/iterator-close');\\n\\n// call something on iterator step with safe closing on error\\nmodule.exports = function (iterator, fn, value, ENTRIES) {\\n  try {\\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\\n  // 7.4.6 IteratorClose(iterator, completion)\\n  } catch (error) {\\n    iteratorClose(iterator);\\n    throw error;\\n  }\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/iterator-close\\\":77}],35:[function(require,module,exports){\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar SAFE_CLOSING = false;\\n\\ntry {\\n  var called = 0;\\n  var iteratorWithReturn = {\\n    next: function () {\\n      return { done: !!called++ };\\n    },\\n    'return': function () {\\n      SAFE_CLOSING = true;\\n    }\\n  };\\n  iteratorWithReturn[ITERATOR] = function () {\\n    return this;\\n  };\\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\\n  Array.from(iteratorWithReturn, function () { throw 2; });\\n} catch (error) { /* empty */ }\\n\\nmodule.exports = function (exec, SKIP_CLOSING) {\\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\\n  var ITERATION_SUPPORT = false;\\n  try {\\n    var object = {};\\n    object[ITERATOR] = function () {\\n      return {\\n        next: function () {\\n          return { done: ITERATION_SUPPORT = true };\\n        }\\n      };\\n    };\\n    exec(object);\\n  } catch (error) { /* empty */ }\\n  return ITERATION_SUPPORT;\\n};\\n\\n},{\\\"../internals/well-known-symbol\\\":129}],36:[function(require,module,exports){\\nvar toString = {}.toString;\\n\\nmodule.exports = function (it) {\\n  return toString.call(it).slice(8, -1);\\n};\\n\\n},{}],37:[function(require,module,exports){\\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\\nvar classofRaw = require('../internals/classof-raw');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\\n// ES3 wrong here\\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\\n\\n// fallback for IE11 Script Access Denied error\\nvar tryGet = function (it, key) {\\n  try {\\n    return it[key];\\n  } catch (error) { /* empty */ }\\n};\\n\\n// getting tag from ES6+ `Object.prototype.toString`\\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\\n  var O, tag, result;\\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\\n    // @@toStringTag case\\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\\n    // builtinTag case\\n    : CORRECT_ARGUMENTS ? classofRaw(O)\\n    // ES3 arguments fallback\\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\\n};\\n\\n},{\\\"../internals/classof-raw\\\":36,\\\"../internals/to-string-tag-support\\\":123,\\\"../internals/well-known-symbol\\\":129}],38:[function(require,module,exports){\\n'use strict';\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\n\\n// https://github.com/tc39/collection-methods\\nmodule.exports = function (/* ...elements */) {\\n  var collection = anObject(this);\\n  var remover = aFunction(collection['delete']);\\n  var allDeleted = true;\\n  var wasDeleted;\\n  for (var k = 0, len = arguments.length; k < len; k++) {\\n    wasDeleted = remover.call(collection, arguments[k]);\\n    allDeleted = allDeleted && wasDeleted;\\n  }\\n  return !!allDeleted;\\n};\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25}],39:[function(require,module,exports){\\nvar has = require('../internals/has');\\nvar ownKeys = require('../internals/own-keys');\\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\\nvar definePropertyModule = require('../internals/object-define-property');\\n\\nmodule.exports = function (target, source) {\\n  var keys = ownKeys(source);\\n  var defineProperty = definePropertyModule.f;\\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\\n  for (var i = 0; i < keys.length; i++) {\\n    var key = keys[i];\\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\\n  }\\n};\\n\\n},{\\\"../internals/has\\\":62,\\\"../internals/object-define-property\\\":86,\\\"../internals/object-get-own-property-descriptor\\\":87,\\\"../internals/own-keys\\\":95}],40:[function(require,module,exports){\\nvar fails = require('../internals/fails');\\n\\nmodule.exports = !fails(function () {\\n  function F() { /* empty */ }\\n  F.prototype.constructor = null;\\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\\n  return Object.getPrototypeOf(new F()) !== F.prototype;\\n});\\n\\n},{\\\"../internals/fails\\\":53}],41:[function(require,module,exports){\\n'use strict';\\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\\nvar create = require('../internals/object-create');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\nvar setToStringTag = require('../internals/set-to-string-tag');\\nvar Iterators = require('../internals/iterators');\\n\\nvar returnThis = function () { return this; };\\n\\nmodule.exports = function (IteratorConstructor, NAME, next) {\\n  var TO_STRING_TAG = NAME + ' Iterator';\\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\\n  Iterators[TO_STRING_TAG] = returnThis;\\n  return IteratorConstructor;\\n};\\n\\n},{\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/iterators\\\":79,\\\"../internals/iterators-core\\\":78,\\\"../internals/object-create\\\":84,\\\"../internals/set-to-string-tag\\\":107}],42:[function(require,module,exports){\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar definePropertyModule = require('../internals/object-define-property');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\n\\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\\n} : function (object, key, value) {\\n  object[key] = value;\\n  return object;\\n};\\n\\n},{\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/descriptors\\\":46,\\\"../internals/object-define-property\\\":86}],43:[function(require,module,exports){\\nmodule.exports = function (bitmap, value) {\\n  return {\\n    enumerable: !(bitmap & 1),\\n    configurable: !(bitmap & 2),\\n    writable: !(bitmap & 4),\\n    value: value\\n  };\\n};\\n\\n},{}],44:[function(require,module,exports){\\n'use strict';\\nvar toPrimitive = require('../internals/to-primitive');\\nvar definePropertyModule = require('../internals/object-define-property');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\n\\nmodule.exports = function (object, key, value) {\\n  var propertyKey = toPrimitive(key);\\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\\n  else object[propertyKey] = value;\\n};\\n\\n},{\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/object-define-property\\\":86,\\\"../internals/to-primitive\\\":122}],45:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\\nvar setToStringTag = require('../internals/set-to-string-tag');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar redefine = require('../internals/redefine');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar IS_PURE = require('../internals/is-pure');\\nvar Iterators = require('../internals/iterators');\\nvar IteratorsCore = require('../internals/iterators-core');\\n\\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar KEYS = 'keys';\\nvar VALUES = 'values';\\nvar ENTRIES = 'entries';\\n\\nvar returnThis = function () { return this; };\\n\\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\\n  createIteratorConstructor(IteratorConstructor, NAME, next);\\n\\n  var getIterationMethod = function (KIND) {\\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\\n    switch (KIND) {\\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\\n    } return function () { return new IteratorConstructor(this); };\\n  };\\n\\n  var TO_STRING_TAG = NAME + ' Iterator';\\n  var INCORRECT_VALUES_NAME = false;\\n  var IterablePrototype = Iterable.prototype;\\n  var nativeIterator = IterablePrototype[ITERATOR]\\n    || IterablePrototype['@@iterator']\\n    || DEFAULT && IterablePrototype[DEFAULT];\\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\\n  var CurrentIteratorPrototype, methods, KEY;\\n\\n  // fix native\\n  if (anyNativeIterator) {\\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\\n        if (setPrototypeOf) {\\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\\n        }\\n      }\\n      // Set @@toStringTag to native iterators\\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\\n    }\\n  }\\n\\n  // fix Array#{values, @@iterator}.name in V8 / FF\\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\\n    INCORRECT_VALUES_NAME = true;\\n    defaultIterator = function values() { return nativeIterator.call(this); };\\n  }\\n\\n  // define iterator\\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\\n  }\\n  Iterators[NAME] = defaultIterator;\\n\\n  // export additional methods\\n  if (DEFAULT) {\\n    methods = {\\n      values: getIterationMethod(VALUES),\\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\\n      entries: getIterationMethod(ENTRIES)\\n    };\\n    if (FORCED) for (KEY in methods) {\\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\\n        redefine(IterablePrototype, KEY, methods[KEY]);\\n      }\\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\\n  }\\n\\n  return methods;\\n};\\n\\n},{\\\"../internals/create-iterator-constructor\\\":41,\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/export\\\":52,\\\"../internals/is-pure\\\":75,\\\"../internals/iterators\\\":79,\\\"../internals/iterators-core\\\":78,\\\"../internals/object-get-prototype-of\\\":90,\\\"../internals/object-set-prototype-of\\\":94,\\\"../internals/redefine\\\":98,\\\"../internals/set-to-string-tag\\\":107,\\\"../internals/well-known-symbol\\\":129}],46:[function(require,module,exports){\\nvar fails = require('../internals/fails');\\n\\n// Detect IE8's incomplete defineProperty implementation\\nmodule.exports = !fails(function () {\\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\\n});\\n\\n},{\\\"../internals/fails\\\":53}],47:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar isObject = require('../internals/is-object');\\n\\nvar document = global.document;\\n// typeof document.createElement is 'object' in old IE\\nvar EXISTS = isObject(document) && isObject(document.createElement);\\n\\nmodule.exports = function (it) {\\n  return EXISTS ? document.createElement(it) : {};\\n};\\n\\n},{\\\"../internals/global\\\":61,\\\"../internals/is-object\\\":74}],48:[function(require,module,exports){\\n// iterable DOM collections\\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\\nmodule.exports = {\\n  CSSRuleList: 0,\\n  CSSStyleDeclaration: 0,\\n  CSSValueList: 0,\\n  ClientRectList: 0,\\n  DOMRectList: 0,\\n  DOMStringList: 0,\\n  DOMTokenList: 1,\\n  DataTransferItemList: 0,\\n  FileList: 0,\\n  HTMLAllCollection: 0,\\n  HTMLCollection: 0,\\n  HTMLFormElement: 0,\\n  HTMLSelectElement: 0,\\n  MediaList: 0,\\n  MimeTypeArray: 0,\\n  NamedNodeMap: 0,\\n  NodeList: 1,\\n  PaintRequestList: 0,\\n  Plugin: 0,\\n  PluginArray: 0,\\n  SVGLengthList: 0,\\n  SVGNumberList: 0,\\n  SVGPathSegList: 0,\\n  SVGPointList: 0,\\n  SVGStringList: 0,\\n  SVGTransformList: 0,\\n  SourceBufferList: 0,\\n  StyleSheetList: 0,\\n  TextTrackCueList: 0,\\n  TextTrackList: 0,\\n  TouchList: 0\\n};\\n\\n},{}],49:[function(require,module,exports){\\nvar getBuiltIn = require('../internals/get-built-in');\\n\\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\\n\\n},{\\\"../internals/get-built-in\\\":56}],50:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar userAgent = require('../internals/engine-user-agent');\\n\\nvar process = global.process;\\nvar versions = process && process.versions;\\nvar v8 = versions && versions.v8;\\nvar match, version;\\n\\nif (v8) {\\n  match = v8.split('.');\\n  version = match[0] < 4 ? 1 : match[0] + match[1];\\n} else if (userAgent) {\\n  match = userAgent.match(/Edge\\\\/(\\\\d+)/);\\n  if (!match || match[1] >= 74) {\\n    match = userAgent.match(/Chrome\\\\/(\\\\d+)/);\\n    if (match) version = match[1];\\n  }\\n}\\n\\nmodule.exports = version && +version;\\n\\n},{\\\"../internals/engine-user-agent\\\":49,\\\"../internals/global\\\":61}],51:[function(require,module,exports){\\n// IE8- don't enum bug keys\\nmodule.exports = [\\n  'constructor',\\n  'hasOwnProperty',\\n  'isPrototypeOf',\\n  'propertyIsEnumerable',\\n  'toLocaleString',\\n  'toString',\\n  'valueOf'\\n];\\n\\n},{}],52:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar redefine = require('../internals/redefine');\\nvar setGlobal = require('../internals/set-global');\\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\\nvar isForced = require('../internals/is-forced');\\n\\n/*\\n  options.target      - name of the target object\\n  options.global      - target is the global object\\n  options.stat        - export as static methods of target\\n  options.proto       - export as prototype methods of target\\n  options.real        - real prototype method for the `pure` version\\n  options.forced      - export even if the native feature is available\\n  options.bind        - bind methods to the target, required for the `pure` version\\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\\n  options.sham        - add a flag to not completely full polyfills\\n  options.enumerable  - export as enumerable property\\n  options.noTargetGet - prevent calling a getter on target\\n*/\\nmodule.exports = function (options, source) {\\n  var TARGET = options.target;\\n  var GLOBAL = options.global;\\n  var STATIC = options.stat;\\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\\n  if (GLOBAL) {\\n    target = global;\\n  } else if (STATIC) {\\n    target = global[TARGET] || setGlobal(TARGET, {});\\n  } else {\\n    target = (global[TARGET] || {}).prototype;\\n  }\\n  if (target) for (key in source) {\\n    sourceProperty = source[key];\\n    if (options.noTargetGet) {\\n      descriptor = getOwnPropertyDescriptor(target, key);\\n      targetProperty = descriptor && descriptor.value;\\n    } else targetProperty = target[key];\\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\\n    // contained in target\\n    if (!FORCED && targetProperty !== undefined) {\\n      if (typeof sourceProperty === typeof targetProperty) continue;\\n      copyConstructorProperties(sourceProperty, targetProperty);\\n    }\\n    // add a flag to not completely full polyfills\\n    if (options.sham || (targetProperty && targetProperty.sham)) {\\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\\n    }\\n    // extend global\\n    redefine(target, key, sourceProperty, options);\\n  }\\n};\\n\\n},{\\\"../internals/copy-constructor-properties\\\":39,\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/global\\\":61,\\\"../internals/is-forced\\\":73,\\\"../internals/object-get-own-property-descriptor\\\":87,\\\"../internals/redefine\\\":98,\\\"../internals/set-global\\\":105}],53:[function(require,module,exports){\\nmodule.exports = function (exec) {\\n  try {\\n    return !!exec();\\n  } catch (error) {\\n    return true;\\n  }\\n};\\n\\n},{}],54:[function(require,module,exports){\\n'use strict';\\n// TODO: Remove from `core-js@4` since it's moved to entry points\\nrequire('../modules/es.regexp.exec');\\nvar redefine = require('../internals/redefine');\\nvar regexpExec = require('../internals/regexp-exec');\\nvar fails = require('../internals/fails');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\n\\nvar SPECIES = wellKnownSymbol('species');\\nvar RegExpPrototype = RegExp.prototype;\\n\\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\\n  // #replace needs built-in support for named groups.\\n  // #match works fine because it just return the exec results, even if it has\\n  // a \\\"grops\\\" property.\\n  var re = /./;\\n  re.exec = function () {\\n    var result = [];\\n    result.groups = { a: '7' };\\n    return result;\\n  };\\n  return ''.replace(re, '$<a>') !== '7';\\n});\\n\\n// IE <= 11 replaces $0 with the whole match, as if it was $&\\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\\nvar REPLACE_KEEPS_$0 = (function () {\\n  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing\\n  return 'a'.replace(/./, '$0') === '$0';\\n})();\\n\\nvar REPLACE = wellKnownSymbol('replace');\\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\\n  if (/./[REPLACE]) {\\n    return /./[REPLACE]('a', '$0') === '';\\n  }\\n  return false;\\n})();\\n\\n// Chrome 51 has a buggy \\\"split\\\" implementation when RegExp#exec !== nativeExec\\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\\n  var re = /(?:)/;\\n  var originalExec = re.exec;\\n  re.exec = function () { return originalExec.apply(this, arguments); };\\n  var result = 'ab'.split(re);\\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\\n});\\n\\nmodule.exports = function (KEY, length, exec, sham) {\\n  var SYMBOL = wellKnownSymbol(KEY);\\n\\n  var DELEGATES_TO_SYMBOL = !fails(function () {\\n    // String methods call symbol-named RegEp methods\\n    var O = {};\\n    O[SYMBOL] = function () { return 7; };\\n    return ''[KEY](O) != 7;\\n  });\\n\\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\\n    // Symbol-named RegExp methods call .exec\\n    var execCalled = false;\\n    var re = /a/;\\n\\n    if (KEY === 'split') {\\n      // We can't use real regex here since it causes deoptimization\\n      // and serious performance degradation in V8\\n      // https://github.com/zloirock/core-js/issues/306\\n      re = {};\\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\\n      // a new one. We need to return the patched regex when creating the new one.\\n      re.constructor = {};\\n      re.constructor[SPECIES] = function () { return re; };\\n      re.flags = '';\\n      re[SYMBOL] = /./[SYMBOL];\\n    }\\n\\n    re.exec = function () { execCalled = true; return null; };\\n\\n    re[SYMBOL]('');\\n    return !execCalled;\\n  });\\n\\n  if (\\n    !DELEGATES_TO_SYMBOL ||\\n    !DELEGATES_TO_EXEC ||\\n    (KEY === 'replace' && !(\\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\\n      REPLACE_KEEPS_$0 &&\\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\\n    )) ||\\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\\n  ) {\\n    var nativeRegExpMethod = /./[SYMBOL];\\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\\n      var $exec = regexp.exec;\\n      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {\\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\\n          // The native String method already delegates to @@method (this\\n          // polyfilled function), leasing to infinite recursion.\\n          // We avoid it by directly calling the native @@method method.\\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\\n        }\\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\\n      }\\n      return { done: false };\\n    }, {\\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\\n    });\\n    var stringMethod = methods[0];\\n    var regexMethod = methods[1];\\n\\n    redefine(String.prototype, KEY, stringMethod);\\n    redefine(RegExpPrototype, SYMBOL, length == 2\\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\\n      // 21.2.5.6 RegExp.prototype[@@match](string)\\n      // 21.2.5.9 RegExp.prototype[@@search](string)\\n      : function (string) { return regexMethod.call(string, this); }\\n    );\\n  }\\n\\n  if (sham) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\\n};\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/fails\\\":53,\\\"../internals/redefine\\\":98,\\\"../internals/regexp-exec\\\":100,\\\"../internals/well-known-symbol\\\":129,\\\"../modules/es.regexp.exec\\\":131}],55:[function(require,module,exports){\\nvar aFunction = require('../internals/a-function');\\n\\n// optional / simple context binding\\nmodule.exports = function (fn, that, length) {\\n  aFunction(fn);\\n  if (that === undefined) return fn;\\n  switch (length) {\\n    case 0: return function () {\\n      return fn.call(that);\\n    };\\n    case 1: return function (a) {\\n      return fn.call(that, a);\\n    };\\n    case 2: return function (a, b) {\\n      return fn.call(that, a, b);\\n    };\\n    case 3: return function (a, b, c) {\\n      return fn.call(that, a, b, c);\\n    };\\n  }\\n  return function (/* ...args */) {\\n    return fn.apply(that, arguments);\\n  };\\n};\\n\\n},{\\\"../internals/a-function\\\":20}],56:[function(require,module,exports){\\nvar path = require('../internals/path');\\nvar global = require('../internals/global');\\n\\nvar aFunction = function (variable) {\\n  return typeof variable == 'function' ? variable : undefined;\\n};\\n\\nmodule.exports = function (namespace, method) {\\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\\n};\\n\\n},{\\\"../internals/global\\\":61,\\\"../internals/path\\\":96}],57:[function(require,module,exports){\\nvar classof = require('../internals/classof');\\nvar Iterators = require('../internals/iterators');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\n\\nmodule.exports = function (it) {\\n  if (it != undefined) return it[ITERATOR]\\n    || it['@@iterator']\\n    || Iterators[classof(it)];\\n};\\n\\n},{\\\"../internals/classof\\\":37,\\\"../internals/iterators\\\":79,\\\"../internals/well-known-symbol\\\":129}],58:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\nvar getIteratorMethod = require('../internals/get-iterator-method');\\n\\nmodule.exports = function (it) {\\n  var iteratorMethod = getIteratorMethod(it);\\n  if (typeof iteratorMethod != 'function') {\\n    throw TypeError(String(it) + ' is not iterable');\\n  } return anObject(iteratorMethod.call(it));\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/get-iterator-method\\\":57}],59:[function(require,module,exports){\\nvar IS_PURE = require('../internals/is-pure');\\nvar getIterator = require('../internals/get-iterator');\\n\\nmodule.exports = IS_PURE ? getIterator : function (it) {\\n  // eslint-disable-next-line es/no-map -- safe\\n  return Map.prototype.entries.call(it);\\n};\\n\\n},{\\\"../internals/get-iterator\\\":58,\\\"../internals/is-pure\\\":75}],60:[function(require,module,exports){\\nvar toObject = require('../internals/to-object');\\n\\nvar floor = Math.floor;\\nvar replace = ''.replace;\\nvar SUBSTITUTION_SYMBOLS = /\\\\$([$&'`]|\\\\d{1,2}|<[^>]*>)/g;\\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\\\$([$&'`]|\\\\d{1,2})/g;\\n\\n// https://tc39.es/ecma262/#sec-getsubstitution\\nmodule.exports = function (matched, str, position, captures, namedCaptures, replacement) {\\n  var tailPos = position + matched.length;\\n  var m = captures.length;\\n  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\\n  if (namedCaptures !== undefined) {\\n    namedCaptures = toObject(namedCaptures);\\n    symbols = SUBSTITUTION_SYMBOLS;\\n  }\\n  return replace.call(replacement, symbols, function (match, ch) {\\n    var capture;\\n    switch (ch.charAt(0)) {\\n      case '$': return '$';\\n      case '&': return matched;\\n      case '`': return str.slice(0, position);\\n      case \\\"'\\\": return str.slice(tailPos);\\n      case '<':\\n        capture = namedCaptures[ch.slice(1, -1)];\\n        break;\\n      default: // \\\\d\\\\d?\\n        var n = +ch;\\n        if (n === 0) return match;\\n        if (n > m) {\\n          var f = floor(n / 10);\\n          if (f === 0) return match;\\n          if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\\n          return match;\\n        }\\n        capture = captures[n - 1];\\n    }\\n    return capture === undefined ? '' : capture;\\n  });\\n};\\n\\n},{\\\"../internals/to-object\\\":119}],61:[function(require,module,exports){\\n(function (global){(function (){\\nvar check = function (it) {\\n  return it && it.Math == Math && it;\\n};\\n\\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\\nmodule.exports =\\n  // eslint-disable-next-line es/no-global-this -- safe\\n  check(typeof globalThis == 'object' && globalThis) ||\\n  check(typeof window == 'object' && window) ||\\n  // eslint-disable-next-line no-restricted-globals -- safe\\n  check(typeof self == 'object' && self) ||\\n  check(typeof global == 'object' && global) ||\\n  // eslint-disable-next-line no-new-func -- fallback\\n  (function () { return this; })() || Function('return this')();\\n\\n}).call(this)}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],62:[function(require,module,exports){\\nvar toObject = require('../internals/to-object');\\n\\nvar hasOwnProperty = {}.hasOwnProperty;\\n\\nmodule.exports = function hasOwn(it, key) {\\n  return hasOwnProperty.call(toObject(it), key);\\n};\\n\\n},{\\\"../internals/to-object\\\":119}],63:[function(require,module,exports){\\nmodule.exports = {};\\n\\n},{}],64:[function(require,module,exports){\\nvar getBuiltIn = require('../internals/get-built-in');\\n\\nmodule.exports = getBuiltIn('document', 'documentElement');\\n\\n},{\\\"../internals/get-built-in\\\":56}],65:[function(require,module,exports){\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar fails = require('../internals/fails');\\nvar createElement = require('../internals/document-create-element');\\n\\n// Thank's IE8 for his funny defineProperty\\nmodule.exports = !DESCRIPTORS && !fails(function () {\\n  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\\n  return Object.defineProperty(createElement('div'), 'a', {\\n    get: function () { return 7; }\\n  }).a != 7;\\n});\\n\\n},{\\\"../internals/descriptors\\\":46,\\\"../internals/document-create-element\\\":47,\\\"../internals/fails\\\":53}],66:[function(require,module,exports){\\n// IEEE754 conversions based on https://github.com/feross/ieee754\\nvar abs = Math.abs;\\nvar pow = Math.pow;\\nvar floor = Math.floor;\\nvar log = Math.log;\\nvar LN2 = Math.LN2;\\n\\nvar pack = function (number, mantissaLength, bytes) {\\n  var buffer = new Array(bytes);\\n  var exponentLength = bytes * 8 - mantissaLength - 1;\\n  var eMax = (1 << exponentLength) - 1;\\n  var eBias = eMax >> 1;\\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\\n  var index = 0;\\n  var exponent, mantissa, c;\\n  number = abs(number);\\n  // eslint-disable-next-line no-self-compare -- NaN check\\n  if (number != number || number === Infinity) {\\n    // eslint-disable-next-line no-self-compare -- NaN check\\n    mantissa = number != number ? 1 : 0;\\n    exponent = eMax;\\n  } else {\\n    exponent = floor(log(number) / LN2);\\n    if (number * (c = pow(2, -exponent)) < 1) {\\n      exponent--;\\n      c *= 2;\\n    }\\n    if (exponent + eBias >= 1) {\\n      number += rt / c;\\n    } else {\\n      number += rt * pow(2, 1 - eBias);\\n    }\\n    if (number * c >= 2) {\\n      exponent++;\\n      c /= 2;\\n    }\\n    if (exponent + eBias >= eMax) {\\n      mantissa = 0;\\n      exponent = eMax;\\n    } else if (exponent + eBias >= 1) {\\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\\n      exponent = exponent + eBias;\\n    } else {\\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\\n      exponent = 0;\\n    }\\n  }\\n  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);\\n  exponent = exponent << mantissaLength | mantissa;\\n  exponentLength += mantissaLength;\\n  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);\\n  buffer[--index] |= sign * 128;\\n  return buffer;\\n};\\n\\nvar unpack = function (buffer, mantissaLength) {\\n  var bytes = buffer.length;\\n  var exponentLength = bytes * 8 - mantissaLength - 1;\\n  var eMax = (1 << exponentLength) - 1;\\n  var eBias = eMax >> 1;\\n  var nBits = exponentLength - 7;\\n  var index = bytes - 1;\\n  var sign = buffer[index--];\\n  var exponent = sign & 127;\\n  var mantissa;\\n  sign >>= 7;\\n  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);\\n  mantissa = exponent & (1 << -nBits) - 1;\\n  exponent >>= -nBits;\\n  nBits += mantissaLength;\\n  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);\\n  if (exponent === 0) {\\n    exponent = 1 - eBias;\\n  } else if (exponent === eMax) {\\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\\n  } else {\\n    mantissa = mantissa + pow(2, mantissaLength);\\n    exponent = exponent - eBias;\\n  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\\n};\\n\\nmodule.exports = {\\n  pack: pack,\\n  unpack: unpack\\n};\\n\\n},{}],67:[function(require,module,exports){\\nvar fails = require('../internals/fails');\\nvar classof = require('../internals/classof-raw');\\n\\nvar split = ''.split;\\n\\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\\nmodule.exports = fails(function () {\\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\\n  // eslint-disable-next-line no-prototype-builtins -- safe\\n  return !Object('z').propertyIsEnumerable(0);\\n}) ? function (it) {\\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\\n} : Object;\\n\\n},{\\\"../internals/classof-raw\\\":36,\\\"../internals/fails\\\":53}],68:[function(require,module,exports){\\nvar isObject = require('../internals/is-object');\\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\\n\\n// makes subclassing work correct for wrapped built-ins\\nmodule.exports = function ($this, dummy, Wrapper) {\\n  var NewTarget, NewTargetPrototype;\\n  if (\\n    // it can work only with native `setPrototypeOf`\\n    setPrototypeOf &&\\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\\n    typeof (NewTarget = dummy.constructor) == 'function' &&\\n    NewTarget !== Wrapper &&\\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\\n    NewTargetPrototype !== Wrapper.prototype\\n  ) setPrototypeOf($this, NewTargetPrototype);\\n  return $this;\\n};\\n\\n},{\\\"../internals/is-object\\\":74,\\\"../internals/object-set-prototype-of\\\":94}],69:[function(require,module,exports){\\nvar store = require('../internals/shared-store');\\n\\nvar functionToString = Function.toString;\\n\\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\\nif (typeof store.inspectSource != 'function') {\\n  store.inspectSource = function (it) {\\n    return functionToString.call(it);\\n  };\\n}\\n\\nmodule.exports = store.inspectSource;\\n\\n},{\\\"../internals/shared-store\\\":109}],70:[function(require,module,exports){\\nvar NATIVE_WEAK_MAP = require('../internals/native-weak-map');\\nvar global = require('../internals/global');\\nvar isObject = require('../internals/is-object');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar objectHas = require('../internals/has');\\nvar shared = require('../internals/shared-store');\\nvar sharedKey = require('../internals/shared-key');\\nvar hiddenKeys = require('../internals/hidden-keys');\\n\\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\\nvar WeakMap = global.WeakMap;\\nvar set, get, has;\\n\\nvar enforce = function (it) {\\n  return has(it) ? get(it) : set(it, {});\\n};\\n\\nvar getterFor = function (TYPE) {\\n  return function (it) {\\n    var state;\\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\\n    } return state;\\n  };\\n};\\n\\nif (NATIVE_WEAK_MAP || shared.state) {\\n  var store = shared.state || (shared.state = new WeakMap());\\n  var wmget = store.get;\\n  var wmhas = store.has;\\n  var wmset = store.set;\\n  set = function (it, metadata) {\\n    if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\\n    metadata.facade = it;\\n    wmset.call(store, it, metadata);\\n    return metadata;\\n  };\\n  get = function (it) {\\n    return wmget.call(store, it) || {};\\n  };\\n  has = function (it) {\\n    return wmhas.call(store, it);\\n  };\\n} else {\\n  var STATE = sharedKey('state');\\n  hiddenKeys[STATE] = true;\\n  set = function (it, metadata) {\\n    if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\\n    metadata.facade = it;\\n    createNonEnumerableProperty(it, STATE, metadata);\\n    return metadata;\\n  };\\n  get = function (it) {\\n    return objectHas(it, STATE) ? it[STATE] : {};\\n  };\\n  has = function (it) {\\n    return objectHas(it, STATE);\\n  };\\n}\\n\\nmodule.exports = {\\n  set: set,\\n  get: get,\\n  has: has,\\n  enforce: enforce,\\n  getterFor: getterFor\\n};\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/hidden-keys\\\":63,\\\"../internals/is-object\\\":74,\\\"../internals/native-weak-map\\\":82,\\\"../internals/shared-key\\\":108,\\\"../internals/shared-store\\\":109}],71:[function(require,module,exports){\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar Iterators = require('../internals/iterators');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar ArrayPrototype = Array.prototype;\\n\\n// check on default Array iterator\\nmodule.exports = function (it) {\\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\\n};\\n\\n},{\\\"../internals/iterators\\\":79,\\\"../internals/well-known-symbol\\\":129}],72:[function(require,module,exports){\\nvar classof = require('../internals/classof-raw');\\n\\n// `IsArray` abstract operation\\n// https://tc39.es/ecma262/#sec-isarray\\n// eslint-disable-next-line es/no-array-isarray -- safe\\nmodule.exports = Array.isArray || function isArray(arg) {\\n  return classof(arg) == 'Array';\\n};\\n\\n},{\\\"../internals/classof-raw\\\":36}],73:[function(require,module,exports){\\nvar fails = require('../internals/fails');\\n\\nvar replacement = /#|\\\\.prototype\\\\./;\\n\\nvar isForced = function (feature, detection) {\\n  var value = data[normalize(feature)];\\n  return value == POLYFILL ? true\\n    : value == NATIVE ? false\\n    : typeof detection == 'function' ? fails(detection)\\n    : !!detection;\\n};\\n\\nvar normalize = isForced.normalize = function (string) {\\n  return String(string).replace(replacement, '.').toLowerCase();\\n};\\n\\nvar data = isForced.data = {};\\nvar NATIVE = isForced.NATIVE = 'N';\\nvar POLYFILL = isForced.POLYFILL = 'P';\\n\\nmodule.exports = isForced;\\n\\n},{\\\"../internals/fails\\\":53}],74:[function(require,module,exports){\\nmodule.exports = function (it) {\\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\\n};\\n\\n},{}],75:[function(require,module,exports){\\nmodule.exports = false;\\n\\n},{}],76:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\\nvar toLength = require('../internals/to-length');\\nvar bind = require('../internals/function-bind-context');\\nvar getIteratorMethod = require('../internals/get-iterator-method');\\nvar iteratorClose = require('../internals/iterator-close');\\n\\nvar Result = function (stopped, result) {\\n  this.stopped = stopped;\\n  this.result = result;\\n};\\n\\nmodule.exports = function (iterable, unboundFunction, options) {\\n  var that = options && options.that;\\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\\n  var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);\\n  var iterator, iterFn, index, length, result, next, step;\\n\\n  var stop = function (condition) {\\n    if (iterator) iteratorClose(iterator);\\n    return new Result(true, condition);\\n  };\\n\\n  var callFn = function (value) {\\n    if (AS_ENTRIES) {\\n      anObject(value);\\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\\n  };\\n\\n  if (IS_ITERATOR) {\\n    iterator = iterable;\\n  } else {\\n    iterFn = getIteratorMethod(iterable);\\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\\n    // optimisation for array iterators\\n    if (isArrayIteratorMethod(iterFn)) {\\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\\n        result = callFn(iterable[index]);\\n        if (result && result instanceof Result) return result;\\n      } return new Result(false);\\n    }\\n    iterator = iterFn.call(iterable);\\n  }\\n\\n  next = iterator.next;\\n  while (!(step = next.call(iterator)).done) {\\n    try {\\n      result = callFn(step.value);\\n    } catch (error) {\\n      iteratorClose(iterator);\\n      throw error;\\n    }\\n    if (typeof result == 'object' && result && result instanceof Result) return result;\\n  } return new Result(false);\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-iterator-method\\\":57,\\\"../internals/is-array-iterator-method\\\":71,\\\"../internals/iterator-close\\\":77,\\\"../internals/to-length\\\":118}],77:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\n\\nmodule.exports = function (iterator) {\\n  var returnMethod = iterator['return'];\\n  if (returnMethod !== undefined) {\\n    return anObject(returnMethod.call(iterator)).value;\\n  }\\n};\\n\\n},{\\\"../internals/an-object\\\":25}],78:[function(require,module,exports){\\n'use strict';\\nvar fails = require('../internals/fails');\\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar has = require('../internals/has');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar IS_PURE = require('../internals/is-pure');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar BUGGY_SAFARI_ITERATORS = false;\\n\\nvar returnThis = function () { return this; };\\n\\n// `%IteratorPrototype%` object\\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\\n\\n/* eslint-disable es/no-array-prototype-keys -- safe */\\nif ([].keys) {\\n  arrayIterator = [].keys();\\n  // Safari 8 has buggy iterators w/o `next`\\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\\n  else {\\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\\n  }\\n}\\n\\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {\\n  var test = {};\\n  // FF44- legacy iterators case\\n  return IteratorPrototype[ITERATOR].call(test) !== test;\\n});\\n\\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\\n\\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\\nif ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {\\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\\n}\\n\\nmodule.exports = {\\n  IteratorPrototype: IteratorPrototype,\\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\\n};\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/fails\\\":53,\\\"../internals/has\\\":62,\\\"../internals/is-pure\\\":75,\\\"../internals/object-get-prototype-of\\\":90,\\\"../internals/well-known-symbol\\\":129}],79:[function(require,module,exports){\\narguments[4][63][0].apply(exports,arguments)\\n},{\\\"dup\\\":63}],80:[function(require,module,exports){\\n/* eslint-disable es/no-symbol -- required for testing */\\nvar V8_VERSION = require('../internals/engine-v8-version');\\nvar fails = require('../internals/fails');\\n\\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\\n  return !String(Symbol()) ||\\n    // Chrome 38 Symbol has incorrect toString conversion\\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\\n});\\n\\n},{\\\"../internals/engine-v8-version\\\":50,\\\"../internals/fails\\\":53}],81:[function(require,module,exports){\\nvar fails = require('../internals/fails');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar IS_PURE = require('../internals/is-pure');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\n\\nmodule.exports = !fails(function () {\\n  var url = new URL('b?a=1&b=2&c=3', 'http://a');\\n  var searchParams = url.searchParams;\\n  var result = '';\\n  url.pathname = 'c%20d';\\n  searchParams.forEach(function (value, key) {\\n    searchParams['delete']('b');\\n    result += key + value;\\n  });\\n  return (IS_PURE && !url.toJSON)\\n    || !searchParams.sort\\n    || url.href !== 'http://a/c%20d?a=1&c=3'\\n    || searchParams.get('c') !== '3'\\n    || String(new URLSearchParams('?a=1')) !== 'a=1'\\n    || !searchParams[ITERATOR]\\n    // throws in Edge\\n    || new URL('https://a@b').username !== 'a'\\n    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'\\n    // not punycoded in Edge\\n    || new URL('http://тест').host !== 'xn--e1aybc'\\n    // not escaped in Chrome 62-\\n    || new URL('http://a#б').hash !== '#%D0%B1'\\n    // fails in Chrome 66-\\n    || result !== 'a1c3'\\n    // throws in Safari\\n    || new URL('http://x', undefined).host !== 'x';\\n});\\n\\n},{\\\"../internals/fails\\\":53,\\\"../internals/is-pure\\\":75,\\\"../internals/well-known-symbol\\\":129}],82:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar inspectSource = require('../internals/inspect-source');\\n\\nvar WeakMap = global.WeakMap;\\n\\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\\n\\n},{\\\"../internals/global\\\":61,\\\"../internals/inspect-source\\\":69}],83:[function(require,module,exports){\\n'use strict';\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar fails = require('../internals/fails');\\nvar objectKeys = require('../internals/object-keys');\\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\\nvar toObject = require('../internals/to-object');\\nvar IndexedObject = require('../internals/indexed-object');\\n\\n// eslint-disable-next-line es/no-object-assign -- safe\\nvar $assign = Object.assign;\\n// eslint-disable-next-line es/no-object-defineproperty -- required for testing\\nvar defineProperty = Object.defineProperty;\\n\\n// `Object.assign` method\\n// https://tc39.es/ecma262/#sec-object.assign\\nmodule.exports = !$assign || fails(function () {\\n  // should have correct order of operations (Edge bug)\\n  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {\\n    enumerable: true,\\n    get: function () {\\n      defineProperty(this, 'b', {\\n        value: 3,\\n        enumerable: false\\n      });\\n    }\\n  }), { b: 2 })).b !== 1) return true;\\n  // should work with symbols and should have deterministic property order (V8 bug)\\n  var A = {};\\n  var B = {};\\n  // eslint-disable-next-line es/no-symbol -- safe\\n  var symbol = Symbol();\\n  var alphabet = 'abcdefghijklmnopqrst';\\n  A[symbol] = 7;\\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\\n  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;\\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`\\n  var T = toObject(target);\\n  var argumentsLength = arguments.length;\\n  var index = 1;\\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\\n  while (argumentsLength > index) {\\n    var S = IndexedObject(arguments[index++]);\\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\\n    var length = keys.length;\\n    var j = 0;\\n    var key;\\n    while (length > j) {\\n      key = keys[j++];\\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\\n    }\\n  } return T;\\n} : $assign;\\n\\n},{\\\"../internals/descriptors\\\":46,\\\"../internals/fails\\\":53,\\\"../internals/indexed-object\\\":67,\\\"../internals/object-get-own-property-symbols\\\":89,\\\"../internals/object-keys\\\":92,\\\"../internals/object-property-is-enumerable\\\":93,\\\"../internals/to-object\\\":119}],84:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\nvar defineProperties = require('../internals/object-define-properties');\\nvar enumBugKeys = require('../internals/enum-bug-keys');\\nvar hiddenKeys = require('../internals/hidden-keys');\\nvar html = require('../internals/html');\\nvar documentCreateElement = require('../internals/document-create-element');\\nvar sharedKey = require('../internals/shared-key');\\n\\nvar GT = '>';\\nvar LT = '<';\\nvar PROTOTYPE = 'prototype';\\nvar SCRIPT = 'script';\\nvar IE_PROTO = sharedKey('IE_PROTO');\\n\\nvar EmptyConstructor = function () { /* empty */ };\\n\\nvar scriptTag = function (content) {\\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\\n};\\n\\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\\n  activeXDocument.write(scriptTag(''));\\n  activeXDocument.close();\\n  var temp = activeXDocument.parentWindow.Object;\\n  activeXDocument = null; // avoid memory leak\\n  return temp;\\n};\\n\\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\\nvar NullProtoObjectViaIFrame = function () {\\n  // Thrash, waste and sodomy: IE GC bug\\n  var iframe = documentCreateElement('iframe');\\n  var JS = 'java' + SCRIPT + ':';\\n  var iframeDocument;\\n  iframe.style.display = 'none';\\n  html.appendChild(iframe);\\n  // https://github.com/zloirock/core-js/issues/475\\n  iframe.src = String(JS);\\n  iframeDocument = iframe.contentWindow.document;\\n  iframeDocument.open();\\n  iframeDocument.write(scriptTag('document.F=Object'));\\n  iframeDocument.close();\\n  return iframeDocument.F;\\n};\\n\\n// Check for document.domain and active x support\\n// No need to use active x approach when document.domain is not set\\n// see https://github.com/es-shims/es5-shim/issues/150\\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\\n// avoid IE GC bug\\nvar activeXDocument;\\nvar NullProtoObject = function () {\\n  try {\\n    /* global ActiveXObject -- old IE */\\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\\n  } catch (error) { /* ignore */ }\\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\\n  var length = enumBugKeys.length;\\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\\n  return NullProtoObject();\\n};\\n\\nhiddenKeys[IE_PROTO] = true;\\n\\n// `Object.create` method\\n// https://tc39.es/ecma262/#sec-object.create\\nmodule.exports = Object.create || function create(O, Properties) {\\n  var result;\\n  if (O !== null) {\\n    EmptyConstructor[PROTOTYPE] = anObject(O);\\n    result = new EmptyConstructor();\\n    EmptyConstructor[PROTOTYPE] = null;\\n    // add \\\"__proto__\\\" for Object.getPrototypeOf polyfill\\n    result[IE_PROTO] = O;\\n  } else result = NullProtoObject();\\n  return Properties === undefined ? result : defineProperties(result, Properties);\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/document-create-element\\\":47,\\\"../internals/enum-bug-keys\\\":51,\\\"../internals/hidden-keys\\\":63,\\\"../internals/html\\\":64,\\\"../internals/object-define-properties\\\":85,\\\"../internals/shared-key\\\":108}],85:[function(require,module,exports){\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar definePropertyModule = require('../internals/object-define-property');\\nvar anObject = require('../internals/an-object');\\nvar objectKeys = require('../internals/object-keys');\\n\\n// `Object.defineProperties` method\\n// https://tc39.es/ecma262/#sec-object.defineproperties\\n// eslint-disable-next-line es/no-object-defineproperties -- safe\\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\\n  anObject(O);\\n  var keys = objectKeys(Properties);\\n  var length = keys.length;\\n  var index = 0;\\n  var key;\\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\\n  return O;\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/descriptors\\\":46,\\\"../internals/object-define-property\\\":86,\\\"../internals/object-keys\\\":92}],86:[function(require,module,exports){\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\\nvar anObject = require('../internals/an-object');\\nvar toPrimitive = require('../internals/to-primitive');\\n\\n// eslint-disable-next-line es/no-object-defineproperty -- safe\\nvar $defineProperty = Object.defineProperty;\\n\\n// `Object.defineProperty` method\\n// https://tc39.es/ecma262/#sec-object.defineproperty\\nexports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {\\n  anObject(O);\\n  P = toPrimitive(P, true);\\n  anObject(Attributes);\\n  if (IE8_DOM_DEFINE) try {\\n    return $defineProperty(O, P, Attributes);\\n  } catch (error) { /* empty */ }\\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\\n  if ('value' in Attributes) O[P] = Attributes.value;\\n  return O;\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/descriptors\\\":46,\\\"../internals/ie8-dom-define\\\":65,\\\"../internals/to-primitive\\\":122}],87:[function(require,module,exports){\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\nvar toIndexedObject = require('../internals/to-indexed-object');\\nvar toPrimitive = require('../internals/to-primitive');\\nvar has = require('../internals/has');\\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\\n\\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\n\\n// `Object.getOwnPropertyDescriptor` method\\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\\n  O = toIndexedObject(O);\\n  P = toPrimitive(P, true);\\n  if (IE8_DOM_DEFINE) try {\\n    return $getOwnPropertyDescriptor(O, P);\\n  } catch (error) { /* empty */ }\\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\\n};\\n\\n},{\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/descriptors\\\":46,\\\"../internals/has\\\":62,\\\"../internals/ie8-dom-define\\\":65,\\\"../internals/object-property-is-enumerable\\\":93,\\\"../internals/to-indexed-object\\\":116,\\\"../internals/to-primitive\\\":122}],88:[function(require,module,exports){\\nvar internalObjectKeys = require('../internals/object-keys-internal');\\nvar enumBugKeys = require('../internals/enum-bug-keys');\\n\\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\\n\\n// `Object.getOwnPropertyNames` method\\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\\n  return internalObjectKeys(O, hiddenKeys);\\n};\\n\\n},{\\\"../internals/enum-bug-keys\\\":51,\\\"../internals/object-keys-internal\\\":91}],89:[function(require,module,exports){\\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\\nexports.f = Object.getOwnPropertySymbols;\\n\\n},{}],90:[function(require,module,exports){\\nvar has = require('../internals/has');\\nvar toObject = require('../internals/to-object');\\nvar sharedKey = require('../internals/shared-key');\\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\\n\\nvar IE_PROTO = sharedKey('IE_PROTO');\\nvar ObjectPrototype = Object.prototype;\\n\\n// `Object.getPrototypeOf` method\\n// https://tc39.es/ecma262/#sec-object.getprototypeof\\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\\n  O = toObject(O);\\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\\n    return O.constructor.prototype;\\n  } return O instanceof Object ? ObjectPrototype : null;\\n};\\n\\n},{\\\"../internals/correct-prototype-getter\\\":40,\\\"../internals/has\\\":62,\\\"../internals/shared-key\\\":108,\\\"../internals/to-object\\\":119}],91:[function(require,module,exports){\\nvar has = require('../internals/has');\\nvar toIndexedObject = require('../internals/to-indexed-object');\\nvar indexOf = require('../internals/array-includes').indexOf;\\nvar hiddenKeys = require('../internals/hidden-keys');\\n\\nmodule.exports = function (object, names) {\\n  var O = toIndexedObject(object);\\n  var i = 0;\\n  var result = [];\\n  var key;\\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\\n  // Don't enum bug & hidden keys\\n  while (names.length > i) if (has(O, key = names[i++])) {\\n    ~indexOf(result, key) || result.push(key);\\n  }\\n  return result;\\n};\\n\\n},{\\\"../internals/array-includes\\\":31,\\\"../internals/has\\\":62,\\\"../internals/hidden-keys\\\":63,\\\"../internals/to-indexed-object\\\":116}],92:[function(require,module,exports){\\nvar internalObjectKeys = require('../internals/object-keys-internal');\\nvar enumBugKeys = require('../internals/enum-bug-keys');\\n\\n// `Object.keys` method\\n// https://tc39.es/ecma262/#sec-object.keys\\n// eslint-disable-next-line es/no-object-keys -- safe\\nmodule.exports = Object.keys || function keys(O) {\\n  return internalObjectKeys(O, enumBugKeys);\\n};\\n\\n},{\\\"../internals/enum-bug-keys\\\":51,\\\"../internals/object-keys-internal\\\":91}],93:[function(require,module,exports){\\n'use strict';\\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\n\\n// Nashorn ~ JDK8 bug\\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\\n\\n// `Object.prototype.propertyIsEnumerable` method implementation\\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\\n  var descriptor = getOwnPropertyDescriptor(this, V);\\n  return !!descriptor && descriptor.enumerable;\\n} : $propertyIsEnumerable;\\n\\n},{}],94:[function(require,module,exports){\\n/* eslint-disable no-proto -- safe */\\nvar anObject = require('../internals/an-object');\\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\\n\\n// `Object.setPrototypeOf` method\\n// https://tc39.es/ecma262/#sec-object.setprototypeof\\n// Works with __proto__ only. Old v8 can't work with null proto objects.\\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\\n  var CORRECT_SETTER = false;\\n  var test = {};\\n  var setter;\\n  try {\\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\\n    setter.call(test, []);\\n    CORRECT_SETTER = test instanceof Array;\\n  } catch (error) { /* empty */ }\\n  return function setPrototypeOf(O, proto) {\\n    anObject(O);\\n    aPossiblePrototype(proto);\\n    if (CORRECT_SETTER) setter.call(O, proto);\\n    else O.__proto__ = proto;\\n    return O;\\n  };\\n}() : undefined);\\n\\n},{\\\"../internals/a-possible-prototype\\\":21,\\\"../internals/an-object\\\":25}],95:[function(require,module,exports){\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\\nvar anObject = require('../internals/an-object');\\n\\n// all object keys, includes non-enumerable and symbols\\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\\n};\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/get-built-in\\\":56,\\\"../internals/object-get-own-property-names\\\":88,\\\"../internals/object-get-own-property-symbols\\\":89}],96:[function(require,module,exports){\\nvar global = require('../internals/global');\\n\\nmodule.exports = global;\\n\\n},{\\\"../internals/global\\\":61}],97:[function(require,module,exports){\\nvar redefine = require('../internals/redefine');\\n\\nmodule.exports = function (target, src, options) {\\n  for (var key in src) redefine(target, key, src[key], options);\\n  return target;\\n};\\n\\n},{\\\"../internals/redefine\\\":98}],98:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar has = require('../internals/has');\\nvar setGlobal = require('../internals/set-global');\\nvar inspectSource = require('../internals/inspect-source');\\nvar InternalStateModule = require('../internals/internal-state');\\n\\nvar getInternalState = InternalStateModule.get;\\nvar enforceInternalState = InternalStateModule.enforce;\\nvar TEMPLATE = String(String).split('String');\\n\\n(module.exports = function (O, key, value, options) {\\n  var unsafe = options ? !!options.unsafe : false;\\n  var simple = options ? !!options.enumerable : false;\\n  var noTargetGet = options ? !!options.noTargetGet : false;\\n  var state;\\n  if (typeof value == 'function') {\\n    if (typeof key == 'string' && !has(value, 'name')) {\\n      createNonEnumerableProperty(value, 'name', key);\\n    }\\n    state = enforceInternalState(value);\\n    if (!state.source) {\\n      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\\n    }\\n  }\\n  if (O === global) {\\n    if (simple) O[key] = value;\\n    else setGlobal(key, value);\\n    return;\\n  } else if (!unsafe) {\\n    delete O[key];\\n  } else if (!noTargetGet && O[key]) {\\n    simple = true;\\n  }\\n  if (simple) O[key] = value;\\n  else createNonEnumerableProperty(O, key, value);\\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\\n})(Function.prototype, 'toString', function toString() {\\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\\n});\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/inspect-source\\\":69,\\\"../internals/internal-state\\\":70,\\\"../internals/set-global\\\":105}],99:[function(require,module,exports){\\nvar classof = require('./classof-raw');\\nvar regexpExec = require('./regexp-exec');\\n\\n// `RegExpExec` abstract operation\\n// https://tc39.es/ecma262/#sec-regexpexec\\nmodule.exports = function (R, S) {\\n  var exec = R.exec;\\n  if (typeof exec === 'function') {\\n    var result = exec.call(R, S);\\n    if (typeof result !== 'object') {\\n      throw TypeError('RegExp exec method returned something other than an Object or null');\\n    }\\n    return result;\\n  }\\n\\n  if (classof(R) !== 'RegExp') {\\n    throw TypeError('RegExp#exec called on incompatible receiver');\\n  }\\n\\n  return regexpExec.call(R, S);\\n};\\n\\n\\n},{\\\"./classof-raw\\\":36,\\\"./regexp-exec\\\":100}],100:[function(require,module,exports){\\n'use strict';\\n/* eslint-disable regexp/no-assertion-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */\\n/* eslint-disable regexp/no-useless-quantifier -- testing */\\nvar regexpFlags = require('./regexp-flags');\\nvar stickyHelpers = require('./regexp-sticky-helpers');\\nvar shared = require('./shared');\\n\\nvar nativeExec = RegExp.prototype.exec;\\nvar nativeReplace = shared('native-string-replace', String.prototype.replace);\\n\\nvar patchedExec = nativeExec;\\n\\nvar UPDATES_LAST_INDEX_WRONG = (function () {\\n  var re1 = /a/;\\n  var re2 = /b*/g;\\n  nativeExec.call(re1, 'a');\\n  nativeExec.call(re2, 'a');\\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\\n})();\\n\\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\\n\\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\\n\\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\\n\\nif (PATCH) {\\n  patchedExec = function exec(str) {\\n    var re = this;\\n    var lastIndex, reCopy, match, i;\\n    var sticky = UNSUPPORTED_Y && re.sticky;\\n    var flags = regexpFlags.call(re);\\n    var source = re.source;\\n    var charsAdded = 0;\\n    var strCopy = str;\\n\\n    if (sticky) {\\n      flags = flags.replace('y', '');\\n      if (flags.indexOf('g') === -1) {\\n        flags += 'g';\\n      }\\n\\n      strCopy = String(str).slice(re.lastIndex);\\n      // Support anchored sticky behavior.\\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\\\n')) {\\n        source = '(?: ' + source + ')';\\n        strCopy = ' ' + strCopy;\\n        charsAdded++;\\n      }\\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\\n      // simulate the 'y' flag.\\n      reCopy = new RegExp('^(?:' + source + ')', flags);\\n    }\\n\\n    if (NPCG_INCLUDED) {\\n      reCopy = new RegExp('^' + source + '$(?!\\\\\\\\s)', flags);\\n    }\\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\\n\\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\\n\\n    if (sticky) {\\n      if (match) {\\n        match.input = match.input.slice(charsAdded);\\n        match[0] = match[0].slice(charsAdded);\\n        match.index = re.lastIndex;\\n        re.lastIndex += match[0].length;\\n      } else re.lastIndex = 0;\\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\\n    }\\n    if (NPCG_INCLUDED && match && match.length > 1) {\\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\\n      nativeReplace.call(match[0], reCopy, function () {\\n        for (i = 1; i < arguments.length - 2; i++) {\\n          if (arguments[i] === undefined) match[i] = undefined;\\n        }\\n      });\\n    }\\n\\n    return match;\\n  };\\n}\\n\\nmodule.exports = patchedExec;\\n\\n},{\\\"./regexp-flags\\\":101,\\\"./regexp-sticky-helpers\\\":102,\\\"./shared\\\":110}],101:[function(require,module,exports){\\n'use strict';\\nvar anObject = require('../internals/an-object');\\n\\n// `RegExp.prototype.flags` getter implementation\\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\\nmodule.exports = function () {\\n  var that = anObject(this);\\n  var result = '';\\n  if (that.global) result += 'g';\\n  if (that.ignoreCase) result += 'i';\\n  if (that.multiline) result += 'm';\\n  if (that.dotAll) result += 's';\\n  if (that.unicode) result += 'u';\\n  if (that.sticky) result += 'y';\\n  return result;\\n};\\n\\n},{\\\"../internals/an-object\\\":25}],102:[function(require,module,exports){\\n'use strict';\\n\\nvar fails = require('./fails');\\n\\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\\n// so we use an intermediate function.\\nfunction RE(s, f) {\\n  return RegExp(s, f);\\n}\\n\\nexports.UNSUPPORTED_Y = fails(function () {\\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\\n  var re = RE('a', 'y');\\n  re.lastIndex = 2;\\n  return re.exec('abcd') != null;\\n});\\n\\nexports.BROKEN_CARET = fails(function () {\\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\\n  var re = RE('^r', 'gy');\\n  re.lastIndex = 2;\\n  return re.exec('str') != null;\\n});\\n\\n},{\\\"./fails\\\":53}],103:[function(require,module,exports){\\n// `RequireObjectCoercible` abstract operation\\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\\nmodule.exports = function (it) {\\n  if (it == undefined) throw TypeError(\\\"Can't call method on \\\" + it);\\n  return it;\\n};\\n\\n},{}],104:[function(require,module,exports){\\n// `SameValueZero` abstract operation\\n// https://tc39.es/ecma262/#sec-samevaluezero\\nmodule.exports = function (x, y) {\\n  // eslint-disable-next-line no-self-compare -- NaN check\\n  return x === y || x != x && y != y;\\n};\\n\\n},{}],105:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\n\\nmodule.exports = function (key, value) {\\n  try {\\n    createNonEnumerableProperty(global, key, value);\\n  } catch (error) {\\n    global[key] = value;\\n  } return value;\\n};\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/global\\\":61}],106:[function(require,module,exports){\\n'use strict';\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar definePropertyModule = require('../internals/object-define-property');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\nvar DESCRIPTORS = require('../internals/descriptors');\\n\\nvar SPECIES = wellKnownSymbol('species');\\n\\nmodule.exports = function (CONSTRUCTOR_NAME) {\\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\\n  var defineProperty = definePropertyModule.f;\\n\\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\\n    defineProperty(Constructor, SPECIES, {\\n      configurable: true,\\n      get: function () { return this; }\\n    });\\n  }\\n};\\n\\n},{\\\"../internals/descriptors\\\":46,\\\"../internals/get-built-in\\\":56,\\\"../internals/object-define-property\\\":86,\\\"../internals/well-known-symbol\\\":129}],107:[function(require,module,exports){\\nvar defineProperty = require('../internals/object-define-property').f;\\nvar has = require('../internals/has');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\\n\\nmodule.exports = function (it, TAG, STATIC) {\\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\\n  }\\n};\\n\\n},{\\\"../internals/has\\\":62,\\\"../internals/object-define-property\\\":86,\\\"../internals/well-known-symbol\\\":129}],108:[function(require,module,exports){\\nvar shared = require('../internals/shared');\\nvar uid = require('../internals/uid');\\n\\nvar keys = shared('keys');\\n\\nmodule.exports = function (key) {\\n  return keys[key] || (keys[key] = uid(key));\\n};\\n\\n},{\\\"../internals/shared\\\":110,\\\"../internals/uid\\\":127}],109:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar setGlobal = require('../internals/set-global');\\n\\nvar SHARED = '__core-js_shared__';\\nvar store = global[SHARED] || setGlobal(SHARED, {});\\n\\nmodule.exports = store;\\n\\n},{\\\"../internals/global\\\":61,\\\"../internals/set-global\\\":105}],110:[function(require,module,exports){\\nvar IS_PURE = require('../internals/is-pure');\\nvar store = require('../internals/shared-store');\\n\\n(module.exports = function (key, value) {\\n  return store[key] || (store[key] = value !== undefined ? value : {});\\n})('versions', []).push({\\n  version: '3.12.1',\\n  mode: IS_PURE ? 'pure' : 'global',\\n  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\\n});\\n\\n},{\\\"../internals/is-pure\\\":75,\\\"../internals/shared-store\\\":109}],111:[function(require,module,exports){\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar SPECIES = wellKnownSymbol('species');\\n\\n// `SpeciesConstructor` abstract operation\\n// https://tc39.es/ecma262/#sec-speciesconstructor\\nmodule.exports = function (O, defaultConstructor) {\\n  var C = anObject(O).constructor;\\n  var S;\\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\\n};\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/well-known-symbol\\\":129}],112:[function(require,module,exports){\\nvar toInteger = require('../internals/to-integer');\\nvar requireObjectCoercible = require('../internals/require-object-coercible');\\n\\n// `String.prototype.{ codePointAt, at }` methods implementation\\nvar createMethod = function (CONVERT_TO_STRING) {\\n  return function ($this, pos) {\\n    var S = String(requireObjectCoercible($this));\\n    var position = toInteger(pos);\\n    var size = S.length;\\n    var first, second;\\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\\n    first = S.charCodeAt(position);\\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\\n  };\\n};\\n\\nmodule.exports = {\\n  // `String.prototype.codePointAt` method\\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\\n  codeAt: createMethod(false),\\n  // `String.prototype.at` method\\n  // https://github.com/mathiasbynens/String.prototype.at\\n  charAt: createMethod(true)\\n};\\n\\n},{\\\"../internals/require-object-coercible\\\":103,\\\"../internals/to-integer\\\":117}],113:[function(require,module,exports){\\n'use strict';\\n// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js\\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\\nvar base = 36;\\nvar tMin = 1;\\nvar tMax = 26;\\nvar skew = 38;\\nvar damp = 700;\\nvar initialBias = 72;\\nvar initialN = 128; // 0x80\\nvar delimiter = '-'; // '\\\\x2D'\\nvar regexNonASCII = /[^\\\\0-\\\\u007E]/; // non-ASCII chars\\nvar regexSeparators = /[.\\\\u3002\\\\uFF0E\\\\uFF61]/g; // RFC 3490 separators\\nvar OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';\\nvar baseMinusTMin = base - tMin;\\nvar floor = Math.floor;\\nvar stringFromCharCode = String.fromCharCode;\\n\\n/**\\n * Creates an array containing the numeric code points of each Unicode\\n * character in the string. While JavaScript uses UCS-2 internally,\\n * this function will convert a pair of surrogate halves (each of which\\n * UCS-2 exposes as separate characters) into a single code point,\\n * matching UTF-16.\\n */\\nvar ucs2decode = function (string) {\\n  var output = [];\\n  var counter = 0;\\n  var length = string.length;\\n  while (counter < length) {\\n    var value = string.charCodeAt(counter++);\\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\\n      // It's a high surrogate, and there is a next character.\\n      var extra = string.charCodeAt(counter++);\\n      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\\n      } else {\\n        // It's an unmatched surrogate; only append this code unit, in case the\\n        // next code unit is the high surrogate of a surrogate pair.\\n        output.push(value);\\n        counter--;\\n      }\\n    } else {\\n      output.push(value);\\n    }\\n  }\\n  return output;\\n};\\n\\n/**\\n * Converts a digit/integer into a basic code point.\\n */\\nvar digitToBasic = function (digit) {\\n  //  0..25 map to ASCII a..z or A..Z\\n  // 26..35 map to ASCII 0..9\\n  return digit + 22 + 75 * (digit < 26);\\n};\\n\\n/**\\n * Bias adaptation function as per section 3.4 of RFC 3492.\\n * https://tools.ietf.org/html/rfc3492#section-3.4\\n */\\nvar adapt = function (delta, numPoints, firstTime) {\\n  var k = 0;\\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\\n  delta += floor(delta / numPoints);\\n  for (; delta > baseMinusTMin * tMax >> 1; k += base) {\\n    delta = floor(delta / baseMinusTMin);\\n  }\\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\\n};\\n\\n/**\\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\\n * Punycode string of ASCII-only symbols.\\n */\\n// eslint-disable-next-line max-statements -- TODO\\nvar encode = function (input) {\\n  var output = [];\\n\\n  // Convert the input in UCS-2 to an array of Unicode code points.\\n  input = ucs2decode(input);\\n\\n  // Cache the length.\\n  var inputLength = input.length;\\n\\n  // Initialize the state.\\n  var n = initialN;\\n  var delta = 0;\\n  var bias = initialBias;\\n  var i, currentValue;\\n\\n  // Handle the basic code points.\\n  for (i = 0; i < input.length; i++) {\\n    currentValue = input[i];\\n    if (currentValue < 0x80) {\\n      output.push(stringFromCharCode(currentValue));\\n    }\\n  }\\n\\n  var basicLength = output.length; // number of basic code points.\\n  var handledCPCount = basicLength; // number of code points that have been handled;\\n\\n  // Finish the basic string with a delimiter unless it's empty.\\n  if (basicLength) {\\n    output.push(delimiter);\\n  }\\n\\n  // Main encoding loop:\\n  while (handledCPCount < inputLength) {\\n    // All non-basic code points < n have been handled already. Find the next larger one:\\n    var m = maxInt;\\n    for (i = 0; i < input.length; i++) {\\n      currentValue = input[i];\\n      if (currentValue >= n && currentValue < m) {\\n        m = currentValue;\\n      }\\n    }\\n\\n    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.\\n    var handledCPCountPlusOne = handledCPCount + 1;\\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\\n      throw RangeError(OVERFLOW_ERROR);\\n    }\\n\\n    delta += (m - n) * handledCPCountPlusOne;\\n    n = m;\\n\\n    for (i = 0; i < input.length; i++) {\\n      currentValue = input[i];\\n      if (currentValue < n && ++delta > maxInt) {\\n        throw RangeError(OVERFLOW_ERROR);\\n      }\\n      if (currentValue == n) {\\n        // Represent delta as a generalized variable-length integer.\\n        var q = delta;\\n        for (var k = base; /* no condition */; k += base) {\\n          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\\n          if (q < t) break;\\n          var qMinusT = q - t;\\n          var baseMinusT = base - t;\\n          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));\\n          q = floor(qMinusT / baseMinusT);\\n        }\\n\\n        output.push(stringFromCharCode(digitToBasic(q)));\\n        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\\n        delta = 0;\\n        ++handledCPCount;\\n      }\\n    }\\n\\n    ++delta;\\n    ++n;\\n  }\\n  return output.join('');\\n};\\n\\nmodule.exports = function (input) {\\n  var encoded = [];\\n  var labels = input.toLowerCase().replace(regexSeparators, '\\\\u002E').split('.');\\n  var i, label;\\n  for (i = 0; i < labels.length; i++) {\\n    label = labels[i];\\n    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);\\n  }\\n  return encoded.join('.');\\n};\\n\\n},{}],114:[function(require,module,exports){\\nvar toInteger = require('../internals/to-integer');\\n\\nvar max = Math.max;\\nvar min = Math.min;\\n\\n// Helper for a popular repeating case of the spec:\\n// Let integer be ? ToInteger(index).\\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\\nmodule.exports = function (index, length) {\\n  var integer = toInteger(index);\\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\\n};\\n\\n},{\\\"../internals/to-integer\\\":117}],115:[function(require,module,exports){\\nvar toInteger = require('../internals/to-integer');\\nvar toLength = require('../internals/to-length');\\n\\n// `ToIndex` abstract operation\\n// https://tc39.es/ecma262/#sec-toindex\\nmodule.exports = function (it) {\\n  if (it === undefined) return 0;\\n  var number = toInteger(it);\\n  var length = toLength(number);\\n  if (number !== length) throw RangeError('Wrong length or index');\\n  return length;\\n};\\n\\n},{\\\"../internals/to-integer\\\":117,\\\"../internals/to-length\\\":118}],116:[function(require,module,exports){\\n// toObject with fallback for non-array-like ES3 strings\\nvar IndexedObject = require('../internals/indexed-object');\\nvar requireObjectCoercible = require('../internals/require-object-coercible');\\n\\nmodule.exports = function (it) {\\n  return IndexedObject(requireObjectCoercible(it));\\n};\\n\\n},{\\\"../internals/indexed-object\\\":67,\\\"../internals/require-object-coercible\\\":103}],117:[function(require,module,exports){\\nvar ceil = Math.ceil;\\nvar floor = Math.floor;\\n\\n// `ToInteger` abstract operation\\n// https://tc39.es/ecma262/#sec-tointeger\\nmodule.exports = function (argument) {\\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\\n};\\n\\n},{}],118:[function(require,module,exports){\\nvar toInteger = require('../internals/to-integer');\\n\\nvar min = Math.min;\\n\\n// `ToLength` abstract operation\\n// https://tc39.es/ecma262/#sec-tolength\\nmodule.exports = function (argument) {\\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\\n};\\n\\n},{\\\"../internals/to-integer\\\":117}],119:[function(require,module,exports){\\nvar requireObjectCoercible = require('../internals/require-object-coercible');\\n\\n// `ToObject` abstract operation\\n// https://tc39.es/ecma262/#sec-toobject\\nmodule.exports = function (argument) {\\n  return Object(requireObjectCoercible(argument));\\n};\\n\\n},{\\\"../internals/require-object-coercible\\\":103}],120:[function(require,module,exports){\\nvar toPositiveInteger = require('../internals/to-positive-integer');\\n\\nmodule.exports = function (it, BYTES) {\\n  var offset = toPositiveInteger(it);\\n  if (offset % BYTES) throw RangeError('Wrong offset');\\n  return offset;\\n};\\n\\n},{\\\"../internals/to-positive-integer\\\":121}],121:[function(require,module,exports){\\nvar toInteger = require('../internals/to-integer');\\n\\nmodule.exports = function (it) {\\n  var result = toInteger(it);\\n  if (result < 0) throw RangeError(\\\"The argument can't be less than 0\\\");\\n  return result;\\n};\\n\\n},{\\\"../internals/to-integer\\\":117}],122:[function(require,module,exports){\\nvar isObject = require('../internals/is-object');\\n\\n// `ToPrimitive` abstract operation\\n// https://tc39.es/ecma262/#sec-toprimitive\\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\\n// and the second argument - flag - preferred type is a string\\nmodule.exports = function (input, PREFERRED_STRING) {\\n  if (!isObject(input)) return input;\\n  var fn, val;\\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\\n  throw TypeError(\\\"Can't convert object to primitive value\\\");\\n};\\n\\n},{\\\"../internals/is-object\\\":74}],123:[function(require,module,exports){\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\\nvar test = {};\\n\\ntest[TO_STRING_TAG] = 'z';\\n\\nmodule.exports = String(test) === '[object z]';\\n\\n},{\\\"../internals/well-known-symbol\\\":129}],124:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar global = require('../internals/global');\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');\\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\\nvar ArrayBufferModule = require('../internals/array-buffer');\\nvar anInstance = require('../internals/an-instance');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar toLength = require('../internals/to-length');\\nvar toIndex = require('../internals/to-index');\\nvar toOffset = require('../internals/to-offset');\\nvar toPrimitive = require('../internals/to-primitive');\\nvar has = require('../internals/has');\\nvar classof = require('../internals/classof');\\nvar isObject = require('../internals/is-object');\\nvar create = require('../internals/object-create');\\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\\nvar typedArrayFrom = require('../internals/typed-array-from');\\nvar forEach = require('../internals/array-iteration').forEach;\\nvar setSpecies = require('../internals/set-species');\\nvar definePropertyModule = require('../internals/object-define-property');\\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\\nvar InternalStateModule = require('../internals/internal-state');\\nvar inheritIfRequired = require('../internals/inherit-if-required');\\n\\nvar getInternalState = InternalStateModule.get;\\nvar setInternalState = InternalStateModule.set;\\nvar nativeDefineProperty = definePropertyModule.f;\\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\\nvar round = Math.round;\\nvar RangeError = global.RangeError;\\nvar ArrayBuffer = ArrayBufferModule.ArrayBuffer;\\nvar DataView = ArrayBufferModule.DataView;\\nvar NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;\\nvar TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;\\nvar TypedArray = ArrayBufferViewCore.TypedArray;\\nvar TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;\\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\\nvar isTypedArray = ArrayBufferViewCore.isTypedArray;\\nvar BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\\nvar WRONG_LENGTH = 'Wrong length';\\n\\nvar fromList = function (C, list) {\\n  var index = 0;\\n  var length = list.length;\\n  var result = new (aTypedArrayConstructor(C))(length);\\n  while (length > index) result[index] = list[index++];\\n  return result;\\n};\\n\\nvar addGetter = function (it, key) {\\n  nativeDefineProperty(it, key, { get: function () {\\n    return getInternalState(this)[key];\\n  } });\\n};\\n\\nvar isArrayBuffer = function (it) {\\n  var klass;\\n  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';\\n};\\n\\nvar isTypedArrayIndex = function (target, key) {\\n  return isTypedArray(target)\\n    && typeof key != 'symbol'\\n    && key in target\\n    && String(+key) == String(key);\\n};\\n\\nvar wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {\\n  return isTypedArrayIndex(target, key = toPrimitive(key, true))\\n    ? createPropertyDescriptor(2, target[key])\\n    : nativeGetOwnPropertyDescriptor(target, key);\\n};\\n\\nvar wrappedDefineProperty = function defineProperty(target, key, descriptor) {\\n  if (isTypedArrayIndex(target, key = toPrimitive(key, true))\\n    && isObject(descriptor)\\n    && has(descriptor, 'value')\\n    && !has(descriptor, 'get')\\n    && !has(descriptor, 'set')\\n    // TODO: add validation descriptor w/o calling accessors\\n    && !descriptor.configurable\\n    && (!has(descriptor, 'writable') || descriptor.writable)\\n    && (!has(descriptor, 'enumerable') || descriptor.enumerable)\\n  ) {\\n    target[key] = descriptor.value;\\n    return target;\\n  } return nativeDefineProperty(target, key, descriptor);\\n};\\n\\nif (DESCRIPTORS) {\\n  if (!NATIVE_ARRAY_BUFFER_VIEWS) {\\n    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;\\n    definePropertyModule.f = wrappedDefineProperty;\\n    addGetter(TypedArrayPrototype, 'buffer');\\n    addGetter(TypedArrayPrototype, 'byteOffset');\\n    addGetter(TypedArrayPrototype, 'byteLength');\\n    addGetter(TypedArrayPrototype, 'length');\\n  }\\n\\n  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {\\n    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,\\n    defineProperty: wrappedDefineProperty\\n  });\\n\\n  module.exports = function (TYPE, wrapper, CLAMPED) {\\n    var BYTES = TYPE.match(/\\\\d+$/)[0] / 8;\\n    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';\\n    var GETTER = 'get' + TYPE;\\n    var SETTER = 'set' + TYPE;\\n    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];\\n    var TypedArrayConstructor = NativeTypedArrayConstructor;\\n    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;\\n    var exported = {};\\n\\n    var getter = function (that, index) {\\n      var data = getInternalState(that);\\n      return data.view[GETTER](index * BYTES + data.byteOffset, true);\\n    };\\n\\n    var setter = function (that, index, value) {\\n      var data = getInternalState(that);\\n      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;\\n      data.view[SETTER](index * BYTES + data.byteOffset, value, true);\\n    };\\n\\n    var addElement = function (that, index) {\\n      nativeDefineProperty(that, index, {\\n        get: function () {\\n          return getter(this, index);\\n        },\\n        set: function (value) {\\n          return setter(this, index, value);\\n        },\\n        enumerable: true\\n      });\\n    };\\n\\n    if (!NATIVE_ARRAY_BUFFER_VIEWS) {\\n      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {\\n        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);\\n        var index = 0;\\n        var byteOffset = 0;\\n        var buffer, byteLength, length;\\n        if (!isObject(data)) {\\n          length = toIndex(data);\\n          byteLength = length * BYTES;\\n          buffer = new ArrayBuffer(byteLength);\\n        } else if (isArrayBuffer(data)) {\\n          buffer = data;\\n          byteOffset = toOffset(offset, BYTES);\\n          var $len = data.byteLength;\\n          if ($length === undefined) {\\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\\n            byteLength = $len - byteOffset;\\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\\n          } else {\\n            byteLength = toLength($length) * BYTES;\\n            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);\\n          }\\n          length = byteLength / BYTES;\\n        } else if (isTypedArray(data)) {\\n          return fromList(TypedArrayConstructor, data);\\n        } else {\\n          return typedArrayFrom.call(TypedArrayConstructor, data);\\n        }\\n        setInternalState(that, {\\n          buffer: buffer,\\n          byteOffset: byteOffset,\\n          byteLength: byteLength,\\n          length: length,\\n          view: new DataView(buffer)\\n        });\\n        while (index < length) addElement(that, index++);\\n      });\\n\\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\\n      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);\\n    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {\\n      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {\\n        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);\\n        return inheritIfRequired(function () {\\n          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));\\n          if (isArrayBuffer(data)) return $length !== undefined\\n            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)\\n            : typedArrayOffset !== undefined\\n              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))\\n              : new NativeTypedArrayConstructor(data);\\n          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);\\n          return typedArrayFrom.call(TypedArrayConstructor, data);\\n        }(), dummy, TypedArrayConstructor);\\n      });\\n\\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\\n      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {\\n        if (!(key in TypedArrayConstructor)) {\\n          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);\\n        }\\n      });\\n      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;\\n    }\\n\\n    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {\\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);\\n    }\\n\\n    if (TYPED_ARRAY_TAG) {\\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);\\n    }\\n\\n    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;\\n\\n    $({\\n      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS\\n    }, exported);\\n\\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {\\n      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);\\n    }\\n\\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {\\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);\\n    }\\n\\n    setSpecies(CONSTRUCTOR_NAME);\\n  };\\n} else module.exports = function () { /* empty */ };\\n\\n},{\\\"../internals/an-instance\\\":24,\\\"../internals/array-buffer\\\":28,\\\"../internals/array-buffer-view-core\\\":27,\\\"../internals/array-iteration\\\":32,\\\"../internals/classof\\\":37,\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/descriptors\\\":46,\\\"../internals/export\\\":52,\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/inherit-if-required\\\":68,\\\"../internals/internal-state\\\":70,\\\"../internals/is-object\\\":74,\\\"../internals/object-create\\\":84,\\\"../internals/object-define-property\\\":86,\\\"../internals/object-get-own-property-descriptor\\\":87,\\\"../internals/object-get-own-property-names\\\":88,\\\"../internals/object-set-prototype-of\\\":94,\\\"../internals/set-species\\\":106,\\\"../internals/to-index\\\":115,\\\"../internals/to-length\\\":118,\\\"../internals/to-offset\\\":120,\\\"../internals/to-primitive\\\":122,\\\"../internals/typed-array-constructors-require-wrappers\\\":125,\\\"../internals/typed-array-from\\\":126}],125:[function(require,module,exports){\\n/* eslint-disable no-new -- required for testing */\\nvar global = require('../internals/global');\\nvar fails = require('../internals/fails');\\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\\nvar NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;\\n\\nvar ArrayBuffer = global.ArrayBuffer;\\nvar Int8Array = global.Int8Array;\\n\\nmodule.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {\\n  Int8Array(1);\\n}) || !fails(function () {\\n  new Int8Array(-1);\\n}) || !checkCorrectnessOfIteration(function (iterable) {\\n  new Int8Array();\\n  new Int8Array(null);\\n  new Int8Array(1.5);\\n  new Int8Array(iterable);\\n}, true) || fails(function () {\\n  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill\\n  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;\\n});\\n\\n},{\\\"../internals/array-buffer-view-core\\\":27,\\\"../internals/check-correctness-of-iteration\\\":35,\\\"../internals/fails\\\":53,\\\"../internals/global\\\":61}],126:[function(require,module,exports){\\nvar toObject = require('../internals/to-object');\\nvar toLength = require('../internals/to-length');\\nvar getIteratorMethod = require('../internals/get-iterator-method');\\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\\nvar bind = require('../internals/function-bind-context');\\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\\n\\nmodule.exports = function from(source /* , mapfn, thisArg */) {\\n  var O = toObject(source);\\n  var argumentsLength = arguments.length;\\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\\n  var mapping = mapfn !== undefined;\\n  var iteratorMethod = getIteratorMethod(O);\\n  var i, length, result, step, iterator, next;\\n  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {\\n    iterator = iteratorMethod.call(O);\\n    next = iterator.next;\\n    O = [];\\n    while (!(step = next.call(iterator)).done) {\\n      O.push(step.value);\\n    }\\n  }\\n  if (mapping && argumentsLength > 2) {\\n    mapfn = bind(mapfn, arguments[2], 2);\\n  }\\n  length = toLength(O.length);\\n  result = new (aTypedArrayConstructor(this))(length);\\n  for (i = 0; length > i; i++) {\\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\\n  }\\n  return result;\\n};\\n\\n},{\\\"../internals/array-buffer-view-core\\\":27,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-iterator-method\\\":57,\\\"../internals/is-array-iterator-method\\\":71,\\\"../internals/to-length\\\":118,\\\"../internals/to-object\\\":119}],127:[function(require,module,exports){\\nvar id = 0;\\nvar postfix = Math.random();\\n\\nmodule.exports = function (key) {\\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\\n};\\n\\n},{}],128:[function(require,module,exports){\\n/* eslint-disable es/no-symbol -- required for testing */\\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\\n\\nmodule.exports = NATIVE_SYMBOL\\n  && !Symbol.sham\\n  && typeof Symbol.iterator == 'symbol';\\n\\n},{\\\"../internals/native-symbol\\\":80}],129:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar shared = require('../internals/shared');\\nvar has = require('../internals/has');\\nvar uid = require('../internals/uid');\\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\\n\\nvar WellKnownSymbolsStore = shared('wks');\\nvar Symbol = global.Symbol;\\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\\n\\nmodule.exports = function (name) {\\n  if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\\n    if (NATIVE_SYMBOL && has(Symbol, name)) {\\n      WellKnownSymbolsStore[name] = Symbol[name];\\n    } else {\\n      WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\\n    }\\n  } return WellKnownSymbolsStore[name];\\n};\\n\\n},{\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/native-symbol\\\":80,\\\"../internals/shared\\\":110,\\\"../internals/uid\\\":127,\\\"../internals/use-symbol-as-uid\\\":128}],130:[function(require,module,exports){\\n'use strict';\\nvar toIndexedObject = require('../internals/to-indexed-object');\\nvar addToUnscopables = require('../internals/add-to-unscopables');\\nvar Iterators = require('../internals/iterators');\\nvar InternalStateModule = require('../internals/internal-state');\\nvar defineIterator = require('../internals/define-iterator');\\n\\nvar ARRAY_ITERATOR = 'Array Iterator';\\nvar setInternalState = InternalStateModule.set;\\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\\n\\n// `Array.prototype.entries` method\\n// https://tc39.es/ecma262/#sec-array.prototype.entries\\n// `Array.prototype.keys` method\\n// https://tc39.es/ecma262/#sec-array.prototype.keys\\n// `Array.prototype.values` method\\n// https://tc39.es/ecma262/#sec-array.prototype.values\\n// `Array.prototype[@@iterator]` method\\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\\n// `CreateArrayIterator` internal method\\n// https://tc39.es/ecma262/#sec-createarrayiterator\\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\\n  setInternalState(this, {\\n    type: ARRAY_ITERATOR,\\n    target: toIndexedObject(iterated), // target\\n    index: 0,                          // next index\\n    kind: kind                         // kind\\n  });\\n// `%ArrayIteratorPrototype%.next` method\\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\\n}, function () {\\n  var state = getInternalState(this);\\n  var target = state.target;\\n  var kind = state.kind;\\n  var index = state.index++;\\n  if (!target || index >= target.length) {\\n    state.target = undefined;\\n    return { value: undefined, done: true };\\n  }\\n  if (kind == 'keys') return { value: index, done: false };\\n  if (kind == 'values') return { value: target[index], done: false };\\n  return { value: [index, target[index]], done: false };\\n}, 'values');\\n\\n// argumentsList[@@iterator] is %ArrayProto_values%\\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\\nIterators.Arguments = Iterators.Array;\\n\\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\\naddToUnscopables('keys');\\naddToUnscopables('values');\\naddToUnscopables('entries');\\n\\n},{\\\"../internals/add-to-unscopables\\\":22,\\\"../internals/define-iterator\\\":45,\\\"../internals/internal-state\\\":70,\\\"../internals/iterators\\\":79,\\\"../internals/to-indexed-object\\\":116}],131:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar exec = require('../internals/regexp-exec');\\n\\n// `RegExp.prototype.exec` method\\n// https://tc39.es/ecma262/#sec-regexp.prototype.exec\\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\\n  exec: exec\\n});\\n\\n},{\\\"../internals/export\\\":52,\\\"../internals/regexp-exec\\\":100}],132:[function(require,module,exports){\\n'use strict';\\nvar charAt = require('../internals/string-multibyte').charAt;\\nvar InternalStateModule = require('../internals/internal-state');\\nvar defineIterator = require('../internals/define-iterator');\\n\\nvar STRING_ITERATOR = 'String Iterator';\\nvar setInternalState = InternalStateModule.set;\\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\\n\\n// `String.prototype[@@iterator]` method\\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\\ndefineIterator(String, 'String', function (iterated) {\\n  setInternalState(this, {\\n    type: STRING_ITERATOR,\\n    string: String(iterated),\\n    index: 0\\n  });\\n// `%StringIteratorPrototype%.next` method\\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\\n}, function next() {\\n  var state = getInternalState(this);\\n  var string = state.string;\\n  var index = state.index;\\n  var point;\\n  if (index >= string.length) return { value: undefined, done: true };\\n  point = charAt(string, index);\\n  state.index += point.length;\\n  return { value: point, done: false };\\n});\\n\\n},{\\\"../internals/define-iterator\\\":45,\\\"../internals/internal-state\\\":70,\\\"../internals/string-multibyte\\\":112}],133:[function(require,module,exports){\\n'use strict';\\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\\nvar anObject = require('../internals/an-object');\\nvar toLength = require('../internals/to-length');\\nvar toInteger = require('../internals/to-integer');\\nvar requireObjectCoercible = require('../internals/require-object-coercible');\\nvar advanceStringIndex = require('../internals/advance-string-index');\\nvar getSubstitution = require('../internals/get-substitution');\\nvar regExpExec = require('../internals/regexp-exec-abstract');\\n\\nvar max = Math.max;\\nvar min = Math.min;\\n\\nvar maybeToString = function (it) {\\n  return it === undefined ? it : String(it);\\n};\\n\\n// @@replace logic\\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\\n\\n  return [\\n    // `String.prototype.replace` method\\n    // https://tc39.es/ecma262/#sec-string.prototype.replace\\n    function replace(searchValue, replaceValue) {\\n      var O = requireObjectCoercible(this);\\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\\n      return replacer !== undefined\\n        ? replacer.call(searchValue, O, replaceValue)\\n        : nativeReplace.call(String(O), searchValue, replaceValue);\\n    },\\n    // `RegExp.prototype[@@replace]` method\\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\\n    function (regexp, replaceValue) {\\n      if (\\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\\n      ) {\\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\\n        if (res.done) return res.value;\\n      }\\n\\n      var rx = anObject(regexp);\\n      var S = String(this);\\n\\n      var functionalReplace = typeof replaceValue === 'function';\\n      if (!functionalReplace) replaceValue = String(replaceValue);\\n\\n      var global = rx.global;\\n      if (global) {\\n        var fullUnicode = rx.unicode;\\n        rx.lastIndex = 0;\\n      }\\n      var results = [];\\n      while (true) {\\n        var result = regExpExec(rx, S);\\n        if (result === null) break;\\n\\n        results.push(result);\\n        if (!global) break;\\n\\n        var matchStr = String(result[0]);\\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\\n      }\\n\\n      var accumulatedResult = '';\\n      var nextSourcePosition = 0;\\n      for (var i = 0; i < results.length; i++) {\\n        result = results[i];\\n\\n        var matched = String(result[0]);\\n        var position = max(min(toInteger(result.index), S.length), 0);\\n        var captures = [];\\n        // NOTE: This is equivalent to\\n        //   captures = result.slice(1).map(maybeToString)\\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\\n        // the slice polyfill when slicing native arrays) \\\"doesn't work\\\" in safari 9 and\\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\\n        var namedCaptures = result.groups;\\n        if (functionalReplace) {\\n          var replacerArgs = [matched].concat(captures, position, S);\\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\\n        } else {\\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\\n        }\\n        if (position >= nextSourcePosition) {\\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\\n          nextSourcePosition = position + matched.length;\\n        }\\n      }\\n      return accumulatedResult + S.slice(nextSourcePosition);\\n    }\\n  ];\\n});\\n\\n},{\\\"../internals/advance-string-index\\\":23,\\\"../internals/an-object\\\":25,\\\"../internals/fix-regexp-well-known-symbol-logic\\\":54,\\\"../internals/get-substitution\\\":60,\\\"../internals/regexp-exec-abstract\\\":99,\\\"../internals/require-object-coercible\\\":103,\\\"../internals/to-integer\\\":117,\\\"../internals/to-length\\\":118}],134:[function(require,module,exports){\\n'use strict';\\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');\\nvar exportTypedArrayStaticMethod = require('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;\\nvar typedArrayFrom = require('../internals/typed-array-from');\\n\\n// `%TypedArray%.from` method\\n// https://tc39.es/ecma262/#sec-%typedarray%.from\\nexportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);\\n\\n},{\\\"../internals/array-buffer-view-core\\\":27,\\\"../internals/typed-array-constructors-require-wrappers\\\":125,\\\"../internals/typed-array-from\\\":126}],135:[function(require,module,exports){\\nvar createTypedArrayConstructor = require('../internals/typed-array-constructor');\\n\\n// `Uint8Array` constructor\\n// https://tc39.es/ecma262/#sec-typedarray-objects\\ncreateTypedArrayConstructor('Uint8', function (init) {\\n  return function Uint8Array(data, byteOffset, length) {\\n    return init(this, data, byteOffset, length);\\n  };\\n});\\n\\n},{\\\"../internals/typed-array-constructor\\\":124}],136:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar collectionDeleteAll = require('../internals/collection-delete-all');\\n\\n// `Map.prototype.deleteAll` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  deleteAll: function deleteAll(/* ...elements */) {\\n    return collectionDeleteAll.apply(this, arguments);\\n  }\\n});\\n\\n},{\\\"../internals/collection-delete-all\\\":38,\\\"../internals/export\\\":52,\\\"../internals/is-pure\\\":75}],137:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar bind = require('../internals/function-bind-context');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.every` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  every: function every(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    return !iterate(iterator, function (key, value, stop) {\\n      if (!boundFunction(value, key, map)) return stop();\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],138:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar bind = require('../internals/function-bind-context');\\nvar speciesConstructor = require('../internals/species-constructor');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.filter` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  filter: function filter(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\\n    var setter = aFunction(newMap.set);\\n    iterate(iterator, function (key, value) {\\n      if (boundFunction(value, key, map)) setter.call(newMap, key, value);\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true });\\n    return newMap;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-built-in\\\":56,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76,\\\"../internals/species-constructor\\\":111}],139:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar bind = require('../internals/function-bind-context');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.findKey` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  findKey: function findKey(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    return iterate(iterator, function (key, value, stop) {\\n      if (boundFunction(value, key, map)) return stop(key);\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],140:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar bind = require('../internals/function-bind-context');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.find` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  find: function find(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    return iterate(iterator, function (key, value, stop) {\\n      if (boundFunction(value, key, map)) return stop(value);\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],141:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar sameValueZero = require('../internals/same-value-zero');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.includes` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  includes: function includes(searchElement) {\\n    return iterate(getMapIterator(anObject(this)), function (key, value, stop) {\\n      if (sameValueZero(value, searchElement)) return stop();\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76,\\\"../internals/same-value-zero\\\":104}],142:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.includes` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  keyOf: function keyOf(searchElement) {\\n    return iterate(getMapIterator(anObject(this)), function (key, value, stop) {\\n      if (value === searchElement) return stop(key);\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],143:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar bind = require('../internals/function-bind-context');\\nvar speciesConstructor = require('../internals/species-constructor');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.mapKeys` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  mapKeys: function mapKeys(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\\n    var setter = aFunction(newMap.set);\\n    iterate(iterator, function (key, value) {\\n      setter.call(newMap, boundFunction(value, key, map), value);\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true });\\n    return newMap;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-built-in\\\":56,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76,\\\"../internals/species-constructor\\\":111}],144:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar bind = require('../internals/function-bind-context');\\nvar speciesConstructor = require('../internals/species-constructor');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.mapValues` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  mapValues: function mapValues(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\\n    var setter = aFunction(newMap.set);\\n    iterate(iterator, function (key, value) {\\n      setter.call(newMap, key, boundFunction(value, key, map));\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true });\\n    return newMap;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-built-in\\\":56,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76,\\\"../internals/species-constructor\\\":111}],145:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.merge` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\\n  merge: function merge(iterable /* ...iterbles */) {\\n    var map = anObject(this);\\n    var setter = aFunction(map.set);\\n    var i = 0;\\n    while (i < arguments.length) {\\n      iterate(arguments[i++], setter, { that: map, AS_ENTRIES: true });\\n    }\\n    return map;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],146:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Map.prototype.reduce` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  reduce: function reduce(callbackfn /* , initialValue */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var noInitial = arguments.length < 2;\\n    var accumulator = noInitial ? undefined : arguments[1];\\n    aFunction(callbackfn);\\n    iterate(iterator, function (key, value) {\\n      if (noInitial) {\\n        noInitial = false;\\n        accumulator = value;\\n      } else {\\n        accumulator = callbackfn(accumulator, value, key, map);\\n      }\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true });\\n    if (noInitial) throw TypeError('Reduce of empty map with no initial value');\\n    return accumulator;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],147:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar bind = require('../internals/function-bind-context');\\nvar getMapIterator = require('../internals/get-map-iterator');\\nvar iterate = require('../internals/iterate');\\n\\n// `Set.prototype.some` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  some: function some(callbackfn /* , thisArg */) {\\n    var map = anObject(this);\\n    var iterator = getMapIterator(map);\\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    return iterate(iterator, function (key, value, stop) {\\n      if (boundFunction(value, key, map)) return stop();\\n    }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;\\n  }\\n});\\n\\n},{\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-map-iterator\\\":59,\\\"../internals/is-pure\\\":75,\\\"../internals/iterate\\\":76}],148:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\nvar IS_PURE = require('../internals/is-pure');\\nvar anObject = require('../internals/an-object');\\nvar aFunction = require('../internals/a-function');\\n\\n// `Set.prototype.update` method\\n// https://github.com/tc39/proposal-collection-methods\\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\\n  update: function update(key, callback /* , thunk */) {\\n    var map = anObject(this);\\n    var length = arguments.length;\\n    aFunction(callback);\\n    var isPresentInMap = map.has(key);\\n    if (!isPresentInMap && length < 3) {\\n      throw TypeError('Updating absent value');\\n    }\\n    var value = isPresentInMap ? map.get(key) : aFunction(length > 2 ? arguments[2] : undefined)(key, map);\\n    map.set(key, callback(value, key, map));\\n    return map;\\n  }\\n});\\n\\n},{\\\"../internals/a-function\\\":20,\\\"../internals/an-object\\\":25,\\\"../internals/export\\\":52,\\\"../internals/is-pure\\\":75}],149:[function(require,module,exports){\\nvar global = require('../internals/global');\\nvar DOMIterables = require('../internals/dom-iterables');\\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\\nvar ArrayValues = ArrayIteratorMethods.values;\\n\\nfor (var COLLECTION_NAME in DOMIterables) {\\n  var Collection = global[COLLECTION_NAME];\\n  var CollectionPrototype = Collection && Collection.prototype;\\n  if (CollectionPrototype) {\\n    // some Chrome versions have non-configurable methods on DOMTokenList\\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\\n    } catch (error) {\\n      CollectionPrototype[ITERATOR] = ArrayValues;\\n    }\\n    if (!CollectionPrototype[TO_STRING_TAG]) {\\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\\n    }\\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\\n      // some Chrome versions have non-configurable methods on DOMTokenList\\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\\n      } catch (error) {\\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\\n      }\\n    }\\n  }\\n}\\n\\n},{\\\"../internals/create-non-enumerable-property\\\":42,\\\"../internals/dom-iterables\\\":48,\\\"../internals/global\\\":61,\\\"../internals/well-known-symbol\\\":129,\\\"../modules/es.array.iterator\\\":130}],150:[function(require,module,exports){\\n'use strict';\\n// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`\\nrequire('../modules/es.array.iterator');\\nvar $ = require('../internals/export');\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar USE_NATIVE_URL = require('../internals/native-url');\\nvar redefine = require('../internals/redefine');\\nvar redefineAll = require('../internals/redefine-all');\\nvar setToStringTag = require('../internals/set-to-string-tag');\\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\\nvar InternalStateModule = require('../internals/internal-state');\\nvar anInstance = require('../internals/an-instance');\\nvar hasOwn = require('../internals/has');\\nvar bind = require('../internals/function-bind-context');\\nvar classof = require('../internals/classof');\\nvar anObject = require('../internals/an-object');\\nvar isObject = require('../internals/is-object');\\nvar create = require('../internals/object-create');\\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\\nvar getIterator = require('../internals/get-iterator');\\nvar getIteratorMethod = require('../internals/get-iterator-method');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar $fetch = getBuiltIn('fetch');\\nvar Headers = getBuiltIn('Headers');\\nvar ITERATOR = wellKnownSymbol('iterator');\\nvar URL_SEARCH_PARAMS = 'URLSearchParams';\\nvar URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';\\nvar setInternalState = InternalStateModule.set;\\nvar getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);\\nvar getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);\\n\\nvar plus = /\\\\+/g;\\nvar sequences = Array(4);\\n\\nvar percentSequence = function (bytes) {\\n  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\\\\\\\da-f]{2}){' + bytes + '})', 'gi'));\\n};\\n\\nvar percentDecode = function (sequence) {\\n  try {\\n    return decodeURIComponent(sequence);\\n  } catch (error) {\\n    return sequence;\\n  }\\n};\\n\\nvar deserialize = function (it) {\\n  var result = it.replace(plus, ' ');\\n  var bytes = 4;\\n  try {\\n    return decodeURIComponent(result);\\n  } catch (error) {\\n    while (bytes) {\\n      result = result.replace(percentSequence(bytes--), percentDecode);\\n    }\\n    return result;\\n  }\\n};\\n\\nvar find = /[!'()~]|%20/g;\\n\\nvar replace = {\\n  '!': '%21',\\n  \\\"'\\\": '%27',\\n  '(': '%28',\\n  ')': '%29',\\n  '~': '%7E',\\n  '%20': '+'\\n};\\n\\nvar replacer = function (match) {\\n  return replace[match];\\n};\\n\\nvar serialize = function (it) {\\n  return encodeURIComponent(it).replace(find, replacer);\\n};\\n\\nvar parseSearchParams = function (result, query) {\\n  if (query) {\\n    var attributes = query.split('&');\\n    var index = 0;\\n    var attribute, entry;\\n    while (index < attributes.length) {\\n      attribute = attributes[index++];\\n      if (attribute.length) {\\n        entry = attribute.split('=');\\n        result.push({\\n          key: deserialize(entry.shift()),\\n          value: deserialize(entry.join('='))\\n        });\\n      }\\n    }\\n  }\\n};\\n\\nvar updateSearchParams = function (query) {\\n  this.entries.length = 0;\\n  parseSearchParams(this.entries, query);\\n};\\n\\nvar validateArgumentsLength = function (passed, required) {\\n  if (passed < required) throw TypeError('Not enough arguments');\\n};\\n\\nvar URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {\\n  setInternalState(this, {\\n    type: URL_SEARCH_PARAMS_ITERATOR,\\n    iterator: getIterator(getInternalParamsState(params).entries),\\n    kind: kind\\n  });\\n}, 'Iterator', function next() {\\n  var state = getInternalIteratorState(this);\\n  var kind = state.kind;\\n  var step = state.iterator.next();\\n  var entry = step.value;\\n  if (!step.done) {\\n    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];\\n  } return step;\\n});\\n\\n// `URLSearchParams` constructor\\n// https://url.spec.whatwg.org/#interface-urlsearchparams\\nvar URLSearchParamsConstructor = function URLSearchParams(/* init */) {\\n  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);\\n  var init = arguments.length > 0 ? arguments[0] : undefined;\\n  var that = this;\\n  var entries = [];\\n  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;\\n\\n  setInternalState(that, {\\n    type: URL_SEARCH_PARAMS,\\n    entries: entries,\\n    updateURL: function () { /* empty */ },\\n    updateSearchParams: updateSearchParams\\n  });\\n\\n  if (init !== undefined) {\\n    if (isObject(init)) {\\n      iteratorMethod = getIteratorMethod(init);\\n      if (typeof iteratorMethod === 'function') {\\n        iterator = iteratorMethod.call(init);\\n        next = iterator.next;\\n        while (!(step = next.call(iterator)).done) {\\n          entryIterator = getIterator(anObject(step.value));\\n          entryNext = entryIterator.next;\\n          if (\\n            (first = entryNext.call(entryIterator)).done ||\\n            (second = entryNext.call(entryIterator)).done ||\\n            !entryNext.call(entryIterator).done\\n          ) throw TypeError('Expected sequence with length 2');\\n          entries.push({ key: first.value + '', value: second.value + '' });\\n        }\\n      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });\\n    } else {\\n      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');\\n    }\\n  }\\n};\\n\\nvar URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;\\n\\nredefineAll(URLSearchParamsPrototype, {\\n  // `URLSearchParams.prototype.append` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-append\\n  append: function append(name, value) {\\n    validateArgumentsLength(arguments.length, 2);\\n    var state = getInternalParamsState(this);\\n    state.entries.push({ key: name + '', value: value + '' });\\n    state.updateURL();\\n  },\\n  // `URLSearchParams.prototype.delete` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete\\n  'delete': function (name) {\\n    validateArgumentsLength(arguments.length, 1);\\n    var state = getInternalParamsState(this);\\n    var entries = state.entries;\\n    var key = name + '';\\n    var index = 0;\\n    while (index < entries.length) {\\n      if (entries[index].key === key) entries.splice(index, 1);\\n      else index++;\\n    }\\n    state.updateURL();\\n  },\\n  // `URLSearchParams.prototype.get` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-get\\n  get: function get(name) {\\n    validateArgumentsLength(arguments.length, 1);\\n    var entries = getInternalParamsState(this).entries;\\n    var key = name + '';\\n    var index = 0;\\n    for (; index < entries.length; index++) {\\n      if (entries[index].key === key) return entries[index].value;\\n    }\\n    return null;\\n  },\\n  // `URLSearchParams.prototype.getAll` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall\\n  getAll: function getAll(name) {\\n    validateArgumentsLength(arguments.length, 1);\\n    var entries = getInternalParamsState(this).entries;\\n    var key = name + '';\\n    var result = [];\\n    var index = 0;\\n    for (; index < entries.length; index++) {\\n      if (entries[index].key === key) result.push(entries[index].value);\\n    }\\n    return result;\\n  },\\n  // `URLSearchParams.prototype.has` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-has\\n  has: function has(name) {\\n    validateArgumentsLength(arguments.length, 1);\\n    var entries = getInternalParamsState(this).entries;\\n    var key = name + '';\\n    var index = 0;\\n    while (index < entries.length) {\\n      if (entries[index++].key === key) return true;\\n    }\\n    return false;\\n  },\\n  // `URLSearchParams.prototype.set` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-set\\n  set: function set(name, value) {\\n    validateArgumentsLength(arguments.length, 1);\\n    var state = getInternalParamsState(this);\\n    var entries = state.entries;\\n    var found = false;\\n    var key = name + '';\\n    var val = value + '';\\n    var index = 0;\\n    var entry;\\n    for (; index < entries.length; index++) {\\n      entry = entries[index];\\n      if (entry.key === key) {\\n        if (found) entries.splice(index--, 1);\\n        else {\\n          found = true;\\n          entry.value = val;\\n        }\\n      }\\n    }\\n    if (!found) entries.push({ key: key, value: val });\\n    state.updateURL();\\n  },\\n  // `URLSearchParams.prototype.sort` method\\n  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort\\n  sort: function sort() {\\n    var state = getInternalParamsState(this);\\n    var entries = state.entries;\\n    // Array#sort is not stable in some engines\\n    var slice = entries.slice();\\n    var entry, entriesIndex, sliceIndex;\\n    entries.length = 0;\\n    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {\\n      entry = slice[sliceIndex];\\n      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {\\n        if (entries[entriesIndex].key > entry.key) {\\n          entries.splice(entriesIndex, 0, entry);\\n          break;\\n        }\\n      }\\n      if (entriesIndex === sliceIndex) entries.push(entry);\\n    }\\n    state.updateURL();\\n  },\\n  // `URLSearchParams.prototype.forEach` method\\n  forEach: function forEach(callback /* , thisArg */) {\\n    var entries = getInternalParamsState(this).entries;\\n    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);\\n    var index = 0;\\n    var entry;\\n    while (index < entries.length) {\\n      entry = entries[index++];\\n      boundFunction(entry.value, entry.key, this);\\n    }\\n  },\\n  // `URLSearchParams.prototype.keys` method\\n  keys: function keys() {\\n    return new URLSearchParamsIterator(this, 'keys');\\n  },\\n  // `URLSearchParams.prototype.values` method\\n  values: function values() {\\n    return new URLSearchParamsIterator(this, 'values');\\n  },\\n  // `URLSearchParams.prototype.entries` method\\n  entries: function entries() {\\n    return new URLSearchParamsIterator(this, 'entries');\\n  }\\n}, { enumerable: true });\\n\\n// `URLSearchParams.prototype[@@iterator]` method\\nredefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);\\n\\n// `URLSearchParams.prototype.toString` method\\n// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\\nredefine(URLSearchParamsPrototype, 'toString', function toString() {\\n  var entries = getInternalParamsState(this).entries;\\n  var result = [];\\n  var index = 0;\\n  var entry;\\n  while (index < entries.length) {\\n    entry = entries[index++];\\n    result.push(serialize(entry.key) + '=' + serialize(entry.value));\\n  } return result.join('&');\\n}, { enumerable: true });\\n\\nsetToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);\\n\\n$({ global: true, forced: !USE_NATIVE_URL }, {\\n  URLSearchParams: URLSearchParamsConstructor\\n});\\n\\n// Wrap `fetch` for correct work with polyfilled `URLSearchParams`\\n// https://github.com/zloirock/core-js/issues/674\\nif (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {\\n  $({ global: true, enumerable: true, forced: true }, {\\n    fetch: function fetch(input /* , init */) {\\n      var args = [input];\\n      var init, body, headers;\\n      if (arguments.length > 1) {\\n        init = arguments[1];\\n        if (isObject(init)) {\\n          body = init.body;\\n          if (classof(body) === URL_SEARCH_PARAMS) {\\n            headers = init.headers ? new Headers(init.headers) : new Headers();\\n            if (!headers.has('content-type')) {\\n              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\\n            }\\n            init = create(init, {\\n              body: createPropertyDescriptor(0, String(body)),\\n              headers: createPropertyDescriptor(0, headers)\\n            });\\n          }\\n        }\\n        args.push(init);\\n      } return $fetch.apply(this, args);\\n    }\\n  });\\n}\\n\\nmodule.exports = {\\n  URLSearchParams: URLSearchParamsConstructor,\\n  getState: getInternalParamsState\\n};\\n\\n},{\\\"../internals/an-instance\\\":24,\\\"../internals/an-object\\\":25,\\\"../internals/classof\\\":37,\\\"../internals/create-iterator-constructor\\\":41,\\\"../internals/create-property-descriptor\\\":43,\\\"../internals/export\\\":52,\\\"../internals/function-bind-context\\\":55,\\\"../internals/get-built-in\\\":56,\\\"../internals/get-iterator\\\":58,\\\"../internals/get-iterator-method\\\":57,\\\"../internals/has\\\":62,\\\"../internals/internal-state\\\":70,\\\"../internals/is-object\\\":74,\\\"../internals/native-url\\\":81,\\\"../internals/object-create\\\":84,\\\"../internals/redefine\\\":98,\\\"../internals/redefine-all\\\":97,\\\"../internals/set-to-string-tag\\\":107,\\\"../internals/well-known-symbol\\\":129,\\\"../modules/es.array.iterator\\\":130}],151:[function(require,module,exports){\\n'use strict';\\n// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`\\nrequire('../modules/es.string.iterator');\\nvar $ = require('../internals/export');\\nvar DESCRIPTORS = require('../internals/descriptors');\\nvar USE_NATIVE_URL = require('../internals/native-url');\\nvar global = require('../internals/global');\\nvar defineProperties = require('../internals/object-define-properties');\\nvar redefine = require('../internals/redefine');\\nvar anInstance = require('../internals/an-instance');\\nvar has = require('../internals/has');\\nvar assign = require('../internals/object-assign');\\nvar arrayFrom = require('../internals/array-from');\\nvar codeAt = require('../internals/string-multibyte').codeAt;\\nvar toASCII = require('../internals/string-punycode-to-ascii');\\nvar setToStringTag = require('../internals/set-to-string-tag');\\nvar URLSearchParamsModule = require('../modules/web.url-search-params');\\nvar InternalStateModule = require('../internals/internal-state');\\n\\nvar NativeURL = global.URL;\\nvar URLSearchParams = URLSearchParamsModule.URLSearchParams;\\nvar getInternalSearchParamsState = URLSearchParamsModule.getState;\\nvar setInternalState = InternalStateModule.set;\\nvar getInternalURLState = InternalStateModule.getterFor('URL');\\nvar floor = Math.floor;\\nvar pow = Math.pow;\\n\\nvar INVALID_AUTHORITY = 'Invalid authority';\\nvar INVALID_SCHEME = 'Invalid scheme';\\nvar INVALID_HOST = 'Invalid host';\\nvar INVALID_PORT = 'Invalid port';\\n\\nvar ALPHA = /[A-Za-z]/;\\n// eslint-disable-next-line regexp/no-obscure-range -- safe\\nvar ALPHANUMERIC = /[\\\\d+-.A-Za-z]/;\\nvar DIGIT = /\\\\d/;\\nvar HEX_START = /^(0x|0X)/;\\nvar OCT = /^[0-7]+$/;\\nvar DEC = /^\\\\d+$/;\\nvar HEX = /^[\\\\dA-Fa-f]+$/;\\n/* eslint-disable no-control-regex -- safe */\\nvar FORBIDDEN_HOST_CODE_POINT = /[\\\\0\\\\t\\\\n\\\\r #%/:?@[\\\\\\\\]]/;\\nvar FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\\\\0\\\\t\\\\n\\\\r #/:?@[\\\\\\\\]]/;\\nvar LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\\\\u0000-\\\\u001F ]+|[\\\\u0000-\\\\u001F ]+$/g;\\nvar TAB_AND_NEW_LINE = /[\\\\t\\\\n\\\\r]/g;\\n/* eslint-enable no-control-regex -- safe */\\nvar EOF;\\n\\nvar parseHost = function (url, input) {\\n  var result, codePoints, index;\\n  if (input.charAt(0) == '[') {\\n    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;\\n    result = parseIPv6(input.slice(1, -1));\\n    if (!result) return INVALID_HOST;\\n    url.host = result;\\n  // opaque host\\n  } else if (!isSpecial(url)) {\\n    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;\\n    result = '';\\n    codePoints = arrayFrom(input);\\n    for (index = 0; index < codePoints.length; index++) {\\n      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);\\n    }\\n    url.host = result;\\n  } else {\\n    input = toASCII(input);\\n    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;\\n    result = parseIPv4(input);\\n    if (result === null) return INVALID_HOST;\\n    url.host = result;\\n  }\\n};\\n\\nvar parseIPv4 = function (input) {\\n  var parts = input.split('.');\\n  var partsLength, numbers, index, part, radix, number, ipv4;\\n  if (parts.length && parts[parts.length - 1] == '') {\\n    parts.pop();\\n  }\\n  partsLength = parts.length;\\n  if (partsLength > 4) return input;\\n  numbers = [];\\n  for (index = 0; index < partsLength; index++) {\\n    part = parts[index];\\n    if (part == '') return input;\\n    radix = 10;\\n    if (part.length > 1 && part.charAt(0) == '0') {\\n      radix = HEX_START.test(part) ? 16 : 8;\\n      part = part.slice(radix == 8 ? 1 : 2);\\n    }\\n    if (part === '') {\\n      number = 0;\\n    } else {\\n      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;\\n      number = parseInt(part, radix);\\n    }\\n    numbers.push(number);\\n  }\\n  for (index = 0; index < partsLength; index++) {\\n    number = numbers[index];\\n    if (index == partsLength - 1) {\\n      if (number >= pow(256, 5 - partsLength)) return null;\\n    } else if (number > 255) return null;\\n  }\\n  ipv4 = numbers.pop();\\n  for (index = 0; index < numbers.length; index++) {\\n    ipv4 += numbers[index] * pow(256, 3 - index);\\n  }\\n  return ipv4;\\n};\\n\\n// eslint-disable-next-line max-statements -- TODO\\nvar parseIPv6 = function (input) {\\n  var address = [0, 0, 0, 0, 0, 0, 0, 0];\\n  var pieceIndex = 0;\\n  var compress = null;\\n  var pointer = 0;\\n  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;\\n\\n  var char = function () {\\n    return input.charAt(pointer);\\n  };\\n\\n  if (char() == ':') {\\n    if (input.charAt(1) != ':') return;\\n    pointer += 2;\\n    pieceIndex++;\\n    compress = pieceIndex;\\n  }\\n  while (char()) {\\n    if (pieceIndex == 8) return;\\n    if (char() == ':') {\\n      if (compress !== null) return;\\n      pointer++;\\n      pieceIndex++;\\n      compress = pieceIndex;\\n      continue;\\n    }\\n    value = length = 0;\\n    while (length < 4 && HEX.test(char())) {\\n      value = value * 16 + parseInt(char(), 16);\\n      pointer++;\\n      length++;\\n    }\\n    if (char() == '.') {\\n      if (length == 0) return;\\n      pointer -= length;\\n      if (pieceIndex > 6) return;\\n      numbersSeen = 0;\\n      while (char()) {\\n        ipv4Piece = null;\\n        if (numbersSeen > 0) {\\n          if (char() == '.' && numbersSeen < 4) pointer++;\\n          else return;\\n        }\\n        if (!DIGIT.test(char())) return;\\n        while (DIGIT.test(char())) {\\n          number = parseInt(char(), 10);\\n          if (ipv4Piece === null) ipv4Piece = number;\\n          else if (ipv4Piece == 0) return;\\n          else ipv4Piece = ipv4Piece * 10 + number;\\n          if (ipv4Piece > 255) return;\\n          pointer++;\\n        }\\n        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;\\n        numbersSeen++;\\n        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;\\n      }\\n      if (numbersSeen != 4) return;\\n      break;\\n    } else if (char() == ':') {\\n      pointer++;\\n      if (!char()) return;\\n    } else if (char()) return;\\n    address[pieceIndex++] = value;\\n  }\\n  if (compress !== null) {\\n    swaps = pieceIndex - compress;\\n    pieceIndex = 7;\\n    while (pieceIndex != 0 && swaps > 0) {\\n      swap = address[pieceIndex];\\n      address[pieceIndex--] = address[compress + swaps - 1];\\n      address[compress + --swaps] = swap;\\n    }\\n  } else if (pieceIndex != 8) return;\\n  return address;\\n};\\n\\nvar findLongestZeroSequence = function (ipv6) {\\n  var maxIndex = null;\\n  var maxLength = 1;\\n  var currStart = null;\\n  var currLength = 0;\\n  var index = 0;\\n  for (; index < 8; index++) {\\n    if (ipv6[index] !== 0) {\\n      if (currLength > maxLength) {\\n        maxIndex = currStart;\\n        maxLength = currLength;\\n      }\\n      currStart = null;\\n      currLength = 0;\\n    } else {\\n      if (currStart === null) currStart = index;\\n      ++currLength;\\n    }\\n  }\\n  if (currLength > maxLength) {\\n    maxIndex = currStart;\\n    maxLength = currLength;\\n  }\\n  return maxIndex;\\n};\\n\\nvar serializeHost = function (host) {\\n  var result, index, compress, ignore0;\\n  // ipv4\\n  if (typeof host == 'number') {\\n    result = [];\\n    for (index = 0; index < 4; index++) {\\n      result.unshift(host % 256);\\n      host = floor(host / 256);\\n    } return result.join('.');\\n  // ipv6\\n  } else if (typeof host == 'object') {\\n    result = '';\\n    compress = findLongestZeroSequence(host);\\n    for (index = 0; index < 8; index++) {\\n      if (ignore0 && host[index] === 0) continue;\\n      if (ignore0) ignore0 = false;\\n      if (compress === index) {\\n        result += index ? ':' : '::';\\n        ignore0 = true;\\n      } else {\\n        result += host[index].toString(16);\\n        if (index < 7) result += ':';\\n      }\\n    }\\n    return '[' + result + ']';\\n  } return host;\\n};\\n\\nvar C0ControlPercentEncodeSet = {};\\nvar fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {\\n  ' ': 1, '\\\"': 1, '<': 1, '>': 1, '`': 1\\n});\\nvar pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {\\n  '#': 1, '?': 1, '{': 1, '}': 1\\n});\\nvar userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {\\n  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\\\\\\\': 1, ']': 1, '^': 1, '|': 1\\n});\\n\\nvar percentEncode = function (char, set) {\\n  var code = codeAt(char, 0);\\n  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);\\n};\\n\\nvar specialSchemes = {\\n  ftp: 21,\\n  file: null,\\n  http: 80,\\n  https: 443,\\n  ws: 80,\\n  wss: 443\\n};\\n\\nvar isSpecial = function (url) {\\n  return has(specialSchemes, url.scheme);\\n};\\n\\nvar includesCredentials = function (url) {\\n  return url.username != '' || url.password != '';\\n};\\n\\nvar cannotHaveUsernamePasswordPort = function (url) {\\n  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';\\n};\\n\\nvar isWindowsDriveLetter = function (string, normalized) {\\n  var second;\\n  return string.length == 2 && ALPHA.test(string.charAt(0))\\n    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));\\n};\\n\\nvar startsWithWindowsDriveLetter = function (string) {\\n  var third;\\n  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (\\n    string.length == 2 ||\\n    ((third = string.charAt(2)) === '/' || third === '\\\\\\\\' || third === '?' || third === '#')\\n  );\\n};\\n\\nvar shortenURLsPath = function (url) {\\n  var path = url.path;\\n  var pathSize = path.length;\\n  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {\\n    path.pop();\\n  }\\n};\\n\\nvar isSingleDot = function (segment) {\\n  return segment === '.' || segment.toLowerCase() === '%2e';\\n};\\n\\nvar isDoubleDot = function (segment) {\\n  segment = segment.toLowerCase();\\n  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';\\n};\\n\\n// States:\\nvar SCHEME_START = {};\\nvar SCHEME = {};\\nvar NO_SCHEME = {};\\nvar SPECIAL_RELATIVE_OR_AUTHORITY = {};\\nvar PATH_OR_AUTHORITY = {};\\nvar RELATIVE = {};\\nvar RELATIVE_SLASH = {};\\nvar SPECIAL_AUTHORITY_SLASHES = {};\\nvar SPECIAL_AUTHORITY_IGNORE_SLASHES = {};\\nvar AUTHORITY = {};\\nvar HOST = {};\\nvar HOSTNAME = {};\\nvar PORT = {};\\nvar FILE = {};\\nvar FILE_SLASH = {};\\nvar FILE_HOST = {};\\nvar PATH_START = {};\\nvar PATH = {};\\nvar CANNOT_BE_A_BASE_URL_PATH = {};\\nvar QUERY = {};\\nvar FRAGMENT = {};\\n\\n// eslint-disable-next-line max-statements -- TODO\\nvar parseURL = function (url, input, stateOverride, base) {\\n  var state = stateOverride || SCHEME_START;\\n  var pointer = 0;\\n  var buffer = '';\\n  var seenAt = false;\\n  var seenBracket = false;\\n  var seenPasswordToken = false;\\n  var codePoints, char, bufferCodePoints, failure;\\n\\n  if (!stateOverride) {\\n    url.scheme = '';\\n    url.username = '';\\n    url.password = '';\\n    url.host = null;\\n    url.port = null;\\n    url.path = [];\\n    url.query = null;\\n    url.fragment = null;\\n    url.cannotBeABaseURL = false;\\n    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');\\n  }\\n\\n  input = input.replace(TAB_AND_NEW_LINE, '');\\n\\n  codePoints = arrayFrom(input);\\n\\n  while (pointer <= codePoints.length) {\\n    char = codePoints[pointer];\\n    switch (state) {\\n      case SCHEME_START:\\n        if (char && ALPHA.test(char)) {\\n          buffer += char.toLowerCase();\\n          state = SCHEME;\\n        } else if (!stateOverride) {\\n          state = NO_SCHEME;\\n          continue;\\n        } else return INVALID_SCHEME;\\n        break;\\n\\n      case SCHEME:\\n        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {\\n          buffer += char.toLowerCase();\\n        } else if (char == ':') {\\n          if (stateOverride && (\\n            (isSpecial(url) != has(specialSchemes, buffer)) ||\\n            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||\\n            (url.scheme == 'file' && !url.host)\\n          )) return;\\n          url.scheme = buffer;\\n          if (stateOverride) {\\n            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;\\n            return;\\n          }\\n          buffer = '';\\n          if (url.scheme == 'file') {\\n            state = FILE;\\n          } else if (isSpecial(url) && base && base.scheme == url.scheme) {\\n            state = SPECIAL_RELATIVE_OR_AUTHORITY;\\n          } else if (isSpecial(url)) {\\n            state = SPECIAL_AUTHORITY_SLASHES;\\n          } else if (codePoints[pointer + 1] == '/') {\\n            state = PATH_OR_AUTHORITY;\\n            pointer++;\\n          } else {\\n            url.cannotBeABaseURL = true;\\n            url.path.push('');\\n            state = CANNOT_BE_A_BASE_URL_PATH;\\n          }\\n        } else if (!stateOverride) {\\n          buffer = '';\\n          state = NO_SCHEME;\\n          pointer = 0;\\n          continue;\\n        } else return INVALID_SCHEME;\\n        break;\\n\\n      case NO_SCHEME:\\n        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;\\n        if (base.cannotBeABaseURL && char == '#') {\\n          url.scheme = base.scheme;\\n          url.path = base.path.slice();\\n          url.query = base.query;\\n          url.fragment = '';\\n          url.cannotBeABaseURL = true;\\n          state = FRAGMENT;\\n          break;\\n        }\\n        state = base.scheme == 'file' ? FILE : RELATIVE;\\n        continue;\\n\\n      case SPECIAL_RELATIVE_OR_AUTHORITY:\\n        if (char == '/' && codePoints[pointer + 1] == '/') {\\n          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\\n          pointer++;\\n        } else {\\n          state = RELATIVE;\\n          continue;\\n        } break;\\n\\n      case PATH_OR_AUTHORITY:\\n        if (char == '/') {\\n          state = AUTHORITY;\\n          break;\\n        } else {\\n          state = PATH;\\n          continue;\\n        }\\n\\n      case RELATIVE:\\n        url.scheme = base.scheme;\\n        if (char == EOF) {\\n          url.username = base.username;\\n          url.password = base.password;\\n          url.host = base.host;\\n          url.port = base.port;\\n          url.path = base.path.slice();\\n          url.query = base.query;\\n        } else if (char == '/' || (char == '\\\\\\\\' && isSpecial(url))) {\\n          state = RELATIVE_SLASH;\\n        } else if (char == '?') {\\n          url.username = base.username;\\n          url.password = base.password;\\n          url.host = base.host;\\n          url.port = base.port;\\n          url.path = base.path.slice();\\n          url.query = '';\\n          state = QUERY;\\n        } else if (char == '#') {\\n          url.username = base.username;\\n          url.password = base.password;\\n          url.host = base.host;\\n          url.port = base.port;\\n          url.path = base.path.slice();\\n          url.query = base.query;\\n          url.fragment = '';\\n          state = FRAGMENT;\\n        } else {\\n          url.username = base.username;\\n          url.password = base.password;\\n          url.host = base.host;\\n          url.port = base.port;\\n          url.path = base.path.slice();\\n          url.path.pop();\\n          state = PATH;\\n          continue;\\n        } break;\\n\\n      case RELATIVE_SLASH:\\n        if (isSpecial(url) && (char == '/' || char == '\\\\\\\\')) {\\n          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\\n        } else if (char == '/') {\\n          state = AUTHORITY;\\n        } else {\\n          url.username = base.username;\\n          url.password = base.password;\\n          url.host = base.host;\\n          url.port = base.port;\\n          state = PATH;\\n          continue;\\n        } break;\\n\\n      case SPECIAL_AUTHORITY_SLASHES:\\n        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\\n        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;\\n        pointer++;\\n        break;\\n\\n      case SPECIAL_AUTHORITY_IGNORE_SLASHES:\\n        if (char != '/' && char != '\\\\\\\\') {\\n          state = AUTHORITY;\\n          continue;\\n        } break;\\n\\n      case AUTHORITY:\\n        if (char == '@') {\\n          if (seenAt) buffer = '%40' + buffer;\\n          seenAt = true;\\n          bufferCodePoints = arrayFrom(buffer);\\n          for (var i = 0; i < bufferCodePoints.length; i++) {\\n            var codePoint = bufferCodePoints[i];\\n            if (codePoint == ':' && !seenPasswordToken) {\\n              seenPasswordToken = true;\\n              continue;\\n            }\\n            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);\\n            if (seenPasswordToken) url.password += encodedCodePoints;\\n            else url.username += encodedCodePoints;\\n          }\\n          buffer = '';\\n        } else if (\\n          char == EOF || char == '/' || char == '?' || char == '#' ||\\n          (char == '\\\\\\\\' && isSpecial(url))\\n        ) {\\n          if (seenAt && buffer == '') return INVALID_AUTHORITY;\\n          pointer -= arrayFrom(buffer).length + 1;\\n          buffer = '';\\n          state = HOST;\\n        } else buffer += char;\\n        break;\\n\\n      case HOST:\\n      case HOSTNAME:\\n        if (stateOverride && url.scheme == 'file') {\\n          state = FILE_HOST;\\n          continue;\\n        } else if (char == ':' && !seenBracket) {\\n          if (buffer == '') return INVALID_HOST;\\n          failure = parseHost(url, buffer);\\n          if (failure) return failure;\\n          buffer = '';\\n          state = PORT;\\n          if (stateOverride == HOSTNAME) return;\\n        } else if (\\n          char == EOF || char == '/' || char == '?' || char == '#' ||\\n          (char == '\\\\\\\\' && isSpecial(url))\\n        ) {\\n          if (isSpecial(url) && buffer == '') return INVALID_HOST;\\n          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;\\n          failure = parseHost(url, buffer);\\n          if (failure) return failure;\\n          buffer = '';\\n          state = PATH_START;\\n          if (stateOverride) return;\\n          continue;\\n        } else {\\n          if (char == '[') seenBracket = true;\\n          else if (char == ']') seenBracket = false;\\n          buffer += char;\\n        } break;\\n\\n      case PORT:\\n        if (DIGIT.test(char)) {\\n          buffer += char;\\n        } else if (\\n          char == EOF || char == '/' || char == '?' || char == '#' ||\\n          (char == '\\\\\\\\' && isSpecial(url)) ||\\n          stateOverride\\n        ) {\\n          if (buffer != '') {\\n            var port = parseInt(buffer, 10);\\n            if (port > 0xFFFF) return INVALID_PORT;\\n            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;\\n            buffer = '';\\n          }\\n          if (stateOverride) return;\\n          state = PATH_START;\\n          continue;\\n        } else return INVALID_PORT;\\n        break;\\n\\n      case FILE:\\n        url.scheme = 'file';\\n        if (char == '/' || char == '\\\\\\\\') state = FILE_SLASH;\\n        else if (base && base.scheme == 'file') {\\n          if (char == EOF) {\\n            url.host = base.host;\\n            url.path = base.path.slice();\\n            url.query = base.query;\\n          } else if (char == '?') {\\n            url.host = base.host;\\n            url.path = base.path.slice();\\n            url.query = '';\\n            state = QUERY;\\n          } else if (char == '#') {\\n            url.host = base.host;\\n            url.path = base.path.slice();\\n            url.query = base.query;\\n            url.fragment = '';\\n            state = FRAGMENT;\\n          } else {\\n            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\\n              url.host = base.host;\\n              url.path = base.path.slice();\\n              shortenURLsPath(url);\\n            }\\n            state = PATH;\\n            continue;\\n          }\\n        } else {\\n          state = PATH;\\n          continue;\\n        } break;\\n\\n      case FILE_SLASH:\\n        if (char == '/' || char == '\\\\\\\\') {\\n          state = FILE_HOST;\\n          break;\\n        }\\n        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\\n          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);\\n          else url.host = base.host;\\n        }\\n        state = PATH;\\n        continue;\\n\\n      case FILE_HOST:\\n        if (char == EOF || char == '/' || char == '\\\\\\\\' || char == '?' || char == '#') {\\n          if (!stateOverride && isWindowsDriveLetter(buffer)) {\\n            state = PATH;\\n          } else if (buffer == '') {\\n            url.host = '';\\n            if (stateOverride) return;\\n            state = PATH_START;\\n          } else {\\n            failure = parseHost(url, buffer);\\n            if (failure) return failure;\\n            if (url.host == 'localhost') url.host = '';\\n            if (stateOverride) return;\\n            buffer = '';\\n            state = PATH_START;\\n          } continue;\\n        } else buffer += char;\\n        break;\\n\\n      case PATH_START:\\n        if (isSpecial(url)) {\\n          state = PATH;\\n          if (char != '/' && char != '\\\\\\\\') continue;\\n        } else if (!stateOverride && char == '?') {\\n          url.query = '';\\n          state = QUERY;\\n        } else if (!stateOverride && char == '#') {\\n          url.fragment = '';\\n          state = FRAGMENT;\\n        } else if (char != EOF) {\\n          state = PATH;\\n          if (char != '/') continue;\\n        } break;\\n\\n      case PATH:\\n        if (\\n          char == EOF || char == '/' ||\\n          (char == '\\\\\\\\' && isSpecial(url)) ||\\n          (!stateOverride && (char == '?' || char == '#'))\\n        ) {\\n          if (isDoubleDot(buffer)) {\\n            shortenURLsPath(url);\\n            if (char != '/' && !(char == '\\\\\\\\' && isSpecial(url))) {\\n              url.path.push('');\\n            }\\n          } else if (isSingleDot(buffer)) {\\n            if (char != '/' && !(char == '\\\\\\\\' && isSpecial(url))) {\\n              url.path.push('');\\n            }\\n          } else {\\n            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {\\n              if (url.host) url.host = '';\\n              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter\\n            }\\n            url.path.push(buffer);\\n          }\\n          buffer = '';\\n          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {\\n            while (url.path.length > 1 && url.path[0] === '') {\\n              url.path.shift();\\n            }\\n          }\\n          if (char == '?') {\\n            url.query = '';\\n            state = QUERY;\\n          } else if (char == '#') {\\n            url.fragment = '';\\n            state = FRAGMENT;\\n          }\\n        } else {\\n          buffer += percentEncode(char, pathPercentEncodeSet);\\n        } break;\\n\\n      case CANNOT_BE_A_BASE_URL_PATH:\\n        if (char == '?') {\\n          url.query = '';\\n          state = QUERY;\\n        } else if (char == '#') {\\n          url.fragment = '';\\n          state = FRAGMENT;\\n        } else if (char != EOF) {\\n          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);\\n        } break;\\n\\n      case QUERY:\\n        if (!stateOverride && char == '#') {\\n          url.fragment = '';\\n          state = FRAGMENT;\\n        } else if (char != EOF) {\\n          if (char == \\\"'\\\" && isSpecial(url)) url.query += '%27';\\n          else if (char == '#') url.query += '%23';\\n          else url.query += percentEncode(char, C0ControlPercentEncodeSet);\\n        } break;\\n\\n      case FRAGMENT:\\n        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);\\n        break;\\n    }\\n\\n    pointer++;\\n  }\\n};\\n\\n// `URL` constructor\\n// https://url.spec.whatwg.org/#url-class\\nvar URLConstructor = function URL(url /* , base */) {\\n  var that = anInstance(this, URLConstructor, 'URL');\\n  var base = arguments.length > 1 ? arguments[1] : undefined;\\n  var urlString = String(url);\\n  var state = setInternalState(that, { type: 'URL' });\\n  var baseState, failure;\\n  if (base !== undefined) {\\n    if (base instanceof URLConstructor) baseState = getInternalURLState(base);\\n    else {\\n      failure = parseURL(baseState = {}, String(base));\\n      if (failure) throw TypeError(failure);\\n    }\\n  }\\n  failure = parseURL(state, urlString, null, baseState);\\n  if (failure) throw TypeError(failure);\\n  var searchParams = state.searchParams = new URLSearchParams();\\n  var searchParamsState = getInternalSearchParamsState(searchParams);\\n  searchParamsState.updateSearchParams(state.query);\\n  searchParamsState.updateURL = function () {\\n    state.query = String(searchParams) || null;\\n  };\\n  if (!DESCRIPTORS) {\\n    that.href = serializeURL.call(that);\\n    that.origin = getOrigin.call(that);\\n    that.protocol = getProtocol.call(that);\\n    that.username = getUsername.call(that);\\n    that.password = getPassword.call(that);\\n    that.host = getHost.call(that);\\n    that.hostname = getHostname.call(that);\\n    that.port = getPort.call(that);\\n    that.pathname = getPathname.call(that);\\n    that.search = getSearch.call(that);\\n    that.searchParams = getSearchParams.call(that);\\n    that.hash = getHash.call(that);\\n  }\\n};\\n\\nvar URLPrototype = URLConstructor.prototype;\\n\\nvar serializeURL = function () {\\n  var url = getInternalURLState(this);\\n  var scheme = url.scheme;\\n  var username = url.username;\\n  var password = url.password;\\n  var host = url.host;\\n  var port = url.port;\\n  var path = url.path;\\n  var query = url.query;\\n  var fragment = url.fragment;\\n  var output = scheme + ':';\\n  if (host !== null) {\\n    output += '//';\\n    if (includesCredentials(url)) {\\n      output += username + (password ? ':' + password : '') + '@';\\n    }\\n    output += serializeHost(host);\\n    if (port !== null) output += ':' + port;\\n  } else if (scheme == 'file') output += '//';\\n  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\\n  if (query !== null) output += '?' + query;\\n  if (fragment !== null) output += '#' + fragment;\\n  return output;\\n};\\n\\nvar getOrigin = function () {\\n  var url = getInternalURLState(this);\\n  var scheme = url.scheme;\\n  var port = url.port;\\n  if (scheme == 'blob') try {\\n    return new URLConstructor(scheme.path[0]).origin;\\n  } catch (error) {\\n    return 'null';\\n  }\\n  if (scheme == 'file' || !isSpecial(url)) return 'null';\\n  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');\\n};\\n\\nvar getProtocol = function () {\\n  return getInternalURLState(this).scheme + ':';\\n};\\n\\nvar getUsername = function () {\\n  return getInternalURLState(this).username;\\n};\\n\\nvar getPassword = function () {\\n  return getInternalURLState(this).password;\\n};\\n\\nvar getHost = function () {\\n  var url = getInternalURLState(this);\\n  var host = url.host;\\n  var port = url.port;\\n  return host === null ? ''\\n    : port === null ? serializeHost(host)\\n    : serializeHost(host) + ':' + port;\\n};\\n\\nvar getHostname = function () {\\n  var host = getInternalURLState(this).host;\\n  return host === null ? '' : serializeHost(host);\\n};\\n\\nvar getPort = function () {\\n  var port = getInternalURLState(this).port;\\n  return port === null ? '' : String(port);\\n};\\n\\nvar getPathname = function () {\\n  var url = getInternalURLState(this);\\n  var path = url.path;\\n  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\\n};\\n\\nvar getSearch = function () {\\n  var query = getInternalURLState(this).query;\\n  return query ? '?' + query : '';\\n};\\n\\nvar getSearchParams = function () {\\n  return getInternalURLState(this).searchParams;\\n};\\n\\nvar getHash = function () {\\n  var fragment = getInternalURLState(this).fragment;\\n  return fragment ? '#' + fragment : '';\\n};\\n\\nvar accessorDescriptor = function (getter, setter) {\\n  return { get: getter, set: setter, configurable: true, enumerable: true };\\n};\\n\\nif (DESCRIPTORS) {\\n  defineProperties(URLPrototype, {\\n    // `URL.prototype.href` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-href\\n    href: accessorDescriptor(serializeURL, function (href) {\\n      var url = getInternalURLState(this);\\n      var urlString = String(href);\\n      var failure = parseURL(url, urlString);\\n      if (failure) throw TypeError(failure);\\n      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\\n    }),\\n    // `URL.prototype.origin` getter\\n    // https://url.spec.whatwg.org/#dom-url-origin\\n    origin: accessorDescriptor(getOrigin),\\n    // `URL.prototype.protocol` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-protocol\\n    protocol: accessorDescriptor(getProtocol, function (protocol) {\\n      var url = getInternalURLState(this);\\n      parseURL(url, String(protocol) + ':', SCHEME_START);\\n    }),\\n    // `URL.prototype.username` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-username\\n    username: accessorDescriptor(getUsername, function (username) {\\n      var url = getInternalURLState(this);\\n      var codePoints = arrayFrom(String(username));\\n      if (cannotHaveUsernamePasswordPort(url)) return;\\n      url.username = '';\\n      for (var i = 0; i < codePoints.length; i++) {\\n        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);\\n      }\\n    }),\\n    // `URL.prototype.password` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-password\\n    password: accessorDescriptor(getPassword, function (password) {\\n      var url = getInternalURLState(this);\\n      var codePoints = arrayFrom(String(password));\\n      if (cannotHaveUsernamePasswordPort(url)) return;\\n      url.password = '';\\n      for (var i = 0; i < codePoints.length; i++) {\\n        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);\\n      }\\n    }),\\n    // `URL.prototype.host` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-host\\n    host: accessorDescriptor(getHost, function (host) {\\n      var url = getInternalURLState(this);\\n      if (url.cannotBeABaseURL) return;\\n      parseURL(url, String(host), HOST);\\n    }),\\n    // `URL.prototype.hostname` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-hostname\\n    hostname: accessorDescriptor(getHostname, function (hostname) {\\n      var url = getInternalURLState(this);\\n      if (url.cannotBeABaseURL) return;\\n      parseURL(url, String(hostname), HOSTNAME);\\n    }),\\n    // `URL.prototype.port` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-port\\n    port: accessorDescriptor(getPort, function (port) {\\n      var url = getInternalURLState(this);\\n      if (cannotHaveUsernamePasswordPort(url)) return;\\n      port = String(port);\\n      if (port == '') url.port = null;\\n      else parseURL(url, port, PORT);\\n    }),\\n    // `URL.prototype.pathname` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-pathname\\n    pathname: accessorDescriptor(getPathname, function (pathname) {\\n      var url = getInternalURLState(this);\\n      if (url.cannotBeABaseURL) return;\\n      url.path = [];\\n      parseURL(url, pathname + '', PATH_START);\\n    }),\\n    // `URL.prototype.search` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-search\\n    search: accessorDescriptor(getSearch, function (search) {\\n      var url = getInternalURLState(this);\\n      search = String(search);\\n      if (search == '') {\\n        url.query = null;\\n      } else {\\n        if ('?' == search.charAt(0)) search = search.slice(1);\\n        url.query = '';\\n        parseURL(url, search, QUERY);\\n      }\\n      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\\n    }),\\n    // `URL.prototype.searchParams` getter\\n    // https://url.spec.whatwg.org/#dom-url-searchparams\\n    searchParams: accessorDescriptor(getSearchParams),\\n    // `URL.prototype.hash` accessors pair\\n    // https://url.spec.whatwg.org/#dom-url-hash\\n    hash: accessorDescriptor(getHash, function (hash) {\\n      var url = getInternalURLState(this);\\n      hash = String(hash);\\n      if (hash == '') {\\n        url.fragment = null;\\n        return;\\n      }\\n      if ('#' == hash.charAt(0)) hash = hash.slice(1);\\n      url.fragment = '';\\n      parseURL(url, hash, FRAGMENT);\\n    })\\n  });\\n}\\n\\n// `URL.prototype.toJSON` method\\n// https://url.spec.whatwg.org/#dom-url-tojson\\nredefine(URLPrototype, 'toJSON', function toJSON() {\\n  return serializeURL.call(this);\\n}, { enumerable: true });\\n\\n// `URL.prototype.toString` method\\n// https://url.spec.whatwg.org/#URL-stringification-behavior\\nredefine(URLPrototype, 'toString', function toString() {\\n  return serializeURL.call(this);\\n}, { enumerable: true });\\n\\nif (NativeURL) {\\n  var nativeCreateObjectURL = NativeURL.createObjectURL;\\n  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;\\n  // `URL.createObjectURL` method\\n  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\\n  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {\\n    return nativeCreateObjectURL.apply(NativeURL, arguments);\\n  });\\n  // `URL.revokeObjectURL` method\\n  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL\\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\\n  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {\\n    return nativeRevokeObjectURL.apply(NativeURL, arguments);\\n  });\\n}\\n\\nsetToStringTag(URLConstructor, 'URL');\\n\\n$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {\\n  URL: URLConstructor\\n});\\n\\n},{\\\"../internals/an-instance\\\":24,\\\"../internals/array-from\\\":30,\\\"../internals/descriptors\\\":46,\\\"../internals/export\\\":52,\\\"../internals/global\\\":61,\\\"../internals/has\\\":62,\\\"../internals/internal-state\\\":70,\\\"../internals/native-url\\\":81,\\\"../internals/object-assign\\\":83,\\\"../internals/object-define-properties\\\":85,\\\"../internals/redefine\\\":98,\\\"../internals/set-to-string-tag\\\":107,\\\"../internals/string-multibyte\\\":112,\\\"../internals/string-punycode-to-ascii\\\":113,\\\"../modules/es.string.iterator\\\":132,\\\"../modules/web.url-search-params\\\":150}],152:[function(require,module,exports){\\n'use strict';\\nvar $ = require('../internals/export');\\n\\n// `URL.prototype.toJSON` method\\n// https://url.spec.whatwg.org/#dom-url-tojson\\n$({ target: 'URL', proto: true, enumerable: true }, {\\n  toJSON: function toJSON() {\\n    return URL.prototype.toString.call(this);\\n  }\\n});\\n\\n},{\\\"../internals/export\\\":52}],153:[function(require,module,exports){\\n'use strict';\\n\\nvar matchOperatorsRe = /[|\\\\\\\\{}()[\\\\]^$+*?.]/g;\\n\\nmodule.exports = function (str) {\\n\\tif (typeof str !== 'string') {\\n\\t\\tthrow new TypeError('Expected a string');\\n\\t}\\n\\n\\treturn str.replace(matchOperatorsRe, '\\\\\\\\$&');\\n};\\n\\n},{}],154:[function(require,module,exports){\\n'use strict';\\n/* eslint-disable no-control-regex */\\n// TODO: remove parens when Node.js 6 is targeted. Node.js 4 barfs at it.\\nmodule.exports = () => (/[<>:\\\"\\\\/\\\\\\\\|?*\\\\x00-\\\\x1F]/g);\\nmodule.exports.windowsNames = () => (/^(con|prn|aux|nul|com[0-9]|lpt[0-9])$/i);\\n\\n},{}],155:[function(require,module,exports){\\n'use strict';\\nconst path = require('path');\\nconst filenamify = require('./filenamify');\\n\\nconst filenamifyPath = (filePath, options) => {\\n\\tfilePath = path.resolve(filePath);\\n\\treturn path.join(path.dirname(filePath), filenamify(path.basename(filePath), options));\\n};\\n\\nmodule.exports = filenamifyPath;\\n\\n},{\\\"./filenamify\\\":156,\\\"path\\\":196}],156:[function(require,module,exports){\\n'use strict';\\nconst trimRepeated = require('trim-repeated');\\nconst filenameReservedRegex = require('filename-reserved-regex');\\nconst stripOuter = require('strip-outer');\\n\\n// Doesn't make sense to have longer filenames\\nconst MAX_FILENAME_LENGTH = 100;\\n\\nconst reControlChars = /[\\\\u0000-\\\\u001f\\\\u0080-\\\\u009f]/g; // eslint-disable-line no-control-regex\\nconst reRelativePath = /^\\\\.+/;\\nconst reTrailingPeriods = /\\\\.+$/;\\n\\nconst filenamify = (string, options = {}) => {\\n\\tif (typeof string !== 'string') {\\n\\t\\tthrow new TypeError('Expected a string');\\n\\t}\\n\\n\\tconst replacement = options.replacement === undefined ? '!' : options.replacement;\\n\\n\\tif (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {\\n\\t\\tthrow new Error('Replacement string cannot contain reserved filename characters');\\n\\t}\\n\\n\\tstring = string.replace(filenameReservedRegex(), replacement);\\n\\tstring = string.replace(reControlChars, replacement);\\n\\tstring = string.replace(reRelativePath, replacement);\\n\\tstring = string.replace(reTrailingPeriods, '');\\n\\n\\tif (replacement.length > 0) {\\n\\t\\tstring = trimRepeated(string, replacement);\\n\\t\\tstring = string.length > 1 ? stripOuter(string, replacement) : string;\\n\\t}\\n\\n\\tstring = filenameReservedRegex.windowsNames().test(string) ? string + replacement : string;\\n\\tstring = string.slice(0, typeof options.maxLength === 'number' ? options.maxLength : MAX_FILENAME_LENGTH);\\n\\n\\treturn string;\\n};\\n\\nmodule.exports = filenamify;\\n\\n},{\\\"filename-reserved-regex\\\":154,\\\"strip-outer\\\":198,\\\"trim-repeated\\\":199}],157:[function(require,module,exports){\\n'use strict';\\nconst filenamify = require('./filenamify');\\nconst filenamifyPath = require('./filenamify-path');\\n\\nconst filenamifyCombined = filenamify;\\nfilenamifyCombined.path = filenamifyPath;\\n\\nmodule.exports = filenamify;\\n\\n},{\\\"./filenamify\\\":156,\\\"./filenamify-path\\\":155}],158:[function(require,module,exports){\\n'use strict'\\n\\nmodule.exports = {\\n  DEFAULT_HTTP_API: '/ip4/127.0.0.1/tcp/5001'\\n}\\n\\n},{}],159:[function(require,module,exports){\\n'use strict'\\n\\nmodule.exports = {\\n  httpClient: 'httpClient',\\n  windowIpfs: 'windowIpfs',\\n  jsIpfs: 'jsIpfs',\\n  webExt: 'webExt'\\n}\\n\\n},{}],160:[function(require,module,exports){\\n(function (global){(function (){\\n'use strict'\\n/* global self */\\n\\n// Establish the root object, `window` in the browser, `self` in Service Worker. or `global` on the server.\\n// Credit: https://github.com/megawac/underscore/commit/365311c9a440438531ca1c6bfd49e3c7c5f46079\\nmodule.exports = (typeof self === 'object' && self.self === self && self) ||\\n  (typeof global === 'object' && global.global === global && global) ||\\n  this\\n\\n}).call(this)}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],161:[function(require,module,exports){\\n'use strict'\\n\\nconst root = require('./constants/root')\\nconst mergeOptions = require('merge-options')\\nconst tryWebExt = require('./providers/webext')\\nconst tryWindow = require('./providers/window-ipfs')\\nconst tryHttpClient = require('./providers/http-client')\\nconst tryJsIpfs = require('./providers/js-ipfs')\\n\\nconst defaultGlobalOpts = {\\n  connectionTest: async (ipfs) => {\\n    // ipfs connection is working if we can fetch data via async iterator API\\n    const cid = 'QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn' // TODO: switch to identity hash when js-ipfs is fixed: https://github.com/ipfs/js-ipfs/issues/3289\\n    for await (const file of ipfs.get(cid)) {\\n      if (file.type === 'dir' && file.name === cid) return true\\n    }\\n    return false\\n  }\\n}\\n\\nconst makeProvider = (fn, defaults = {}) => {\\n  return (options = {}) => {\\n    return (globalOpts) => {\\n      options = mergeOptions(defaultGlobalOpts, defaults, globalOpts, options)\\n      return fn(options)\\n    }\\n  }\\n}\\n\\nconst providers = {\\n  httpClient: makeProvider((options) => {\\n    return tryHttpClient({ root, ...options })\\n  }),\\n  windowIpfs: makeProvider(options => {\\n    return tryWindow({ root, ...options })\\n  }),\\n  jsIpfs: makeProvider(options => {\\n    return tryJsIpfs(options)\\n  }),\\n  webExt: makeProvider(options => {\\n    return tryWebExt({ root, ...options })\\n  })\\n}\\n\\nconst defaultProviders = [\\n  providers.windowIpfs(),\\n  providers.httpClient()\\n]\\n\\nasync function getIpfs ({ providers = defaultProviders, ...options } = {}) {\\n  for (const provider of providers) {\\n    try {\\n      const res = await provider(options)\\n      if (res) return res\\n    } catch (err) {\\n      // provider failed unexpectedly, log error and move to the next one\\n      console.error('[ipfs-provider]', err) // eslint-disable-line no-console\\n    }\\n  }\\n}\\n\\nmodule.exports = {\\n  getIpfs,\\n  providers,\\n  makeProvider\\n}\\n\\n},{\\\"./constants/root\\\":160,\\\"./providers/http-client\\\":162,\\\"./providers/js-ipfs\\\":163,\\\"./providers/webext\\\":164,\\\"./providers/window-ipfs\\\":165,\\\"merge-options\\\":170}],162:[function(require,module,exports){\\n'use strict'\\n\\nconst { URL } = require('iso-url')\\nconst PROVIDERS = require('../constants/providers')\\nconst { DEFAULT_HTTP_API } = require('../constants/defaults')\\n\\n/*\\n * This provider lazy-loads https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs-http-client\\n * so it is not included as a dependency if not used.\\n *\\n * HTTP Client init fallback:\\n * 1. Use constructor returned by loadHttpClientModule function\\n * 2. Fallback to window.IpfsHttpClient\\n *\\n * API URL fallback order:\\n * 1. Try user specified API address\\n * 2. Try current origin\\n * 3. Try DEFAULT_HTTP_API\\n*/\\nasync function tryHttpClient ({ loadHttpClientModule, apiAddress, root, connectionTest, ...options }) {\\n  // Find HTTP client\\n  let httpClient\\n  if (loadHttpClientModule) httpClient = await loadHttpClientModule()\\n\\n  // Final fallback to window.IpfsHttpClient or error\\n  if (!httpClient) {\\n    if (root.IpfsHttpClient) {\\n      httpClient = root.IpfsHttpClient\\n    } else {\\n      throw new Error('ipfs-provider could not initialize js-ipfs-http-client: make sure its constructor is returned by loadHttpClientModule function or exposed at window.IpfsHttpClient')\\n    }\\n  }\\n\\n  // Allow the use of `import` or `require` on `loadHttpClientModule` fn\\n  httpClient = httpClient.default || httpClient // TODO: create 'import' demo in examples/\\n\\n  // If explicit custom apiAddress provided, only try that.\\n  if (apiAddress || options.url || options.host) {\\n    return maybeApi({ apiAddress, connectionTest, httpClient, ...options })\\n  }\\n\\n  // Current origin is not localhost:5001 so try with current origin info\\n  const { location } = root\\n  if (location && !(location.port === '5001' && location.hostname.match(/^127.0.0.1$|^localhost$/))) {\\n    const origin = new URL(location.origin)\\n    origin.pathname = '/'\\n    const res = await maybeApi({\\n      apiAddress: origin.toString(),\\n      connectionTest,\\n      httpClient,\\n      ...options\\n    })\\n    if (res) return res\\n  }\\n\\n  // ...otherwise try /ip4/127.0.0.1/tcp/5001\\n  return maybeApi({ apiAddress: DEFAULT_HTTP_API, connectionTest, httpClient, ...options })\\n}\\n\\n// Init and test an api client against provided API address.\\n// Returns js-ipfs-http-client instance or null\\nasync function maybeApi ({ apiAddress, connectionTest, httpClient, ...options }) {\\n  try {\\n    const ipfs = httpClient({ ...options, ...clientOptions(apiAddress) })\\n    await connectionTest(ipfs)\\n    return { ipfs, provider: PROVIDERS.httpClient, apiAddress }\\n  } catch (error) {\\n    // Failed to connect to ipfs-api in `apiAddress`\\n    // console.error('[ipfs-provider:httpClient]', error)\\n    return null\\n  }\\n}\\n\\n// Convert string with URL or Multiaddr to explicit configuration object\\n// https://www.npmjs.com/package/ipfs-http-client#usage\\nconst clientOptions = (apiAddress) => {\\n  switch (typeof apiAddress) {\\n    case 'string':\\n      return { url: apiAddress }\\n    case 'object':\\n      return JSON.parse(JSON.stringify(apiAddress)) // ensure deep copy\\n    case 'undefined':\\n      return {}\\n    default:\\n      throw new Error('invalid apiAddress passed to httpClient')\\n  }\\n}\\n\\nmodule.exports = tryHttpClient\\n\\n},{\\\"../constants/defaults\\\":158,\\\"../constants/providers\\\":159,\\\"iso-url\\\":167}],163:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nasync function createIpfs (ipfsModule, opts) {\\n  // Allow the use of `import` or `require` on `getJsIpfs` fn\\n  ipfsModule = ipfsModule.default || ipfsModule\\n  return ipfsModule.create(opts)\\n}\\n\\nasync function tryJsIpfs ({ connectionTest, loadJsIpfsModule, options, init = createIpfs }) {\\n  const ipfsModule = await loadJsIpfsModule()\\n  const ipfs = await init(ipfsModule, options)\\n  await connectionTest(ipfs)\\n  return { ipfs, provider: PROVIDERS.jsIpfs }\\n}\\n\\nmodule.exports = tryJsIpfs\\n\\n},{\\\"../constants/providers\\\":159}],164:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nasync function tryWebExt ({ root, connectionTest }) {\\n  // Opportunistic optimizations when running inside of web extension (eg. ipfs-companion)\\n  if (typeof root.chrome === 'object' && root.chrome.extension && root.chrome.extension.getBackgroundPage) {\\n    // Note: under some vendors getBackgroundPage() will return null if window is in incognito mode\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1329304\\n    let bg = null\\n    try {\\n      bg = root.chrome.extension.getBackgroundPage()\\n    } catch (err) {\\n      // not in browser extension\\n      return null\\n    }\\n    // If extension is exposing IPFS API as `ipfs` on the background page\\n    // it can be used directly for the best performance\\n    if (bg && bg.ipfs) {\\n      const { ipfs } = bg\\n      await connectionTest(ipfs)\\n      return { ipfs, provider: PROVIDERS.webExt }\\n    }\\n    /*  Other endpoints can be added here in the future.\\n        For example, Companion could provide API for other browser extensions:\\n        https://github.com/ipfs-shipyard/ipfs-companion/issues/307 */\\n  }\\n}\\n\\nmodule.exports = tryWebExt\\n\\n},{\\\"../constants/providers\\\":159}],165:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nasync function tryWindow ({ root, permissions, connectionTest }) {\\n  if (root.ipfs) {\\n    // files.get is required for testing if API works, ensure we request it\\n    if (!(permissions && permissions.commands && permissions.commands.includes('files.get'))) {\\n      permissions = permissions || {}\\n      permissions = JSON.parse(JSON.stringify(permissions)) // deep copy to work with freezed objects\\n      permissions.commands = permissions.commands || []\\n      permissions.commands.push('files.get')\\n    }\\n    // try window.ipfs.enable first: https://github.com/ipfs-shipyard/ipfs-companion/issues/589\\n    const ipfs = typeof root.ipfs.enable === 'function'\\n      ? await root.ipfs.enable(permissions)\\n      : root.ipfs\\n    await connectionTest(ipfs)\\n    return { ipfs, provider: PROVIDERS.windowIpfs }\\n  }\\n}\\n\\nmodule.exports = tryWindow\\n\\n},{\\\"../constants/providers\\\":159}],166:[function(require,module,exports){\\n'use strict';\\n\\nmodule.exports = value => {\\n\\tif (Object.prototype.toString.call(value) !== '[object Object]') {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tconst prototype = Object.getPrototypeOf(value);\\n\\treturn prototype === null || prototype === Object.prototype;\\n};\\n\\n},{}],167:[function(require,module,exports){\\n'use strict'\\n\\nconst {\\n  URLWithLegacySupport,\\n  format,\\n  URLSearchParams,\\n  defaultBase\\n} = require('./src/url')\\nconst relative = require('./src/relative')\\n\\nmodule.exports = {\\n  URL: URLWithLegacySupport,\\n  URLSearchParams,\\n  format,\\n  relative,\\n  defaultBase\\n}\\n\\n},{\\\"./src/relative\\\":168,\\\"./src/url\\\":169}],168:[function(require,module,exports){\\n'use strict'\\n\\nconst { URLWithLegacySupport, format } = require('./url')\\n\\n/**\\n * @param {string | undefined} url\\n * @param {any} [location]\\n * @param {any} [protocolMap]\\n * @param {any} [defaultProtocol]\\n */\\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\\n  let protocol = location.protocol\\n    ? location.protocol.replace(':', '')\\n    : 'http'\\n\\n  // Check protocol map\\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\\n  let urlParsed\\n\\n  try {\\n    urlParsed = new URLWithLegacySupport(url)\\n  } catch (err) {\\n    urlParsed = {}\\n  }\\n\\n  const base = Object.assign({}, location, {\\n    protocol: protocol || urlParsed.protocol,\\n    host: location.host || urlParsed.host\\n  })\\n\\n  return new URLWithLegacySupport(url, format(base)).toString()\\n}\\n\\n},{\\\"./url\\\":169}],169:[function(require,module,exports){\\n'use strict'\\n\\nconst isReactNative =\\n    typeof navigator !== 'undefined' &&\\n    navigator.product === 'ReactNative'\\n\\nfunction getDefaultBase () {\\n  if (isReactNative) {\\n    return 'http://localhost'\\n  }\\n\\n  return self.location.protocol + '//' + self.location.host\\n}\\n\\nconst URL = self.URL\\nconst defaultBase = getDefaultBase()\\n\\nclass URLWithLegacySupport {\\n  constructor (url = '', base = defaultBase) {\\n    this.super = new URL(url, base)\\n    this.path = this.pathname + this.search\\n    this.auth =\\n            this.username && this.password\\n              ? this.username + ':' + this.password\\n              : null\\n\\n    this.query =\\n            this.search && this.search.startsWith('?')\\n              ? this.search.slice(1)\\n              : null\\n  }\\n\\n  get hash () {\\n    return this.super.hash\\n  }\\n\\n  get host () {\\n    return this.super.host\\n  }\\n\\n  get hostname () {\\n    return this.super.hostname\\n  }\\n\\n  get href () {\\n    return this.super.href\\n  }\\n\\n  get origin () {\\n    return this.super.origin\\n  }\\n\\n  get password () {\\n    return this.super.password\\n  }\\n\\n  get pathname () {\\n    return this.super.pathname\\n  }\\n\\n  get port () {\\n    return this.super.port\\n  }\\n\\n  get protocol () {\\n    return this.super.protocol\\n  }\\n\\n  get search () {\\n    return this.super.search\\n  }\\n\\n  get searchParams () {\\n    return this.super.searchParams\\n  }\\n\\n  get username () {\\n    return this.super.username\\n  }\\n\\n  set hash (hash) {\\n    this.super.hash = hash\\n  }\\n\\n  set host (host) {\\n    this.super.host = host\\n  }\\n\\n  set hostname (hostname) {\\n    this.super.hostname = hostname\\n  }\\n\\n  set href (href) {\\n    this.super.href = href\\n  }\\n\\n  set password (password) {\\n    this.super.password = password\\n  }\\n\\n  set pathname (pathname) {\\n    this.super.pathname = pathname\\n  }\\n\\n  set port (port) {\\n    this.super.port = port\\n  }\\n\\n  set protocol (protocol) {\\n    this.super.protocol = protocol\\n  }\\n\\n  set search (search) {\\n    this.super.search = search\\n  }\\n\\n  set username (username) {\\n    this.super.username = username\\n  }\\n\\n  /**\\n   * @param {any} o\\n   */\\n  static createObjectURL (o) {\\n    return URL.createObjectURL(o)\\n  }\\n\\n  /**\\n   * @param {string} o\\n   */\\n  static revokeObjectURL (o) {\\n    URL.revokeObjectURL(o)\\n  }\\n\\n  toJSON () {\\n    return this.super.toJSON()\\n  }\\n\\n  toString () {\\n    return this.super.toString()\\n  }\\n\\n  format () {\\n    return this.toString()\\n  }\\n}\\n\\n/**\\n * @param {string | import('url').UrlObject} obj\\n */\\nfunction format (obj) {\\n  if (typeof obj === 'string') {\\n    const url = new URL(obj)\\n\\n    return url.toString()\\n  }\\n\\n  if (!(obj instanceof URL)) {\\n    const userPass =\\n            // @ts-ignore its not supported in node but we normalise\\n            obj.username && obj.password\\n              // @ts-ignore its not supported in node but we normalise\\n              ? `${obj.username}:${obj.password}@`\\n              : ''\\n    const auth = obj.auth ? obj.auth + '@' : ''\\n    const port = obj.port ? ':' + obj.port : ''\\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\\n    const host = obj.host || ''\\n    const hostname = obj.hostname || ''\\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\\n    const hash = obj.hash || ''\\n    const pathname = obj.pathname || ''\\n    // @ts-ignore - path is not supported in node but we normalise\\n    const path = obj.path || pathname + search\\n\\n    return `${protocol}${userPass || auth}${\\n            host || hostname + port\\n        }${path}${hash}`\\n  }\\n}\\n\\nmodule.exports = {\\n  URLWithLegacySupport,\\n  URLSearchParams: self.URLSearchParams,\\n  defaultBase,\\n  format\\n}\\n\\n},{}],170:[function(require,module,exports){\\n'use strict';\\nconst isOptionObject = require('is-plain-obj');\\n\\nconst {hasOwnProperty} = Object.prototype;\\nconst {propertyIsEnumerable} = Object;\\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\\n\\tvalue,\\n\\twritable: true,\\n\\tenumerable: true,\\n\\tconfigurable: true\\n});\\n\\nconst globalThis = this;\\nconst defaultMergeOptions = {\\n\\tconcatArrays: false,\\n\\tignoreUndefined: false\\n};\\n\\nconst getEnumerableOwnPropertyKeys = value => {\\n\\tconst keys = [];\\n\\n\\tfor (const key in value) {\\n\\t\\tif (hasOwnProperty.call(value, key)) {\\n\\t\\t\\tkeys.push(key);\\n\\t\\t}\\n\\t}\\n\\n\\t/* istanbul ignore else  */\\n\\tif (Object.getOwnPropertySymbols) {\\n\\t\\tconst symbols = Object.getOwnPropertySymbols(value);\\n\\n\\t\\tfor (const symbol of symbols) {\\n\\t\\t\\tif (propertyIsEnumerable.call(value, symbol)) {\\n\\t\\t\\t\\tkeys.push(symbol);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn keys;\\n};\\n\\nfunction clone(value) {\\n\\tif (Array.isArray(value)) {\\n\\t\\treturn cloneArray(value);\\n\\t}\\n\\n\\tif (isOptionObject(value)) {\\n\\t\\treturn cloneOptionObject(value);\\n\\t}\\n\\n\\treturn value;\\n}\\n\\nfunction cloneArray(array) {\\n\\tconst result = array.slice(0, 0);\\n\\n\\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\\n\\t\\tdefineProperty(result, key, clone(array[key]));\\n\\t});\\n\\n\\treturn result;\\n}\\n\\nfunction cloneOptionObject(object) {\\n\\tconst result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\\n\\n\\tgetEnumerableOwnPropertyKeys(object).forEach(key => {\\n\\t\\tdefineProperty(result, key, clone(object[key]));\\n\\t});\\n\\n\\treturn result;\\n}\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {string[]} keys keys to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n */\\nconst mergeKeys = (merged, source, keys, config) => {\\n\\tkeys.forEach(key => {\\n\\t\\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Do not recurse into prototype chain of merged\\n\\t\\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\\n\\t\\t\\tdefineProperty(merged, key, merge(merged[key], source[key], config));\\n\\t\\t} else {\\n\\t\\t\\tdefineProperty(merged, key, clone(source[key]));\\n\\t\\t}\\n\\t});\\n\\n\\treturn merged;\\n};\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n *\\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\\n */\\nconst concatArrays = (merged, source, config) => {\\n\\tlet result = merged.slice(0, 0);\\n\\tlet resultIndex = 0;\\n\\n\\t[merged, source].forEach(array => {\\n\\t\\tconst indices = [];\\n\\n\\t\\t// `result.concat(array)` with cloning\\n\\t\\tfor (let k = 0; k < array.length; k++) {\\n\\t\\t\\tif (!hasOwnProperty.call(array, k)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tindices.push(String(k));\\n\\n\\t\\t\\tif (array === merged) {\\n\\t\\t\\t\\t// Already cloned\\n\\t\\t\\t\\tdefineProperty(result, resultIndex++, array[k]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdefineProperty(result, resultIndex++, clone(array[k]));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Merge non-index keys\\n\\t\\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\\n\\t});\\n\\n\\treturn result;\\n};\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n */\\nfunction merge(merged, source, config) {\\n\\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\\n\\t\\treturn concatArrays(merged, source, config);\\n\\t}\\n\\n\\tif (!isOptionObject(source) || !isOptionObject(merged)) {\\n\\t\\treturn clone(source);\\n\\t}\\n\\n\\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\\n}\\n\\nmodule.exports = function (...options) {\\n\\tconst config = merge(clone(defaultMergeOptions), (this !== globalThis && this) || {}, defaultMergeOptions);\\n\\tlet merged = {_: {}};\\n\\n\\tfor (const option of options) {\\n\\t\\tif (option === undefined) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!isOptionObject(option)) {\\n\\t\\t\\tthrow new TypeError('`' + option + '` is not an Option Object');\\n\\t\\t}\\n\\n\\t\\tmerged = merge(merged, {_: option}, config);\\n\\t}\\n\\n\\treturn merged._;\\n};\\n\\n},{\\\"is-plain-obj\\\":166}],171:[function(require,module,exports){\\n'use strict'\\n\\nconst { encodeText } = require('./util')\\n\\n/** @typedef {import('./types').CodecFactory} CodecFactory */\\n/** @typedef {import(\\\"./types\\\").BaseName} BaseName */\\n/** @typedef {import(\\\"./types\\\").BaseCode} BaseCode */\\n\\n/**\\n * Class to encode/decode in the supported Bases\\n *\\n */\\nclass Base {\\n  /**\\n   * @param {BaseName} name\\n   * @param {BaseCode} code\\n   * @param {CodecFactory} factory\\n   * @param {string} alphabet\\n   */\\n  constructor (name, code, factory, alphabet) {\\n    this.name = name\\n    this.code = code\\n    this.codeBuf = encodeText(this.code)\\n    this.alphabet = alphabet\\n    this.codec = factory(alphabet)\\n  }\\n\\n  /**\\n   * @param {Uint8Array} buf\\n   * @returns {string}\\n   */\\n  encode (buf) {\\n    return this.codec.encode(buf)\\n  }\\n\\n  /**\\n   * @param {string} string\\n   * @returns {Uint8Array}\\n   */\\n  decode (string) {\\n    for (const char of string) {\\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\\n        throw new Error(`invalid character '${char}' in '${string}'`)\\n      }\\n    }\\n    return this.codec.decode(string)\\n  }\\n}\\n\\nmodule.exports = Base\\n\\n},{\\\"./util\\\":175}],172:[function(require,module,exports){\\n'use strict'\\n\\nconst baseX = require('@multiformats/base-x')\\nconst Base = require('./base.js')\\nconst { rfc4648 } = require('./rfc4648')\\nconst { decodeText, encodeText } = require('./util')\\n\\n/** @typedef {import('./types').CodecFactory} CodecFactory */\\n/** @typedef {import('./types').Codec} Codec */\\n/** @typedef {import('./types').BaseName} BaseName */\\n/** @typedef {import('./types').BaseCode} BaseCode */\\n\\n/** @type {CodecFactory} */\\nconst identity = () => {\\n  return {\\n    encode: decodeText,\\n    decode: encodeText\\n  }\\n}\\n\\n/**\\n *\\n * name, code, implementation, alphabet\\n *\\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\\n */\\nconst constants = [\\n  ['identity', '\\\\x00', identity, ''],\\n  ['base2', '0', rfc4648(1), '01'],\\n  ['base8', '7', rfc4648(3), '01234567'],\\n  ['base10', '9', baseX, '0123456789'],\\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\\n]\\n\\n/** @type {Record<BaseName,Base>} */\\nconst names = constants.reduce((prev, tupple) => {\\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\\n  return prev\\n}, /** @type {Record<BaseName,Base>} */({}))\\n\\n/** @type {Record<BaseCode,Base>} */\\nconst codes = constants.reduce((prev, tupple) => {\\n  prev[tupple[1]] = names[tupple[0]]\\n  return prev\\n}, /** @type {Record<BaseCode,Base>} */({}))\\n\\nmodule.exports = {\\n  names,\\n  codes\\n}\\n\\n},{\\\"./base.js\\\":171,\\\"./rfc4648\\\":174,\\\"./util\\\":175,\\\"@multiformats/base-x\\\":7}],173:[function(require,module,exports){\\n/**\\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\\n *\\n */\\n'use strict'\\n\\nconst constants = require('./constants')\\nconst { encodeText, decodeText, concat } = require('./util')\\n\\n/** @typedef {import('./base')} Base */\\n/** @typedef {import(\\\"./types\\\").BaseNameOrCode} BaseNameOrCode */\\n/** @typedef {import(\\\"./types\\\").BaseCode} BaseCode */\\n/** @typedef {import(\\\"./types\\\").BaseName} BaseName */\\n\\n/**\\n * Create a new Uint8Array with the multibase varint+code.\\n *\\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\\n * @returns {Uint8Array}\\n * @throws {Error} Will throw if the encoding is not supported\\n */\\nfunction multibase (nameOrCode, buf) {\\n  if (!buf) {\\n    throw new Error('requires an encoded Uint8Array')\\n  }\\n  const { name, codeBuf } = encoding(nameOrCode)\\n  validEncode(name, buf)\\n\\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\\n}\\n\\n/**\\n * Encode data with the specified base and add the multibase prefix.\\n *\\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\\n * @param {Uint8Array} buf - The data to be encoded.\\n * @returns {Uint8Array}\\n * @throws {Error} Will throw if the encoding is not supported\\n *\\n */\\nfunction encode (nameOrCode, buf) {\\n  const enc = encoding(nameOrCode)\\n  const data = encodeText(enc.encode(buf))\\n\\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\\n}\\n\\n/**\\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\\n * returns the decoded buffer\\n *\\n * @param {Uint8Array|string} data\\n * @returns {Uint8Array}\\n * @throws {Error} Will throw if the encoding is not supported\\n *\\n */\\nfunction decode (data) {\\n  if (data instanceof Uint8Array) {\\n    data = decodeText(data)\\n  }\\n  const prefix = data[0]\\n\\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\\n    data = data.toLowerCase()\\n  }\\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\\n  return enc.decode(data.substring(1))\\n}\\n\\n/**\\n * Is the given data multibase encoded?\\n *\\n * @param {Uint8Array|string} data\\n * @returns {false | string}\\n */\\nfunction isEncoded (data) {\\n  if (data instanceof Uint8Array) {\\n    data = decodeText(data)\\n  }\\n\\n  // Ensure bufOrString is a string\\n  if (Object.prototype.toString.call(data) !== '[object String]') {\\n    return false\\n  }\\n\\n  try {\\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\\n    return enc.name\\n  } catch (err) {\\n    return false\\n  }\\n}\\n\\n/**\\n * Validate encoded data\\n *\\n * @param {BaseNameOrCode} name\\n * @param {Uint8Array} buf\\n * @returns {void}\\n * @throws {Error} Will throw if the encoding is not supported\\n */\\nfunction validEncode (name, buf) {\\n  const enc = encoding(name)\\n  enc.decode(decodeText(buf))\\n}\\n\\n/**\\n * Get the encoding by name or code\\n *\\n * @param {BaseNameOrCode} nameOrCode\\n * @returns {Base}\\n * @throws {Error} Will throw if the encoding is not supported\\n */\\nfunction encoding (nameOrCode) {\\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\\n  } else {\\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\\n  }\\n}\\n\\n/**\\n * Get encoding from data\\n *\\n * @param {string|Uint8Array} data\\n * @returns {Base}\\n * @throws {Error} Will throw if the encoding is not supported\\n */\\nfunction encodingFromData (data) {\\n  if (data instanceof Uint8Array) {\\n    data = decodeText(data)\\n  }\\n\\n  return encoding(/** @type {BaseCode} */(data[0]))\\n}\\n\\nexports = module.exports = multibase\\nexports.encode = encode\\nexports.decode = decode\\nexports.isEncoded = isEncoded\\nexports.encoding = encoding\\nexports.encodingFromData = encodingFromData\\nconst names = Object.freeze(constants.names)\\nconst codes = Object.freeze(constants.codes)\\nexports.names = names\\nexports.codes = codes\\n\\n},{\\\"./constants\\\":172,\\\"./util\\\":175}],174:[function(require,module,exports){\\n'use strict'\\n\\n/** @typedef {import('./types').CodecFactory} CodecFactory */\\n\\n/**\\n * @param {string} string\\n * @param {string} alphabet\\n * @param {number} bitsPerChar\\n * @returns {Uint8Array}\\n */\\nconst decode = (string, alphabet, bitsPerChar) => {\\n  // Build the character lookup table:\\n  /** @type {Record<string, number>} */\\n  const codes = {}\\n  for (let i = 0; i < alphabet.length; ++i) {\\n    codes[alphabet[i]] = i\\n  }\\n\\n  // Count the padding bytes:\\n  let end = string.length\\n  while (string[end - 1] === '=') {\\n    --end\\n  }\\n\\n  // Allocate the output:\\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\\n\\n  // Parse the data:\\n  let bits = 0 // Number of bits currently in the buffer\\n  let buffer = 0 // Bits waiting to be written out, MSB first\\n  let written = 0 // Next byte to write\\n  for (let i = 0; i < end; ++i) {\\n    // Read one character from the string:\\n    const value = codes[string[i]]\\n    if (value === undefined) {\\n      throw new SyntaxError('Invalid character ' + string[i])\\n    }\\n\\n    // Append the bits to the buffer:\\n    buffer = (buffer << bitsPerChar) | value\\n    bits += bitsPerChar\\n\\n    // Write out some bits if the buffer has a byte's worth:\\n    if (bits >= 8) {\\n      bits -= 8\\n      out[written++] = 0xff & (buffer >> bits)\\n    }\\n  }\\n\\n  // Verify that we have received just enough bits:\\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\\n    throw new SyntaxError('Unexpected end of data')\\n  }\\n\\n  return out\\n}\\n\\n/**\\n * @param {Uint8Array} data\\n * @param {string} alphabet\\n * @param {number} bitsPerChar\\n * @returns {string}\\n */\\nconst encode = (data, alphabet, bitsPerChar) => {\\n  const pad = alphabet[alphabet.length - 1] === '='\\n  const mask = (1 << bitsPerChar) - 1\\n  let out = ''\\n\\n  let bits = 0 // Number of bits currently in the buffer\\n  let buffer = 0 // Bits waiting to be written out, MSB first\\n  for (let i = 0; i < data.length; ++i) {\\n    // Slurp data into the buffer:\\n    buffer = (buffer << 8) | data[i]\\n    bits += 8\\n\\n    // Write out as much as we can:\\n    while (bits > bitsPerChar) {\\n      bits -= bitsPerChar\\n      out += alphabet[mask & (buffer >> bits)]\\n    }\\n  }\\n\\n  // Partial character:\\n  if (bits) {\\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\\n  }\\n\\n  // Add padding characters until we hit a byte boundary:\\n  if (pad) {\\n    while ((out.length * bitsPerChar) & 7) {\\n      out += '='\\n    }\\n  }\\n\\n  return out\\n}\\n\\n/**\\n * RFC4648 Factory\\n *\\n * @param {number} bitsPerChar\\n * @returns {CodecFactory}\\n */\\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\\n  return {\\n    /**\\n     * @param {Uint8Array} input\\n     * @returns {string}\\n     */\\n    encode (input) {\\n      return encode(input, alphabet, bitsPerChar)\\n    },\\n    /**\\n     * @param {string} input\\n     * @returns {Uint8Array}\\n     */\\n    decode (input) {\\n      return decode(input, alphabet, bitsPerChar)\\n    }\\n  }\\n}\\n\\nmodule.exports = { rfc4648 }\\n\\n},{}],175:[function(require,module,exports){\\n'use strict'\\n\\nconst textDecoder = new TextDecoder()\\n/**\\n * @param {ArrayBufferView|ArrayBuffer} bytes\\n * @returns {string}\\n */\\nconst decodeText = (bytes) => textDecoder.decode(bytes)\\n\\nconst textEncoder = new TextEncoder()\\n/**\\n * @param {string} text\\n * @returns {Uint8Array}\\n */\\nconst encodeText = (text) => textEncoder.encode(text)\\n\\n/**\\n * Returns a new Uint8Array created by concatenating the passed Arrays\\n *\\n * @param {Array<ArrayLike<number>>} arrs\\n * @param {number} length\\n * @returns {Uint8Array}\\n */\\nfunction concat (arrs, length) {\\n  const output = new Uint8Array(length)\\n  let offset = 0\\n\\n  for (const arr of arrs) {\\n    output.set(arr, offset)\\n    offset += arr.length\\n  }\\n\\n  return output\\n}\\n\\nmodule.exports = { decodeText, encodeText, concat }\\n\\n},{}],176:[function(require,module,exports){\\narguments[4][15][0].apply(exports,arguments)\\n},{\\\"dup\\\":15}],177:[function(require,module,exports){\\n'use strict'\\n\\nconst { encoding: getCodec } = require('multibase')\\nconst utf8Encoder = new TextEncoder()\\n\\n/**\\n * @typedef {import('multibase/src/types').BaseName} BaseName\\n */\\n\\n/**\\n * Interprets each character in a string as a byte and\\n * returns a Uint8Array of those bytes.\\n *\\n * @param {string} string - The string to turn into an array\\n */\\nfunction asciiStringToUint8Array (string) {\\n  const array = new Uint8Array(string.length)\\n\\n  for (let i = 0; i < string.length; i++) {\\n    array[i] = string.charCodeAt(i)\\n  }\\n\\n  return array\\n}\\n\\n/**\\n * Create a `Uint8Array` from the passed string\\n *\\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\\n *\\n * Also `ascii` which is similar to node's 'binary' encoding.\\n *\\n * @param {string} string\\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\\n * @returns {Uint8Array}\\n */\\nfunction fromString (string, encoding = 'utf8') {\\n  if (encoding === 'utf8' || encoding === 'utf-8') {\\n    return utf8Encoder.encode(string)\\n  }\\n\\n  if (encoding === 'ascii') {\\n    return asciiStringToUint8Array(string)\\n  }\\n\\n  return getCodec(encoding).decode(string)\\n}\\n\\nmodule.exports = fromString\\n\\n},{\\\"multibase\\\":173}],178:[function(require,module,exports){\\narguments[4][17][0].apply(exports,arguments)\\n},{\\\"dup\\\":17,\\\"multibase\\\":173}],179:[function(require,module,exports){\\nmodule.exports = read\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n\\nfunction read(buf, offset) {\\n  var res    = 0\\n    , offset = offset || 0\\n    , shift  = 0\\n    , counter = offset\\n    , b\\n    , l = buf.length\\n\\n  do {\\n    if (counter >= l) {\\n      read.bytes = 0\\n      throw new RangeError('Could not decode varint')\\n    }\\n    b = buf[counter++]\\n    res += shift < 28\\n      ? (b & REST) << shift\\n      : (b & REST) * Math.pow(2, shift)\\n    shift += 7\\n  } while (b >= MSB)\\n\\n  read.bytes = counter - offset\\n\\n  return res\\n}\\n\\n},{}],180:[function(require,module,exports){\\nmodule.exports = encode\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n  , MSBALL = ~REST\\n  , INT = Math.pow(2, 31)\\n\\nfunction encode(num, out, offset) {\\n  out = out || []\\n  offset = offset || 0\\n  var oldOffset = offset\\n\\n  while(num >= INT) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num /= 128\\n  }\\n  while(num & MSBALL) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num >>>= 7\\n  }\\n  out[offset] = num | 0\\n  \\n  encode.bytes = offset - oldOffset + 1\\n  \\n  return out\\n}\\n\\n},{}],181:[function(require,module,exports){\\nmodule.exports = {\\n    encode: require('./encode.js')\\n  , decode: require('./decode.js')\\n  , encodingLength: require('./length.js')\\n}\\n\\n},{\\\"./decode.js\\\":179,\\\"./encode.js\\\":180,\\\"./length.js\\\":182}],182:[function(require,module,exports){\\n\\nvar N1 = Math.pow(2,  7)\\nvar N2 = Math.pow(2, 14)\\nvar N3 = Math.pow(2, 21)\\nvar N4 = Math.pow(2, 28)\\nvar N5 = Math.pow(2, 35)\\nvar N6 = Math.pow(2, 42)\\nvar N7 = Math.pow(2, 49)\\nvar N8 = Math.pow(2, 56)\\nvar N9 = Math.pow(2, 63)\\n\\nmodule.exports = function (value) {\\n  return (\\n    value < N1 ? 1\\n  : value < N2 ? 2\\n  : value < N3 ? 3\\n  : value < N4 ? 4\\n  : value < N5 ? 5\\n  : value < N6 ? 6\\n  : value < N7 ? 7\\n  : value < N8 ? 8\\n  : value < N9 ? 9\\n  :              10\\n  )\\n}\\n\\n},{}],183:[function(require,module,exports){\\n// DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js\\n/* eslint quote-props: off */\\n'use strict'\\n\\n/**\\n * @type {import('./generated-types').NameCodeMap}\\n */\\nconst baseTable = Object.freeze({\\n  'identity': 0x00,\\n  'cidv1': 0x01,\\n  'cidv2': 0x02,\\n  'cidv3': 0x03,\\n  'ip4': 0x04,\\n  'tcp': 0x06,\\n  'sha1': 0x11,\\n  'sha2-256': 0x12,\\n  'sha2-512': 0x13,\\n  'sha3-512': 0x14,\\n  'sha3-384': 0x15,\\n  'sha3-256': 0x16,\\n  'sha3-224': 0x17,\\n  'shake-128': 0x18,\\n  'shake-256': 0x19,\\n  'keccak-224': 0x1a,\\n  'keccak-256': 0x1b,\\n  'keccak-384': 0x1c,\\n  'keccak-512': 0x1d,\\n  'blake3': 0x1e,\\n  'dccp': 0x21,\\n  'murmur3-128': 0x22,\\n  'murmur3-32': 0x23,\\n  'ip6': 0x29,\\n  'ip6zone': 0x2a,\\n  'path': 0x2f,\\n  'multicodec': 0x30,\\n  'multihash': 0x31,\\n  'multiaddr': 0x32,\\n  'multibase': 0x33,\\n  'dns': 0x35,\\n  'dns4': 0x36,\\n  'dns6': 0x37,\\n  'dnsaddr': 0x38,\\n  'protobuf': 0x50,\\n  'cbor': 0x51,\\n  'raw': 0x55,\\n  'dbl-sha2-256': 0x56,\\n  'rlp': 0x60,\\n  'bencode': 0x63,\\n  'dag-pb': 0x70,\\n  'dag-cbor': 0x71,\\n  'libp2p-key': 0x72,\\n  'git-raw': 0x78,\\n  'torrent-info': 0x7b,\\n  'torrent-file': 0x7c,\\n  'leofcoin-block': 0x81,\\n  'leofcoin-tx': 0x82,\\n  'leofcoin-pr': 0x83,\\n  'sctp': 0x84,\\n  'dag-jose': 0x85,\\n  'dag-cose': 0x86,\\n  'eth-block': 0x90,\\n  'eth-block-list': 0x91,\\n  'eth-tx-trie': 0x92,\\n  'eth-tx': 0x93,\\n  'eth-tx-receipt-trie': 0x94,\\n  'eth-tx-receipt': 0x95,\\n  'eth-state-trie': 0x96,\\n  'eth-account-snapshot': 0x97,\\n  'eth-storage-trie': 0x98,\\n  'bitcoin-block': 0xb0,\\n  'bitcoin-tx': 0xb1,\\n  'bitcoin-witness-commitment': 0xb2,\\n  'zcash-block': 0xc0,\\n  'zcash-tx': 0xc1,\\n  'docid': 0xce,\\n  'stellar-block': 0xd0,\\n  'stellar-tx': 0xd1,\\n  'md4': 0xd4,\\n  'md5': 0xd5,\\n  'bmt': 0xd6,\\n  'decred-block': 0xe0,\\n  'decred-tx': 0xe1,\\n  'ipld-ns': 0xe2,\\n  'ipfs-ns': 0xe3,\\n  'swarm-ns': 0xe4,\\n  'ipns-ns': 0xe5,\\n  'zeronet': 0xe6,\\n  'secp256k1-pub': 0xe7,\\n  'bls12_381-g1-pub': 0xea,\\n  'bls12_381-g2-pub': 0xeb,\\n  'x25519-pub': 0xec,\\n  'ed25519-pub': 0xed,\\n  'bls12_381-g1g2-pub': 0xee,\\n  'dash-block': 0xf0,\\n  'dash-tx': 0xf1,\\n  'swarm-manifest': 0xfa,\\n  'swarm-feed': 0xfb,\\n  'udp': 0x0111,\\n  'p2p-webrtc-star': 0x0113,\\n  'p2p-webrtc-direct': 0x0114,\\n  'p2p-stardust': 0x0115,\\n  'p2p-circuit': 0x0122,\\n  'dag-json': 0x0129,\\n  'udt': 0x012d,\\n  'utp': 0x012e,\\n  'unix': 0x0190,\\n  'thread': 0x0196,\\n  'p2p': 0x01a5,\\n  'ipfs': 0x01a5,\\n  'https': 0x01bb,\\n  'onion': 0x01bc,\\n  'onion3': 0x01bd,\\n  'garlic64': 0x01be,\\n  'garlic32': 0x01bf,\\n  'tls': 0x01c0,\\n  'quic': 0x01cc,\\n  'ws': 0x01dd,\\n  'wss': 0x01de,\\n  'p2p-websocket-star': 0x01df,\\n  'http': 0x01e0,\\n  'json': 0x0200,\\n  'messagepack': 0x0201,\\n  'libp2p-peer-record': 0x0301,\\n  'sha2-256-trunc254-padded': 0x1012,\\n  'ripemd-128': 0x1052,\\n  'ripemd-160': 0x1053,\\n  'ripemd-256': 0x1054,\\n  'ripemd-320': 0x1055,\\n  'x11': 0x1100,\\n  'p256-pub': 0x1200,\\n  'p384-pub': 0x1201,\\n  'p521-pub': 0x1202,\\n  'ed448-pub': 0x1203,\\n  'x448-pub': 0x1204,\\n  'ed25519-priv': 0x1300,\\n  'kangarootwelve': 0x1d01,\\n  'sm3-256': 0x534d,\\n  'blake2b-8': 0xb201,\\n  'blake2b-16': 0xb202,\\n  'blake2b-24': 0xb203,\\n  'blake2b-32': 0xb204,\\n  'blake2b-40': 0xb205,\\n  'blake2b-48': 0xb206,\\n  'blake2b-56': 0xb207,\\n  'blake2b-64': 0xb208,\\n  'blake2b-72': 0xb209,\\n  'blake2b-80': 0xb20a,\\n  'blake2b-88': 0xb20b,\\n  'blake2b-96': 0xb20c,\\n  'blake2b-104': 0xb20d,\\n  'blake2b-112': 0xb20e,\\n  'blake2b-120': 0xb20f,\\n  'blake2b-128': 0xb210,\\n  'blake2b-136': 0xb211,\\n  'blake2b-144': 0xb212,\\n  'blake2b-152': 0xb213,\\n  'blake2b-160': 0xb214,\\n  'blake2b-168': 0xb215,\\n  'blake2b-176': 0xb216,\\n  'blake2b-184': 0xb217,\\n  'blake2b-192': 0xb218,\\n  'blake2b-200': 0xb219,\\n  'blake2b-208': 0xb21a,\\n  'blake2b-216': 0xb21b,\\n  'blake2b-224': 0xb21c,\\n  'blake2b-232': 0xb21d,\\n  'blake2b-240': 0xb21e,\\n  'blake2b-248': 0xb21f,\\n  'blake2b-256': 0xb220,\\n  'blake2b-264': 0xb221,\\n  'blake2b-272': 0xb222,\\n  'blake2b-280': 0xb223,\\n  'blake2b-288': 0xb224,\\n  'blake2b-296': 0xb225,\\n  'blake2b-304': 0xb226,\\n  'blake2b-312': 0xb227,\\n  'blake2b-320': 0xb228,\\n  'blake2b-328': 0xb229,\\n  'blake2b-336': 0xb22a,\\n  'blake2b-344': 0xb22b,\\n  'blake2b-352': 0xb22c,\\n  'blake2b-360': 0xb22d,\\n  'blake2b-368': 0xb22e,\\n  'blake2b-376': 0xb22f,\\n  'blake2b-384': 0xb230,\\n  'blake2b-392': 0xb231,\\n  'blake2b-400': 0xb232,\\n  'blake2b-408': 0xb233,\\n  'blake2b-416': 0xb234,\\n  'blake2b-424': 0xb235,\\n  'blake2b-432': 0xb236,\\n  'blake2b-440': 0xb237,\\n  'blake2b-448': 0xb238,\\n  'blake2b-456': 0xb239,\\n  'blake2b-464': 0xb23a,\\n  'blake2b-472': 0xb23b,\\n  'blake2b-480': 0xb23c,\\n  'blake2b-488': 0xb23d,\\n  'blake2b-496': 0xb23e,\\n  'blake2b-504': 0xb23f,\\n  'blake2b-512': 0xb240,\\n  'blake2s-8': 0xb241,\\n  'blake2s-16': 0xb242,\\n  'blake2s-24': 0xb243,\\n  'blake2s-32': 0xb244,\\n  'blake2s-40': 0xb245,\\n  'blake2s-48': 0xb246,\\n  'blake2s-56': 0xb247,\\n  'blake2s-64': 0xb248,\\n  'blake2s-72': 0xb249,\\n  'blake2s-80': 0xb24a,\\n  'blake2s-88': 0xb24b,\\n  'blake2s-96': 0xb24c,\\n  'blake2s-104': 0xb24d,\\n  'blake2s-112': 0xb24e,\\n  'blake2s-120': 0xb24f,\\n  'blake2s-128': 0xb250,\\n  'blake2s-136': 0xb251,\\n  'blake2s-144': 0xb252,\\n  'blake2s-152': 0xb253,\\n  'blake2s-160': 0xb254,\\n  'blake2s-168': 0xb255,\\n  'blake2s-176': 0xb256,\\n  'blake2s-184': 0xb257,\\n  'blake2s-192': 0xb258,\\n  'blake2s-200': 0xb259,\\n  'blake2s-208': 0xb25a,\\n  'blake2s-216': 0xb25b,\\n  'blake2s-224': 0xb25c,\\n  'blake2s-232': 0xb25d,\\n  'blake2s-240': 0xb25e,\\n  'blake2s-248': 0xb25f,\\n  'blake2s-256': 0xb260,\\n  'skein256-8': 0xb301,\\n  'skein256-16': 0xb302,\\n  'skein256-24': 0xb303,\\n  'skein256-32': 0xb304,\\n  'skein256-40': 0xb305,\\n  'skein256-48': 0xb306,\\n  'skein256-56': 0xb307,\\n  'skein256-64': 0xb308,\\n  'skein256-72': 0xb309,\\n  'skein256-80': 0xb30a,\\n  'skein256-88': 0xb30b,\\n  'skein256-96': 0xb30c,\\n  'skein256-104': 0xb30d,\\n  'skein256-112': 0xb30e,\\n  'skein256-120': 0xb30f,\\n  'skein256-128': 0xb310,\\n  'skein256-136': 0xb311,\\n  'skein256-144': 0xb312,\\n  'skein256-152': 0xb313,\\n  'skein256-160': 0xb314,\\n  'skein256-168': 0xb315,\\n  'skein256-176': 0xb316,\\n  'skein256-184': 0xb317,\\n  'skein256-192': 0xb318,\\n  'skein256-200': 0xb319,\\n  'skein256-208': 0xb31a,\\n  'skein256-216': 0xb31b,\\n  'skein256-224': 0xb31c,\\n  'skein256-232': 0xb31d,\\n  'skein256-240': 0xb31e,\\n  'skein256-248': 0xb31f,\\n  'skein256-256': 0xb320,\\n  'skein512-8': 0xb321,\\n  'skein512-16': 0xb322,\\n  'skein512-24': 0xb323,\\n  'skein512-32': 0xb324,\\n  'skein512-40': 0xb325,\\n  'skein512-48': 0xb326,\\n  'skein512-56': 0xb327,\\n  'skein512-64': 0xb328,\\n  'skein512-72': 0xb329,\\n  'skein512-80': 0xb32a,\\n  'skein512-88': 0xb32b,\\n  'skein512-96': 0xb32c,\\n  'skein512-104': 0xb32d,\\n  'skein512-112': 0xb32e,\\n  'skein512-120': 0xb32f,\\n  'skein512-128': 0xb330,\\n  'skein512-136': 0xb331,\\n  'skein512-144': 0xb332,\\n  'skein512-152': 0xb333,\\n  'skein512-160': 0xb334,\\n  'skein512-168': 0xb335,\\n  'skein512-176': 0xb336,\\n  'skein512-184': 0xb337,\\n  'skein512-192': 0xb338,\\n  'skein512-200': 0xb339,\\n  'skein512-208': 0xb33a,\\n  'skein512-216': 0xb33b,\\n  'skein512-224': 0xb33c,\\n  'skein512-232': 0xb33d,\\n  'skein512-240': 0xb33e,\\n  'skein512-248': 0xb33f,\\n  'skein512-256': 0xb340,\\n  'skein512-264': 0xb341,\\n  'skein512-272': 0xb342,\\n  'skein512-280': 0xb343,\\n  'skein512-288': 0xb344,\\n  'skein512-296': 0xb345,\\n  'skein512-304': 0xb346,\\n  'skein512-312': 0xb347,\\n  'skein512-320': 0xb348,\\n  'skein512-328': 0xb349,\\n  'skein512-336': 0xb34a,\\n  'skein512-344': 0xb34b,\\n  'skein512-352': 0xb34c,\\n  'skein512-360': 0xb34d,\\n  'skein512-368': 0xb34e,\\n  'skein512-376': 0xb34f,\\n  'skein512-384': 0xb350,\\n  'skein512-392': 0xb351,\\n  'skein512-400': 0xb352,\\n  'skein512-408': 0xb353,\\n  'skein512-416': 0xb354,\\n  'skein512-424': 0xb355,\\n  'skein512-432': 0xb356,\\n  'skein512-440': 0xb357,\\n  'skein512-448': 0xb358,\\n  'skein512-456': 0xb359,\\n  'skein512-464': 0xb35a,\\n  'skein512-472': 0xb35b,\\n  'skein512-480': 0xb35c,\\n  'skein512-488': 0xb35d,\\n  'skein512-496': 0xb35e,\\n  'skein512-504': 0xb35f,\\n  'skein512-512': 0xb360,\\n  'skein1024-8': 0xb361,\\n  'skein1024-16': 0xb362,\\n  'skein1024-24': 0xb363,\\n  'skein1024-32': 0xb364,\\n  'skein1024-40': 0xb365,\\n  'skein1024-48': 0xb366,\\n  'skein1024-56': 0xb367,\\n  'skein1024-64': 0xb368,\\n  'skein1024-72': 0xb369,\\n  'skein1024-80': 0xb36a,\\n  'skein1024-88': 0xb36b,\\n  'skein1024-96': 0xb36c,\\n  'skein1024-104': 0xb36d,\\n  'skein1024-112': 0xb36e,\\n  'skein1024-120': 0xb36f,\\n  'skein1024-128': 0xb370,\\n  'skein1024-136': 0xb371,\\n  'skein1024-144': 0xb372,\\n  'skein1024-152': 0xb373,\\n  'skein1024-160': 0xb374,\\n  'skein1024-168': 0xb375,\\n  'skein1024-176': 0xb376,\\n  'skein1024-184': 0xb377,\\n  'skein1024-192': 0xb378,\\n  'skein1024-200': 0xb379,\\n  'skein1024-208': 0xb37a,\\n  'skein1024-216': 0xb37b,\\n  'skein1024-224': 0xb37c,\\n  'skein1024-232': 0xb37d,\\n  'skein1024-240': 0xb37e,\\n  'skein1024-248': 0xb37f,\\n  'skein1024-256': 0xb380,\\n  'skein1024-264': 0xb381,\\n  'skein1024-272': 0xb382,\\n  'skein1024-280': 0xb383,\\n  'skein1024-288': 0xb384,\\n  'skein1024-296': 0xb385,\\n  'skein1024-304': 0xb386,\\n  'skein1024-312': 0xb387,\\n  'skein1024-320': 0xb388,\\n  'skein1024-328': 0xb389,\\n  'skein1024-336': 0xb38a,\\n  'skein1024-344': 0xb38b,\\n  'skein1024-352': 0xb38c,\\n  'skein1024-360': 0xb38d,\\n  'skein1024-368': 0xb38e,\\n  'skein1024-376': 0xb38f,\\n  'skein1024-384': 0xb390,\\n  'skein1024-392': 0xb391,\\n  'skein1024-400': 0xb392,\\n  'skein1024-408': 0xb393,\\n  'skein1024-416': 0xb394,\\n  'skein1024-424': 0xb395,\\n  'skein1024-432': 0xb396,\\n  'skein1024-440': 0xb397,\\n  'skein1024-448': 0xb398,\\n  'skein1024-456': 0xb399,\\n  'skein1024-464': 0xb39a,\\n  'skein1024-472': 0xb39b,\\n  'skein1024-480': 0xb39c,\\n  'skein1024-488': 0xb39d,\\n  'skein1024-496': 0xb39e,\\n  'skein1024-504': 0xb39f,\\n  'skein1024-512': 0xb3a0,\\n  'skein1024-520': 0xb3a1,\\n  'skein1024-528': 0xb3a2,\\n  'skein1024-536': 0xb3a3,\\n  'skein1024-544': 0xb3a4,\\n  'skein1024-552': 0xb3a5,\\n  'skein1024-560': 0xb3a6,\\n  'skein1024-568': 0xb3a7,\\n  'skein1024-576': 0xb3a8,\\n  'skein1024-584': 0xb3a9,\\n  'skein1024-592': 0xb3aa,\\n  'skein1024-600': 0xb3ab,\\n  'skein1024-608': 0xb3ac,\\n  'skein1024-616': 0xb3ad,\\n  'skein1024-624': 0xb3ae,\\n  'skein1024-632': 0xb3af,\\n  'skein1024-640': 0xb3b0,\\n  'skein1024-648': 0xb3b1,\\n  'skein1024-656': 0xb3b2,\\n  'skein1024-664': 0xb3b3,\\n  'skein1024-672': 0xb3b4,\\n  'skein1024-680': 0xb3b5,\\n  'skein1024-688': 0xb3b6,\\n  'skein1024-696': 0xb3b7,\\n  'skein1024-704': 0xb3b8,\\n  'skein1024-712': 0xb3b9,\\n  'skein1024-720': 0xb3ba,\\n  'skein1024-728': 0xb3bb,\\n  'skein1024-736': 0xb3bc,\\n  'skein1024-744': 0xb3bd,\\n  'skein1024-752': 0xb3be,\\n  'skein1024-760': 0xb3bf,\\n  'skein1024-768': 0xb3c0,\\n  'skein1024-776': 0xb3c1,\\n  'skein1024-784': 0xb3c2,\\n  'skein1024-792': 0xb3c3,\\n  'skein1024-800': 0xb3c4,\\n  'skein1024-808': 0xb3c5,\\n  'skein1024-816': 0xb3c6,\\n  'skein1024-824': 0xb3c7,\\n  'skein1024-832': 0xb3c8,\\n  'skein1024-840': 0xb3c9,\\n  'skein1024-848': 0xb3ca,\\n  'skein1024-856': 0xb3cb,\\n  'skein1024-864': 0xb3cc,\\n  'skein1024-872': 0xb3cd,\\n  'skein1024-880': 0xb3ce,\\n  'skein1024-888': 0xb3cf,\\n  'skein1024-896': 0xb3d0,\\n  'skein1024-904': 0xb3d1,\\n  'skein1024-912': 0xb3d2,\\n  'skein1024-920': 0xb3d3,\\n  'skein1024-928': 0xb3d4,\\n  'skein1024-936': 0xb3d5,\\n  'skein1024-944': 0xb3d6,\\n  'skein1024-952': 0xb3d7,\\n  'skein1024-960': 0xb3d8,\\n  'skein1024-968': 0xb3d9,\\n  'skein1024-976': 0xb3da,\\n  'skein1024-984': 0xb3db,\\n  'skein1024-992': 0xb3dc,\\n  'skein1024-1000': 0xb3dd,\\n  'skein1024-1008': 0xb3de,\\n  'skein1024-1016': 0xb3df,\\n  'skein1024-1024': 0xb3e0,\\n  'poseidon-bls12_381-a2-fc1': 0xb401,\\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402,\\n  'zeroxcert-imprint-256': 0xce11,\\n  'fil-commitment-unsealed': 0xf101,\\n  'fil-commitment-sealed': 0xf102,\\n  'holochain-adr-v0': 0x807124,\\n  'holochain-adr-v1': 0x817124,\\n  'holochain-key-v0': 0x947124,\\n  'holochain-key-v1': 0x957124,\\n  'holochain-sig-v0': 0xa27124,\\n  'holochain-sig-v1': 0xa37124,\\n  'skynet-ns': 0xb19910\\n})\\n\\nmodule.exports = { baseTable }\\n\\n},{}],184:[function(require,module,exports){\\n/**\\n * Implementation of the multicodec specification.\\n *\\n * @module multicodec\\n * @example\\n * const multicodec = require('multicodec')\\n *\\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\\n * // prefixedProtobuf 0x50...\\n *\\n */\\n'use strict'\\n\\n/** @typedef {import('./generated-types').CodecName} CodecName */\\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\\n\\nconst varint = require('varint')\\nconst uint8ArrayConcat = require('uint8arrays/concat')\\nconst util = require('./util')\\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\\n\\n/**\\n * Prefix a buffer with a multicodec-packed.\\n *\\n * @param {CodecName|Uint8Array} multicodecStrOrCode\\n * @param {Uint8Array} data\\n * @returns {Uint8Array}\\n */\\nfunction addPrefix (multicodecStrOrCode, data) {\\n  let prefix\\n\\n  if (multicodecStrOrCode instanceof Uint8Array) {\\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\\n  } else {\\n    if (nameToVarint[multicodecStrOrCode]) {\\n      prefix = nameToVarint[multicodecStrOrCode]\\n    } else {\\n      throw new Error('multicodec not recognized')\\n    }\\n  }\\n\\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\\n}\\n\\n/**\\n * Decapsulate the multicodec-packed prefix from the data.\\n *\\n * @param {Uint8Array} data\\n * @returns {Uint8Array}\\n */\\nfunction rmPrefix (data) {\\n  varint.decode(/** @type {Buffer} */(data))\\n  return data.slice(varint.decode.bytes)\\n}\\n\\n/**\\n * Get the codec name of the prefixed data.\\n *\\n * @param {Uint8Array} prefixedData\\n * @returns {CodecName}\\n */\\nfunction getNameFromData (prefixedData) {\\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\\n  const name = codeToName[code]\\n  if (name === undefined) {\\n    throw new Error(`Code \\\"${code}\\\" not found`)\\n  }\\n  return name\\n}\\n\\n/**\\n * Get the codec name from a code.\\n *\\n * @param {CodecCode} codec\\n * @returns {CodecName}\\n */\\nfunction getNameFromCode (codec) {\\n  return codeToName[codec]\\n}\\n\\n/**\\n * Get the code of the codec\\n *\\n * @param {CodecName} name\\n * @returns {CodecCode}\\n */\\nfunction getCodeFromName (name) {\\n  const code = nameToCode[name]\\n  if (code === undefined) {\\n    throw new Error(`Codec \\\"${name}\\\" not found`)\\n  }\\n  return code\\n}\\n\\n/**\\n * Get the code of the prefixed data.\\n *\\n * @param {Uint8Array} prefixedData\\n * @returns {CodecCode}\\n */\\nfunction getCodeFromData (prefixedData) {\\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\\n}\\n\\n/**\\n * Get the code as varint of a codec name.\\n *\\n * @param {CodecName} name\\n * @returns {Uint8Array}\\n */\\nfunction getVarintFromName (name) {\\n  const code = nameToVarint[name]\\n  if (code === undefined) {\\n    throw new Error(`Codec \\\"${name}\\\" not found`)\\n  }\\n  return code\\n}\\n\\n/**\\n * Get the varint of a code.\\n *\\n * @param {CodecCode} code\\n * @returns {Uint8Array}\\n */\\nfunction getVarintFromCode (code) {\\n  return util.varintEncode(code)\\n}\\n\\n/**\\n * Get the codec name of the prefixed data.\\n *\\n * @deprecated use getNameFromData instead.\\n * @param {Uint8Array} prefixedData\\n * @returns {CodecName}\\n */\\nfunction getCodec (prefixedData) {\\n  return getNameFromData(prefixedData)\\n}\\n\\n/**\\n * Get the codec name from a code.\\n *\\n * @deprecated use getNameFromCode instead.\\n * @param {CodecCode} codec\\n * @returns {CodecName}\\n */\\nfunction getName (codec) {\\n  return getNameFromCode(codec)\\n}\\n\\n/**\\n * Get the code of the codec\\n *\\n * @deprecated use getCodeFromName instead.\\n * @param {CodecName} name\\n * @returns {CodecCode}\\n */\\nfunction getNumber (name) {\\n  return getCodeFromName(name)\\n}\\n\\n/**\\n * Get the code of the prefixed data.\\n *\\n * @deprecated use getCodeFromData instead.\\n * @param {Uint8Array} prefixedData\\n * @returns {CodecCode}\\n */\\nfunction getCode (prefixedData) {\\n  return getCodeFromData(prefixedData)\\n}\\n\\n/**\\n * Get the code as varint of a codec name.\\n *\\n * @deprecated use getVarintFromName instead.\\n * @param {CodecName} name\\n * @returns {Uint8Array}\\n */\\nfunction getCodeVarint (name) {\\n  return getVarintFromName(name)\\n}\\n\\n/**\\n * Get the varint of a code.\\n *\\n * @deprecated use getVarintFromCode instead.\\n * @param {CodecCode} code\\n * @returns {Array.<number>}\\n */\\nfunction getVarint (code) {\\n  return Array.from(getVarintFromCode(code))\\n}\\n\\nmodule.exports = {\\n  addPrefix,\\n  rmPrefix,\\n  getNameFromData,\\n  getNameFromCode,\\n  getCodeFromName,\\n  getCodeFromData,\\n  getVarintFromName,\\n  getVarintFromCode,\\n  // Deprecated\\n  getCodec,\\n  getName,\\n  getNumber,\\n  getCode,\\n  getCodeVarint,\\n  getVarint,\\n  // Make the constants top-level constants\\n  ...constantToCode,\\n  // Export the maps\\n  nameToVarint,\\n  nameToCode,\\n  codeToName\\n}\\n\\n},{\\\"./maps\\\":185,\\\"./util\\\":186,\\\"uint8arrays/concat\\\":176,\\\"varint\\\":181}],185:[function(require,module,exports){\\n'use strict'\\n\\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\\n/** @typedef {import('./generated-types').CodecName} CodecName */\\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\\n\\nconst { baseTable } = require('./generated-table')\\nconst varintEncode = require('./util').varintEncode\\n\\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\\nconst constantToCode = /** @type {ConstantCodeMap} */({})\\nconst codeToName = /** @type {CodeNameMap} */({})\\n\\n// eslint-disable-next-line guard-for-in\\nfor (const name in baseTable) {\\n  const codecName = /** @type {CodecName} */(name)\\n  const code = baseTable[codecName]\\n  nameToVarint[codecName] = varintEncode(code)\\n\\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\\n  constantToCode[constant] = code\\n\\n  if (!codeToName[code]) {\\n    codeToName[code] = codecName\\n  }\\n}\\n\\nObject.freeze(nameToVarint)\\nObject.freeze(constantToCode)\\nObject.freeze(codeToName)\\nconst nameToCode = Object.freeze(baseTable)\\nmodule.exports = {\\n  nameToVarint,\\n  constantToCode,\\n  nameToCode,\\n  codeToName\\n}\\n\\n},{\\\"./generated-table\\\":183,\\\"./util\\\":186}],186:[function(require,module,exports){\\n'use strict'\\n\\nconst varint = require('varint')\\nconst uint8ArrayToString = require('uint8arrays/to-string')\\nconst uint8ArrayFromString = require('uint8arrays/from-string')\\n\\nmodule.exports = {\\n  numberToUint8Array,\\n  uint8ArrayToNumber,\\n  varintUint8ArrayEncode,\\n  varintEncode\\n}\\n\\n/**\\n * @param {Uint8Array} buf\\n */\\nfunction uint8ArrayToNumber (buf) {\\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\\n}\\n\\n/**\\n * @param {number} num\\n */\\nfunction numberToUint8Array (num) {\\n  let hexString = num.toString(16)\\n  if (hexString.length % 2 === 1) {\\n    hexString = '0' + hexString\\n  }\\n  return uint8ArrayFromString(hexString, 'base16')\\n}\\n\\n/**\\n * @param {Uint8Array} input\\n */\\nfunction varintUint8ArrayEncode (input) {\\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\\n}\\n\\n/**\\n * @param {number} num\\n */\\nfunction varintEncode (num) {\\n  return Uint8Array.from(varint.encode(num))\\n}\\n\\n},{\\\"uint8arrays/from-string\\\":177,\\\"uint8arrays/to-string\\\":178,\\\"varint\\\":181}],187:[function(require,module,exports){\\narguments[4][15][0].apply(exports,arguments)\\n},{\\\"dup\\\":15}],188:[function(require,module,exports){\\narguments[4][177][0].apply(exports,arguments)\\n},{\\\"dup\\\":177,\\\"multibase\\\":173}],189:[function(require,module,exports){\\narguments[4][17][0].apply(exports,arguments)\\n},{\\\"dup\\\":17,\\\"multibase\\\":173}],190:[function(require,module,exports){\\narguments[4][179][0].apply(exports,arguments)\\n},{\\\"dup\\\":179}],191:[function(require,module,exports){\\narguments[4][180][0].apply(exports,arguments)\\n},{\\\"dup\\\":180}],192:[function(require,module,exports){\\narguments[4][181][0].apply(exports,arguments)\\n},{\\\"./decode.js\\\":190,\\\"./encode.js\\\":191,\\\"./length.js\\\":193,\\\"dup\\\":181}],193:[function(require,module,exports){\\narguments[4][182][0].apply(exports,arguments)\\n},{\\\"dup\\\":182}],194:[function(require,module,exports){\\n/* eslint quote-props: off */\\n'use strict'\\n\\n/**\\n * Names for all available hashes\\n *\\n * @typedef { \\\"identity\\\" | \\\"sha1\\\" | \\\"sha2-256\\\" | \\\"sha2-512\\\" | \\\"sha3-512\\\" | \\\"sha3-384\\\" | \\\"sha3-256\\\" | \\\"sha3-224\\\" | \\\"shake-128\\\" | \\\"shake-256\\\" | \\\"keccak-224\\\" | \\\"keccak-256\\\" | \\\"keccak-384\\\" | \\\"keccak-512\\\" | \\\"blake3\\\" | \\\"murmur3-128\\\" | \\\"murmur3-32\\\" | \\\"dbl-sha2-256\\\" | \\\"md4\\\" | \\\"md5\\\" | \\\"bmt\\\" | \\\"sha2-256-trunc254-padded\\\" | \\\"ripemd-128\\\" | \\\"ripemd-160\\\" | \\\"ripemd-256\\\" | \\\"ripemd-320\\\" | \\\"x11\\\" | \\\"kangarootwelve\\\" | \\\"sm3-256\\\" | \\\"blake2b-8\\\" | \\\"blake2b-16\\\" | \\\"blake2b-24\\\" | \\\"blake2b-32\\\" | \\\"blake2b-40\\\" | \\\"blake2b-48\\\" | \\\"blake2b-56\\\" | \\\"blake2b-64\\\" | \\\"blake2b-72\\\" | \\\"blake2b-80\\\" | \\\"blake2b-88\\\" | \\\"blake2b-96\\\" | \\\"blake2b-104\\\" | \\\"blake2b-112\\\" | \\\"blake2b-120\\\" | \\\"blake2b-128\\\" | \\\"blake2b-136\\\" | \\\"blake2b-144\\\" | \\\"blake2b-152\\\" | \\\"blake2b-160\\\" | \\\"blake2b-168\\\" | \\\"blake2b-176\\\" | \\\"blake2b-184\\\" | \\\"blake2b-192\\\" | \\\"blake2b-200\\\" | \\\"blake2b-208\\\" | \\\"blake2b-216\\\" | \\\"blake2b-224\\\" | \\\"blake2b-232\\\" | \\\"blake2b-240\\\" | \\\"blake2b-248\\\" | \\\"blake2b-256\\\" | \\\"blake2b-264\\\" | \\\"blake2b-272\\\" | \\\"blake2b-280\\\" | \\\"blake2b-288\\\" | \\\"blake2b-296\\\" | \\\"blake2b-304\\\" | \\\"blake2b-312\\\" | \\\"blake2b-320\\\" | \\\"blake2b-328\\\" | \\\"blake2b-336\\\" | \\\"blake2b-344\\\" | \\\"blake2b-352\\\" | \\\"blake2b-360\\\" | \\\"blake2b-368\\\" | \\\"blake2b-376\\\" | \\\"blake2b-384\\\" | \\\"blake2b-392\\\" | \\\"blake2b-400\\\" | \\\"blake2b-408\\\" | \\\"blake2b-416\\\" | \\\"blake2b-424\\\" | \\\"blake2b-432\\\" | \\\"blake2b-440\\\" | \\\"blake2b-448\\\" | \\\"blake2b-456\\\" | \\\"blake2b-464\\\" | \\\"blake2b-472\\\" | \\\"blake2b-480\\\" | \\\"blake2b-488\\\" | \\\"blake2b-496\\\" | \\\"blake2b-504\\\" | \\\"blake2b-512\\\" | \\\"blake2s-8\\\" | \\\"blake2s-16\\\" | \\\"blake2s-24\\\" | \\\"blake2s-32\\\" | \\\"blake2s-40\\\" | \\\"blake2s-48\\\" | \\\"blake2s-56\\\" | \\\"blake2s-64\\\" | \\\"blake2s-72\\\" | \\\"blake2s-80\\\" | \\\"blake2s-88\\\" | \\\"blake2s-96\\\" | \\\"blake2s-104\\\" | \\\"blake2s-112\\\" | \\\"blake2s-120\\\" | \\\"blake2s-128\\\" | \\\"blake2s-136\\\" | \\\"blake2s-144\\\" | \\\"blake2s-152\\\" | \\\"blake2s-160\\\" | \\\"blake2s-168\\\" | \\\"blake2s-176\\\" | \\\"blake2s-184\\\" | \\\"blake2s-192\\\" | \\\"blake2s-200\\\" | \\\"blake2s-208\\\" | \\\"blake2s-216\\\" | \\\"blake2s-224\\\" | \\\"blake2s-232\\\" | \\\"blake2s-240\\\" | \\\"blake2s-248\\\" | \\\"blake2s-256\\\" | \\\"skein256-8\\\" | \\\"skein256-16\\\" | \\\"skein256-24\\\" | \\\"skein256-32\\\" | \\\"skein256-40\\\" | \\\"skein256-48\\\" | \\\"skein256-56\\\" | \\\"skein256-64\\\" | \\\"skein256-72\\\" | \\\"skein256-80\\\" | \\\"skein256-88\\\" | \\\"skein256-96\\\" | \\\"skein256-104\\\" | \\\"skein256-112\\\" | \\\"skein256-120\\\" | \\\"skein256-128\\\" | \\\"skein256-136\\\" | \\\"skein256-144\\\" | \\\"skein256-152\\\" | \\\"skein256-160\\\" | \\\"skein256-168\\\" | \\\"skein256-176\\\" | \\\"skein256-184\\\" | \\\"skein256-192\\\" | \\\"skein256-200\\\" | \\\"skein256-208\\\" | \\\"skein256-216\\\" | \\\"skein256-224\\\" | \\\"skein256-232\\\" | \\\"skein256-240\\\" | \\\"skein256-248\\\" | \\\"skein256-256\\\" | \\\"skein512-8\\\" | \\\"skein512-16\\\" | \\\"skein512-24\\\" | \\\"skein512-32\\\" | \\\"skein512-40\\\" | \\\"skein512-48\\\" | \\\"skein512-56\\\" | \\\"skein512-64\\\" | \\\"skein512-72\\\" | \\\"skein512-80\\\" | \\\"skein512-88\\\" | \\\"skein512-96\\\" | \\\"skein512-104\\\" | \\\"skein512-112\\\" | \\\"skein512-120\\\" | \\\"skein512-128\\\" | \\\"skein512-136\\\" | \\\"skein512-144\\\" | \\\"skein512-152\\\" | \\\"skein512-160\\\" | \\\"skein512-168\\\" | \\\"skein512-176\\\" | \\\"skein512-184\\\" | \\\"skein512-192\\\" | \\\"skein512-200\\\" | \\\"skein512-208\\\" | \\\"skein512-216\\\" | \\\"skein512-224\\\" | \\\"skein512-232\\\" | \\\"skein512-240\\\" | \\\"skein512-248\\\" | \\\"skein512-256\\\" | \\\"skein512-264\\\" | \\\"skein512-272\\\" | \\\"skein512-280\\\" | \\\"skein512-288\\\" | \\\"skein512-296\\\" | \\\"skein512-304\\\" | \\\"skein512-312\\\" | \\\"skein512-320\\\" | \\\"skein512-328\\\" | \\\"skein512-336\\\" | \\\"skein512-344\\\" | \\\"skein512-352\\\" | \\\"skein512-360\\\" | \\\"skein512-368\\\" | \\\"skein512-376\\\" | \\\"skein512-384\\\" | \\\"skein512-392\\\" | \\\"skein512-400\\\" | \\\"skein512-408\\\" | \\\"skein512-416\\\" | \\\"skein512-424\\\" | \\\"skein512-432\\\" | \\\"skein512-440\\\" | \\\"skein512-448\\\" | \\\"skein512-456\\\" | \\\"skein512-464\\\" | \\\"skein512-472\\\" | \\\"skein512-480\\\" | \\\"skein512-488\\\" | \\\"skein512-496\\\" | \\\"skein512-504\\\" | \\\"skein512-512\\\" | \\\"skein1024-8\\\" | \\\"skein1024-16\\\" | \\\"skein1024-24\\\" | \\\"skein1024-32\\\" | \\\"skein1024-40\\\" | \\\"skein1024-48\\\" | \\\"skein1024-56\\\" | \\\"skein1024-64\\\" | \\\"skein1024-72\\\" | \\\"skein1024-80\\\" | \\\"skein1024-88\\\" | \\\"skein1024-96\\\" | \\\"skein1024-104\\\" | \\\"skein1024-112\\\" | \\\"skein1024-120\\\" | \\\"skein1024-128\\\" | \\\"skein1024-136\\\" | \\\"skein1024-144\\\" | \\\"skein1024-152\\\" | \\\"skein1024-160\\\" | \\\"skein1024-168\\\" | \\\"skein1024-176\\\" | \\\"skein1024-184\\\" | \\\"skein1024-192\\\" | \\\"skein1024-200\\\" | \\\"skein1024-208\\\" | \\\"skein1024-216\\\" | \\\"skein1024-224\\\" | \\\"skein1024-232\\\" | \\\"skein1024-240\\\" | \\\"skein1024-248\\\" | \\\"skein1024-256\\\" | \\\"skein1024-264\\\" | \\\"skein1024-272\\\" | \\\"skein1024-280\\\" | \\\"skein1024-288\\\" | \\\"skein1024-296\\\" | \\\"skein1024-304\\\" | \\\"skein1024-312\\\" | \\\"skein1024-320\\\" | \\\"skein1024-328\\\" | \\\"skein1024-336\\\" | \\\"skein1024-344\\\" | \\\"skein1024-352\\\" | \\\"skein1024-360\\\" | \\\"skein1024-368\\\" | \\\"skein1024-376\\\" | \\\"skein1024-384\\\" | \\\"skein1024-392\\\" | \\\"skein1024-400\\\" | \\\"skein1024-408\\\" | \\\"skein1024-416\\\" | \\\"skein1024-424\\\" | \\\"skein1024-432\\\" | \\\"skein1024-440\\\" | \\\"skein1024-448\\\" | \\\"skein1024-456\\\" | \\\"skein1024-464\\\" | \\\"skein1024-472\\\" | \\\"skein1024-480\\\" | \\\"skein1024-488\\\" | \\\"skein1024-496\\\" | \\\"skein1024-504\\\" | \\\"skein1024-512\\\" | \\\"skein1024-520\\\" | \\\"skein1024-528\\\" | \\\"skein1024-536\\\" | \\\"skein1024-544\\\" | \\\"skein1024-552\\\" | \\\"skein1024-560\\\" | \\\"skein1024-568\\\" | \\\"skein1024-576\\\" | \\\"skein1024-584\\\" | \\\"skein1024-592\\\" | \\\"skein1024-600\\\" | \\\"skein1024-608\\\" | \\\"skein1024-616\\\" | \\\"skein1024-624\\\" | \\\"skein1024-632\\\" | \\\"skein1024-640\\\" | \\\"skein1024-648\\\" | \\\"skein1024-656\\\" | \\\"skein1024-664\\\" | \\\"skein1024-672\\\" | \\\"skein1024-680\\\" | \\\"skein1024-688\\\" | \\\"skein1024-696\\\" | \\\"skein1024-704\\\" | \\\"skein1024-712\\\" | \\\"skein1024-720\\\" | \\\"skein1024-728\\\" | \\\"skein1024-736\\\" | \\\"skein1024-744\\\" | \\\"skein1024-752\\\" | \\\"skein1024-760\\\" | \\\"skein1024-768\\\" | \\\"skein1024-776\\\" | \\\"skein1024-784\\\" | \\\"skein1024-792\\\" | \\\"skein1024-800\\\" | \\\"skein1024-808\\\" | \\\"skein1024-816\\\" | \\\"skein1024-824\\\" | \\\"skein1024-832\\\" | \\\"skein1024-840\\\" | \\\"skein1024-848\\\" | \\\"skein1024-856\\\" | \\\"skein1024-864\\\" | \\\"skein1024-872\\\" | \\\"skein1024-880\\\" | \\\"skein1024-888\\\" | \\\"skein1024-896\\\" | \\\"skein1024-904\\\" | \\\"skein1024-912\\\" | \\\"skein1024-920\\\" | \\\"skein1024-928\\\" | \\\"skein1024-936\\\" | \\\"skein1024-944\\\" | \\\"skein1024-952\\\" | \\\"skein1024-960\\\" | \\\"skein1024-968\\\" | \\\"skein1024-976\\\" | \\\"skein1024-984\\\" | \\\"skein1024-992\\\" | \\\"skein1024-1000\\\" | \\\"skein1024-1008\\\" | \\\"skein1024-1016\\\" | \\\"skein1024-1024\\\" | \\\"poseidon-bls12_381-a2-fc1\\\" | \\\"poseidon-bls12_381-a2-fc1-sc\\\" } HashName\\n */\\n/**\\n * Codes for all available hashes\\n *\\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\\n */\\n\\n/**\\n * @type { Record<HashName,HashCode> }\\n */\\nconst names = Object.freeze({\\n  'identity': 0x00,\\n  'sha1': 0x11,\\n  'sha2-256': 0x12,\\n  'sha2-512': 0x13,\\n  'sha3-512': 0x14,\\n  'sha3-384': 0x15,\\n  'sha3-256': 0x16,\\n  'sha3-224': 0x17,\\n  'shake-128': 0x18,\\n  'shake-256': 0x19,\\n  'keccak-224': 0x1a,\\n  'keccak-256': 0x1b,\\n  'keccak-384': 0x1c,\\n  'keccak-512': 0x1d,\\n  'blake3': 0x1e,\\n  'murmur3-128': 0x22,\\n  'murmur3-32': 0x23,\\n  'dbl-sha2-256': 0x56,\\n  'md4': 0xd4,\\n  'md5': 0xd5,\\n  'bmt': 0xd6,\\n  'sha2-256-trunc254-padded': 0x1012,\\n  'ripemd-128': 0x1052,\\n  'ripemd-160': 0x1053,\\n  'ripemd-256': 0x1054,\\n  'ripemd-320': 0x1055,\\n  'x11': 0x1100,\\n  'kangarootwelve': 0x1d01,\\n  'sm3-256': 0x534d,\\n  'blake2b-8': 0xb201,\\n  'blake2b-16': 0xb202,\\n  'blake2b-24': 0xb203,\\n  'blake2b-32': 0xb204,\\n  'blake2b-40': 0xb205,\\n  'blake2b-48': 0xb206,\\n  'blake2b-56': 0xb207,\\n  'blake2b-64': 0xb208,\\n  'blake2b-72': 0xb209,\\n  'blake2b-80': 0xb20a,\\n  'blake2b-88': 0xb20b,\\n  'blake2b-96': 0xb20c,\\n  'blake2b-104': 0xb20d,\\n  'blake2b-112': 0xb20e,\\n  'blake2b-120': 0xb20f,\\n  'blake2b-128': 0xb210,\\n  'blake2b-136': 0xb211,\\n  'blake2b-144': 0xb212,\\n  'blake2b-152': 0xb213,\\n  'blake2b-160': 0xb214,\\n  'blake2b-168': 0xb215,\\n  'blake2b-176': 0xb216,\\n  'blake2b-184': 0xb217,\\n  'blake2b-192': 0xb218,\\n  'blake2b-200': 0xb219,\\n  'blake2b-208': 0xb21a,\\n  'blake2b-216': 0xb21b,\\n  'blake2b-224': 0xb21c,\\n  'blake2b-232': 0xb21d,\\n  'blake2b-240': 0xb21e,\\n  'blake2b-248': 0xb21f,\\n  'blake2b-256': 0xb220,\\n  'blake2b-264': 0xb221,\\n  'blake2b-272': 0xb222,\\n  'blake2b-280': 0xb223,\\n  'blake2b-288': 0xb224,\\n  'blake2b-296': 0xb225,\\n  'blake2b-304': 0xb226,\\n  'blake2b-312': 0xb227,\\n  'blake2b-320': 0xb228,\\n  'blake2b-328': 0xb229,\\n  'blake2b-336': 0xb22a,\\n  'blake2b-344': 0xb22b,\\n  'blake2b-352': 0xb22c,\\n  'blake2b-360': 0xb22d,\\n  'blake2b-368': 0xb22e,\\n  'blake2b-376': 0xb22f,\\n  'blake2b-384': 0xb230,\\n  'blake2b-392': 0xb231,\\n  'blake2b-400': 0xb232,\\n  'blake2b-408': 0xb233,\\n  'blake2b-416': 0xb234,\\n  'blake2b-424': 0xb235,\\n  'blake2b-432': 0xb236,\\n  'blake2b-440': 0xb237,\\n  'blake2b-448': 0xb238,\\n  'blake2b-456': 0xb239,\\n  'blake2b-464': 0xb23a,\\n  'blake2b-472': 0xb23b,\\n  'blake2b-480': 0xb23c,\\n  'blake2b-488': 0xb23d,\\n  'blake2b-496': 0xb23e,\\n  'blake2b-504': 0xb23f,\\n  'blake2b-512': 0xb240,\\n  'blake2s-8': 0xb241,\\n  'blake2s-16': 0xb242,\\n  'blake2s-24': 0xb243,\\n  'blake2s-32': 0xb244,\\n  'blake2s-40': 0xb245,\\n  'blake2s-48': 0xb246,\\n  'blake2s-56': 0xb247,\\n  'blake2s-64': 0xb248,\\n  'blake2s-72': 0xb249,\\n  'blake2s-80': 0xb24a,\\n  'blake2s-88': 0xb24b,\\n  'blake2s-96': 0xb24c,\\n  'blake2s-104': 0xb24d,\\n  'blake2s-112': 0xb24e,\\n  'blake2s-120': 0xb24f,\\n  'blake2s-128': 0xb250,\\n  'blake2s-136': 0xb251,\\n  'blake2s-144': 0xb252,\\n  'blake2s-152': 0xb253,\\n  'blake2s-160': 0xb254,\\n  'blake2s-168': 0xb255,\\n  'blake2s-176': 0xb256,\\n  'blake2s-184': 0xb257,\\n  'blake2s-192': 0xb258,\\n  'blake2s-200': 0xb259,\\n  'blake2s-208': 0xb25a,\\n  'blake2s-216': 0xb25b,\\n  'blake2s-224': 0xb25c,\\n  'blake2s-232': 0xb25d,\\n  'blake2s-240': 0xb25e,\\n  'blake2s-248': 0xb25f,\\n  'blake2s-256': 0xb260,\\n  'skein256-8': 0xb301,\\n  'skein256-16': 0xb302,\\n  'skein256-24': 0xb303,\\n  'skein256-32': 0xb304,\\n  'skein256-40': 0xb305,\\n  'skein256-48': 0xb306,\\n  'skein256-56': 0xb307,\\n  'skein256-64': 0xb308,\\n  'skein256-72': 0xb309,\\n  'skein256-80': 0xb30a,\\n  'skein256-88': 0xb30b,\\n  'skein256-96': 0xb30c,\\n  'skein256-104': 0xb30d,\\n  'skein256-112': 0xb30e,\\n  'skein256-120': 0xb30f,\\n  'skein256-128': 0xb310,\\n  'skein256-136': 0xb311,\\n  'skein256-144': 0xb312,\\n  'skein256-152': 0xb313,\\n  'skein256-160': 0xb314,\\n  'skein256-168': 0xb315,\\n  'skein256-176': 0xb316,\\n  'skein256-184': 0xb317,\\n  'skein256-192': 0xb318,\\n  'skein256-200': 0xb319,\\n  'skein256-208': 0xb31a,\\n  'skein256-216': 0xb31b,\\n  'skein256-224': 0xb31c,\\n  'skein256-232': 0xb31d,\\n  'skein256-240': 0xb31e,\\n  'skein256-248': 0xb31f,\\n  'skein256-256': 0xb320,\\n  'skein512-8': 0xb321,\\n  'skein512-16': 0xb322,\\n  'skein512-24': 0xb323,\\n  'skein512-32': 0xb324,\\n  'skein512-40': 0xb325,\\n  'skein512-48': 0xb326,\\n  'skein512-56': 0xb327,\\n  'skein512-64': 0xb328,\\n  'skein512-72': 0xb329,\\n  'skein512-80': 0xb32a,\\n  'skein512-88': 0xb32b,\\n  'skein512-96': 0xb32c,\\n  'skein512-104': 0xb32d,\\n  'skein512-112': 0xb32e,\\n  'skein512-120': 0xb32f,\\n  'skein512-128': 0xb330,\\n  'skein512-136': 0xb331,\\n  'skein512-144': 0xb332,\\n  'skein512-152': 0xb333,\\n  'skein512-160': 0xb334,\\n  'skein512-168': 0xb335,\\n  'skein512-176': 0xb336,\\n  'skein512-184': 0xb337,\\n  'skein512-192': 0xb338,\\n  'skein512-200': 0xb339,\\n  'skein512-208': 0xb33a,\\n  'skein512-216': 0xb33b,\\n  'skein512-224': 0xb33c,\\n  'skein512-232': 0xb33d,\\n  'skein512-240': 0xb33e,\\n  'skein512-248': 0xb33f,\\n  'skein512-256': 0xb340,\\n  'skein512-264': 0xb341,\\n  'skein512-272': 0xb342,\\n  'skein512-280': 0xb343,\\n  'skein512-288': 0xb344,\\n  'skein512-296': 0xb345,\\n  'skein512-304': 0xb346,\\n  'skein512-312': 0xb347,\\n  'skein512-320': 0xb348,\\n  'skein512-328': 0xb349,\\n  'skein512-336': 0xb34a,\\n  'skein512-344': 0xb34b,\\n  'skein512-352': 0xb34c,\\n  'skein512-360': 0xb34d,\\n  'skein512-368': 0xb34e,\\n  'skein512-376': 0xb34f,\\n  'skein512-384': 0xb350,\\n  'skein512-392': 0xb351,\\n  'skein512-400': 0xb352,\\n  'skein512-408': 0xb353,\\n  'skein512-416': 0xb354,\\n  'skein512-424': 0xb355,\\n  'skein512-432': 0xb356,\\n  'skein512-440': 0xb357,\\n  'skein512-448': 0xb358,\\n  'skein512-456': 0xb359,\\n  'skein512-464': 0xb35a,\\n  'skein512-472': 0xb35b,\\n  'skein512-480': 0xb35c,\\n  'skein512-488': 0xb35d,\\n  'skein512-496': 0xb35e,\\n  'skein512-504': 0xb35f,\\n  'skein512-512': 0xb360,\\n  'skein1024-8': 0xb361,\\n  'skein1024-16': 0xb362,\\n  'skein1024-24': 0xb363,\\n  'skein1024-32': 0xb364,\\n  'skein1024-40': 0xb365,\\n  'skein1024-48': 0xb366,\\n  'skein1024-56': 0xb367,\\n  'skein1024-64': 0xb368,\\n  'skein1024-72': 0xb369,\\n  'skein1024-80': 0xb36a,\\n  'skein1024-88': 0xb36b,\\n  'skein1024-96': 0xb36c,\\n  'skein1024-104': 0xb36d,\\n  'skein1024-112': 0xb36e,\\n  'skein1024-120': 0xb36f,\\n  'skein1024-128': 0xb370,\\n  'skein1024-136': 0xb371,\\n  'skein1024-144': 0xb372,\\n  'skein1024-152': 0xb373,\\n  'skein1024-160': 0xb374,\\n  'skein1024-168': 0xb375,\\n  'skein1024-176': 0xb376,\\n  'skein1024-184': 0xb377,\\n  'skein1024-192': 0xb378,\\n  'skein1024-200': 0xb379,\\n  'skein1024-208': 0xb37a,\\n  'skein1024-216': 0xb37b,\\n  'skein1024-224': 0xb37c,\\n  'skein1024-232': 0xb37d,\\n  'skein1024-240': 0xb37e,\\n  'skein1024-248': 0xb37f,\\n  'skein1024-256': 0xb380,\\n  'skein1024-264': 0xb381,\\n  'skein1024-272': 0xb382,\\n  'skein1024-280': 0xb383,\\n  'skein1024-288': 0xb384,\\n  'skein1024-296': 0xb385,\\n  'skein1024-304': 0xb386,\\n  'skein1024-312': 0xb387,\\n  'skein1024-320': 0xb388,\\n  'skein1024-328': 0xb389,\\n  'skein1024-336': 0xb38a,\\n  'skein1024-344': 0xb38b,\\n  'skein1024-352': 0xb38c,\\n  'skein1024-360': 0xb38d,\\n  'skein1024-368': 0xb38e,\\n  'skein1024-376': 0xb38f,\\n  'skein1024-384': 0xb390,\\n  'skein1024-392': 0xb391,\\n  'skein1024-400': 0xb392,\\n  'skein1024-408': 0xb393,\\n  'skein1024-416': 0xb394,\\n  'skein1024-424': 0xb395,\\n  'skein1024-432': 0xb396,\\n  'skein1024-440': 0xb397,\\n  'skein1024-448': 0xb398,\\n  'skein1024-456': 0xb399,\\n  'skein1024-464': 0xb39a,\\n  'skein1024-472': 0xb39b,\\n  'skein1024-480': 0xb39c,\\n  'skein1024-488': 0xb39d,\\n  'skein1024-496': 0xb39e,\\n  'skein1024-504': 0xb39f,\\n  'skein1024-512': 0xb3a0,\\n  'skein1024-520': 0xb3a1,\\n  'skein1024-528': 0xb3a2,\\n  'skein1024-536': 0xb3a3,\\n  'skein1024-544': 0xb3a4,\\n  'skein1024-552': 0xb3a5,\\n  'skein1024-560': 0xb3a6,\\n  'skein1024-568': 0xb3a7,\\n  'skein1024-576': 0xb3a8,\\n  'skein1024-584': 0xb3a9,\\n  'skein1024-592': 0xb3aa,\\n  'skein1024-600': 0xb3ab,\\n  'skein1024-608': 0xb3ac,\\n  'skein1024-616': 0xb3ad,\\n  'skein1024-624': 0xb3ae,\\n  'skein1024-632': 0xb3af,\\n  'skein1024-640': 0xb3b0,\\n  'skein1024-648': 0xb3b1,\\n  'skein1024-656': 0xb3b2,\\n  'skein1024-664': 0xb3b3,\\n  'skein1024-672': 0xb3b4,\\n  'skein1024-680': 0xb3b5,\\n  'skein1024-688': 0xb3b6,\\n  'skein1024-696': 0xb3b7,\\n  'skein1024-704': 0xb3b8,\\n  'skein1024-712': 0xb3b9,\\n  'skein1024-720': 0xb3ba,\\n  'skein1024-728': 0xb3bb,\\n  'skein1024-736': 0xb3bc,\\n  'skein1024-744': 0xb3bd,\\n  'skein1024-752': 0xb3be,\\n  'skein1024-760': 0xb3bf,\\n  'skein1024-768': 0xb3c0,\\n  'skein1024-776': 0xb3c1,\\n  'skein1024-784': 0xb3c2,\\n  'skein1024-792': 0xb3c3,\\n  'skein1024-800': 0xb3c4,\\n  'skein1024-808': 0xb3c5,\\n  'skein1024-816': 0xb3c6,\\n  'skein1024-824': 0xb3c7,\\n  'skein1024-832': 0xb3c8,\\n  'skein1024-840': 0xb3c9,\\n  'skein1024-848': 0xb3ca,\\n  'skein1024-856': 0xb3cb,\\n  'skein1024-864': 0xb3cc,\\n  'skein1024-872': 0xb3cd,\\n  'skein1024-880': 0xb3ce,\\n  'skein1024-888': 0xb3cf,\\n  'skein1024-896': 0xb3d0,\\n  'skein1024-904': 0xb3d1,\\n  'skein1024-912': 0xb3d2,\\n  'skein1024-920': 0xb3d3,\\n  'skein1024-928': 0xb3d4,\\n  'skein1024-936': 0xb3d5,\\n  'skein1024-944': 0xb3d6,\\n  'skein1024-952': 0xb3d7,\\n  'skein1024-960': 0xb3d8,\\n  'skein1024-968': 0xb3d9,\\n  'skein1024-976': 0xb3da,\\n  'skein1024-984': 0xb3db,\\n  'skein1024-992': 0xb3dc,\\n  'skein1024-1000': 0xb3dd,\\n  'skein1024-1008': 0xb3de,\\n  'skein1024-1016': 0xb3df,\\n  'skein1024-1024': 0xb3e0,\\n  'poseidon-bls12_381-a2-fc1': 0xb401,\\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\\n})\\n\\nmodule.exports = { names }\\n\\n},{}],195:[function(require,module,exports){\\n/**\\n * Multihash implementation in JavaScript.\\n */\\n'use strict'\\n\\nconst multibase = require('multibase')\\nconst varint = require('varint')\\nconst { names } = require('./constants')\\nconst uint8ArrayToString = require('uint8arrays/to-string')\\nconst uint8ArrayFromString = require('uint8arrays/from-string')\\nconst uint8ArrayConcat = require('uint8arrays/concat')\\n\\nconst codes = /** @type {import('./types').CodeNameMap} */({})\\n\\n// eslint-disable-next-line guard-for-in\\nfor (const key in names) {\\n  const name = /** @type {HashName} */(key)\\n  codes[names[name]] = name\\n}\\nObject.freeze(codes)\\n\\n/**\\n * Convert the given multihash to a hex encoded string.\\n *\\n * @param {Uint8Array} hash\\n * @returns {string}\\n */\\nfunction toHexString (hash) {\\n  if (!(hash instanceof Uint8Array)) {\\n    throw new Error('must be passed a Uint8Array')\\n  }\\n\\n  return uint8ArrayToString(hash, 'base16')\\n}\\n\\n/**\\n * Convert the given hex encoded string to a multihash.\\n *\\n * @param {string} hash\\n * @returns {Uint8Array}\\n */\\nfunction fromHexString (hash) {\\n  return uint8ArrayFromString(hash, 'base16')\\n}\\n\\n/**\\n * Convert the given multihash to a base58 encoded string.\\n *\\n * @param {Uint8Array} hash\\n * @returns {string}\\n */\\nfunction toB58String (hash) {\\n  if (!(hash instanceof Uint8Array)) {\\n    throw new Error('must be passed a Uint8Array')\\n  }\\n\\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\\n}\\n\\n/**\\n * Convert the given base58 encoded string to a multihash.\\n *\\n * @param {string|Uint8Array} hash\\n * @returns {Uint8Array}\\n */\\nfunction fromB58String (hash) {\\n  const encoded = hash instanceof Uint8Array\\n    ? uint8ArrayToString(hash)\\n    : hash\\n\\n  return multibase.decode('z' + encoded)\\n}\\n\\n/**\\n * Decode a hash from the given multihash.\\n *\\n * @param {Uint8Array} bytes\\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\\n */\\nfunction decode (bytes) {\\n  if (!(bytes instanceof Uint8Array)) {\\n    throw new Error('multihash must be a Uint8Array')\\n  }\\n\\n  if (bytes.length < 2) {\\n    throw new Error('multihash too short. must be > 2 bytes.')\\n  }\\n\\n  const code = /** @type {HashCode} */(varint.decode(bytes))\\n  if (!isValidCode(code)) {\\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\\n  }\\n  bytes = bytes.slice(varint.decode.bytes)\\n\\n  const len = varint.decode(bytes)\\n  if (len < 0) {\\n    throw new Error(`multihash invalid length: ${len}`)\\n  }\\n  bytes = bytes.slice(varint.decode.bytes)\\n\\n  if (bytes.length !== len) {\\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\\n  }\\n\\n  return {\\n    code,\\n    name: codes[code],\\n    length: len,\\n    digest: bytes\\n  }\\n}\\n\\n/**\\n * Encode a hash digest along with the specified function code.\\n *\\n * > **Note:** the length is derived from the length of the digest itself.\\n *\\n * @param {Uint8Array} digest\\n * @param {HashName | HashCode} code\\n * @param {number} [length]\\n * @returns {Uint8Array}\\n */\\nfunction encode (digest, code, length) {\\n  if (!digest || code === undefined) {\\n    throw new Error('multihash encode requires at least two args: digest, code')\\n  }\\n\\n  // ensure it's a hashfunction code.\\n  const hashfn = coerceCode(code)\\n\\n  if (!(digest instanceof Uint8Array)) {\\n    throw new Error('digest should be a Uint8Array')\\n  }\\n\\n  if (length == null) {\\n    length = digest.length\\n  }\\n\\n  if (length && digest.length !== length) {\\n    throw new Error('digest length should be equal to specified length.')\\n  }\\n\\n  const hash = varint.encode(hashfn)\\n  const len = varint.encode(length)\\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\\n}\\n\\n/**\\n * Converts a hash function name into the matching code.\\n * If passed a number it will return the number if it's a valid code.\\n *\\n * @param {HashName | number} name\\n * @returns {number}\\n */\\nfunction coerceCode (name) {\\n  let code = name\\n\\n  if (typeof name === 'string') {\\n    if (names[name] === undefined) {\\n      throw new Error(`Unrecognized hash function named: ${name}`)\\n    }\\n    code = names[name]\\n  }\\n\\n  if (typeof code !== 'number') {\\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\\n  }\\n\\n  // @ts-ignore\\n  if (codes[code] === undefined && !isAppCode(code)) {\\n    throw new Error(`Unrecognized function code: ${code}`)\\n  }\\n\\n  return code\\n}\\n\\n/**\\n * Checks if a code is part of the app range\\n *\\n * @param {number} code\\n * @returns {boolean}\\n */\\nfunction isAppCode (code) {\\n  return code > 0 && code < 0x10\\n}\\n\\n/**\\n * Checks whether a multihash code is valid.\\n *\\n * @param {HashCode} code\\n * @returns {boolean}\\n */\\nfunction isValidCode (code) {\\n  if (isAppCode(code)) {\\n    return true\\n  }\\n\\n  if (codes[code]) {\\n    return true\\n  }\\n\\n  return false\\n}\\n\\n/**\\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\\n *\\n * @param {Uint8Array} multihash\\n * @returns {void}\\n * @throws {Error}\\n */\\nfunction validate (multihash) {\\n  decode(multihash) // throws if bad.\\n}\\n\\n/**\\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\\n *\\n * @param {Uint8Array} multihash\\n * @returns {Uint8Array}\\n * @throws {Error}\\n */\\nfunction prefix (multihash) {\\n  validate(multihash)\\n\\n  return multihash.subarray(0, 2)\\n}\\n\\nmodule.exports = {\\n  names,\\n  codes,\\n  toHexString,\\n  fromHexString,\\n  toB58String,\\n  fromB58String,\\n  decode,\\n  encode,\\n  coerceCode,\\n  isAppCode,\\n  validate,\\n  prefix,\\n  isValidCode\\n}\\n\\n/**\\n * @typedef { import(\\\"./constants\\\").HashCode } HashCode\\n * @typedef { import(\\\"./constants\\\").HashName } HashName\\n */\\n\\n},{\\\"./constants\\\":194,\\\"multibase\\\":173,\\\"uint8arrays/concat\\\":187,\\\"uint8arrays/from-string\\\":188,\\\"uint8arrays/to-string\\\":189,\\\"varint\\\":192}],196:[function(require,module,exports){\\n(function (process){(function (){\\n// 'path' module extracted from Node.js v8.11.1 (only the posix part)\\n// transplited with Babel\\n\\n// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n'use strict';\\n\\nfunction assertPath(path) {\\n  if (typeof path !== 'string') {\\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\\n  }\\n}\\n\\n// Resolves . and .. elements in a path with directory names\\nfunction normalizeStringPosix(path, allowAboveRoot) {\\n  var res = '';\\n  var lastSegmentLength = 0;\\n  var lastSlash = -1;\\n  var dots = 0;\\n  var code;\\n  for (var i = 0; i <= path.length; ++i) {\\n    if (i < path.length)\\n      code = path.charCodeAt(i);\\n    else if (code === 47 /*/*/)\\n      break;\\n    else\\n      code = 47 /*/*/;\\n    if (code === 47 /*/*/) {\\n      if (lastSlash === i - 1 || dots === 1) {\\n        // NOOP\\n      } else if (lastSlash !== i - 1 && dots === 2) {\\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\\n          if (res.length > 2) {\\n            var lastSlashIndex = res.lastIndexOf('/');\\n            if (lastSlashIndex !== res.length - 1) {\\n              if (lastSlashIndex === -1) {\\n                res = '';\\n                lastSegmentLength = 0;\\n              } else {\\n                res = res.slice(0, lastSlashIndex);\\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\\n              }\\n              lastSlash = i;\\n              dots = 0;\\n              continue;\\n            }\\n          } else if (res.length === 2 || res.length === 1) {\\n            res = '';\\n            lastSegmentLength = 0;\\n            lastSlash = i;\\n            dots = 0;\\n            continue;\\n          }\\n        }\\n        if (allowAboveRoot) {\\n          if (res.length > 0)\\n            res += '/..';\\n          else\\n            res = '..';\\n          lastSegmentLength = 2;\\n        }\\n      } else {\\n        if (res.length > 0)\\n          res += '/' + path.slice(lastSlash + 1, i);\\n        else\\n          res = path.slice(lastSlash + 1, i);\\n        lastSegmentLength = i - lastSlash - 1;\\n      }\\n      lastSlash = i;\\n      dots = 0;\\n    } else if (code === 46 /*.*/ && dots !== -1) {\\n      ++dots;\\n    } else {\\n      dots = -1;\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction _format(sep, pathObject) {\\n  var dir = pathObject.dir || pathObject.root;\\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\\n  if (!dir) {\\n    return base;\\n  }\\n  if (dir === pathObject.root) {\\n    return dir + base;\\n  }\\n  return dir + sep + base;\\n}\\n\\nvar posix = {\\n  // path.resolve([from ...], to)\\n  resolve: function resolve() {\\n    var resolvedPath = '';\\n    var resolvedAbsolute = false;\\n    var cwd;\\n\\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\\n      var path;\\n      if (i >= 0)\\n        path = arguments[i];\\n      else {\\n        if (cwd === undefined)\\n          cwd = process.cwd();\\n        path = cwd;\\n      }\\n\\n      assertPath(path);\\n\\n      // Skip empty entries\\n      if (path.length === 0) {\\n        continue;\\n      }\\n\\n      resolvedPath = path + '/' + resolvedPath;\\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\\n    }\\n\\n    // At this point the path should be resolved to a full absolute path, but\\n    // handle relative paths to be safe (might happen when process.cwd() fails)\\n\\n    // Normalize the path\\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\\n\\n    if (resolvedAbsolute) {\\n      if (resolvedPath.length > 0)\\n        return '/' + resolvedPath;\\n      else\\n        return '/';\\n    } else if (resolvedPath.length > 0) {\\n      return resolvedPath;\\n    } else {\\n      return '.';\\n    }\\n  },\\n\\n  normalize: function normalize(path) {\\n    assertPath(path);\\n\\n    if (path.length === 0) return '.';\\n\\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\\n\\n    // Normalize the path\\n    path = normalizeStringPosix(path, !isAbsolute);\\n\\n    if (path.length === 0 && !isAbsolute) path = '.';\\n    if (path.length > 0 && trailingSeparator) path += '/';\\n\\n    if (isAbsolute) return '/' + path;\\n    return path;\\n  },\\n\\n  isAbsolute: function isAbsolute(path) {\\n    assertPath(path);\\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\\n  },\\n\\n  join: function join() {\\n    if (arguments.length === 0)\\n      return '.';\\n    var joined;\\n    for (var i = 0; i < arguments.length; ++i) {\\n      var arg = arguments[i];\\n      assertPath(arg);\\n      if (arg.length > 0) {\\n        if (joined === undefined)\\n          joined = arg;\\n        else\\n          joined += '/' + arg;\\n      }\\n    }\\n    if (joined === undefined)\\n      return '.';\\n    return posix.normalize(joined);\\n  },\\n\\n  relative: function relative(from, to) {\\n    assertPath(from);\\n    assertPath(to);\\n\\n    if (from === to) return '';\\n\\n    from = posix.resolve(from);\\n    to = posix.resolve(to);\\n\\n    if (from === to) return '';\\n\\n    // Trim any leading backslashes\\n    var fromStart = 1;\\n    for (; fromStart < from.length; ++fromStart) {\\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\\n        break;\\n    }\\n    var fromEnd = from.length;\\n    var fromLen = fromEnd - fromStart;\\n\\n    // Trim any leading backslashes\\n    var toStart = 1;\\n    for (; toStart < to.length; ++toStart) {\\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\\n        break;\\n    }\\n    var toEnd = to.length;\\n    var toLen = toEnd - toStart;\\n\\n    // Compare paths to find the longest common path from root\\n    var length = fromLen < toLen ? fromLen : toLen;\\n    var lastCommonSep = -1;\\n    var i = 0;\\n    for (; i <= length; ++i) {\\n      if (i === length) {\\n        if (toLen > length) {\\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\\n            // We get here if `from` is the exact base path for `to`.\\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\\n            return to.slice(toStart + i + 1);\\n          } else if (i === 0) {\\n            // We get here if `from` is the root\\n            // For example: from='/'; to='/foo'\\n            return to.slice(toStart + i);\\n          }\\n        } else if (fromLen > length) {\\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\\n            // We get here if `to` is the exact base path for `from`.\\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\\n            lastCommonSep = i;\\n          } else if (i === 0) {\\n            // We get here if `to` is the root.\\n            // For example: from='/foo'; to='/'\\n            lastCommonSep = 0;\\n          }\\n        }\\n        break;\\n      }\\n      var fromCode = from.charCodeAt(fromStart + i);\\n      var toCode = to.charCodeAt(toStart + i);\\n      if (fromCode !== toCode)\\n        break;\\n      else if (fromCode === 47 /*/*/)\\n        lastCommonSep = i;\\n    }\\n\\n    var out = '';\\n    // Generate the relative path based on the path difference between `to`\\n    // and `from`\\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\\n        if (out.length === 0)\\n          out += '..';\\n        else\\n          out += '/..';\\n      }\\n    }\\n\\n    // Lastly, append the rest of the destination (`to`) path that comes after\\n    // the common path parts\\n    if (out.length > 0)\\n      return out + to.slice(toStart + lastCommonSep);\\n    else {\\n      toStart += lastCommonSep;\\n      if (to.charCodeAt(toStart) === 47 /*/*/)\\n        ++toStart;\\n      return to.slice(toStart);\\n    }\\n  },\\n\\n  _makeLong: function _makeLong(path) {\\n    return path;\\n  },\\n\\n  dirname: function dirname(path) {\\n    assertPath(path);\\n    if (path.length === 0) return '.';\\n    var code = path.charCodeAt(0);\\n    var hasRoot = code === 47 /*/*/;\\n    var end = -1;\\n    var matchedSlash = true;\\n    for (var i = path.length - 1; i >= 1; --i) {\\n      code = path.charCodeAt(i);\\n      if (code === 47 /*/*/) {\\n          if (!matchedSlash) {\\n            end = i;\\n            break;\\n          }\\n        } else {\\n        // We saw the first non-path separator\\n        matchedSlash = false;\\n      }\\n    }\\n\\n    if (end === -1) return hasRoot ? '/' : '.';\\n    if (hasRoot && end === 1) return '//';\\n    return path.slice(0, end);\\n  },\\n\\n  basename: function basename(path, ext) {\\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\\\"ext\\\" argument must be a string');\\n    assertPath(path);\\n\\n    var start = 0;\\n    var end = -1;\\n    var matchedSlash = true;\\n    var i;\\n\\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\\n      if (ext.length === path.length && ext === path) return '';\\n      var extIdx = ext.length - 1;\\n      var firstNonSlashEnd = -1;\\n      for (i = path.length - 1; i >= 0; --i) {\\n        var code = path.charCodeAt(i);\\n        if (code === 47 /*/*/) {\\n            // If we reached a path separator that was not part of a set of path\\n            // separators at the end of the string, stop now\\n            if (!matchedSlash) {\\n              start = i + 1;\\n              break;\\n            }\\n          } else {\\n          if (firstNonSlashEnd === -1) {\\n            // We saw the first non-path separator, remember this index in case\\n            // we need it if the extension ends up not matching\\n            matchedSlash = false;\\n            firstNonSlashEnd = i + 1;\\n          }\\n          if (extIdx >= 0) {\\n            // Try to match the explicit extension\\n            if (code === ext.charCodeAt(extIdx)) {\\n              if (--extIdx === -1) {\\n                // We matched the extension, so mark this as the end of our path\\n                // component\\n                end = i;\\n              }\\n            } else {\\n              // Extension does not match, so our result is the entire path\\n              // component\\n              extIdx = -1;\\n              end = firstNonSlashEnd;\\n            }\\n          }\\n        }\\n      }\\n\\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\\n      return path.slice(start, end);\\n    } else {\\n      for (i = path.length - 1; i >= 0; --i) {\\n        if (path.charCodeAt(i) === 47 /*/*/) {\\n            // If we reached a path separator that was not part of a set of path\\n            // separators at the end of the string, stop now\\n            if (!matchedSlash) {\\n              start = i + 1;\\n              break;\\n            }\\n          } else if (end === -1) {\\n          // We saw the first non-path separator, mark this as the end of our\\n          // path component\\n          matchedSlash = false;\\n          end = i + 1;\\n        }\\n      }\\n\\n      if (end === -1) return '';\\n      return path.slice(start, end);\\n    }\\n  },\\n\\n  extname: function extname(path) {\\n    assertPath(path);\\n    var startDot = -1;\\n    var startPart = 0;\\n    var end = -1;\\n    var matchedSlash = true;\\n    // Track the state of characters (if any) we see before our first dot and\\n    // after any path separator we find\\n    var preDotState = 0;\\n    for (var i = path.length - 1; i >= 0; --i) {\\n      var code = path.charCodeAt(i);\\n      if (code === 47 /*/*/) {\\n          // If we reached a path separator that was not part of a set of path\\n          // separators at the end of the string, stop now\\n          if (!matchedSlash) {\\n            startPart = i + 1;\\n            break;\\n          }\\n          continue;\\n        }\\n      if (end === -1) {\\n        // We saw the first non-path separator, mark this as the end of our\\n        // extension\\n        matchedSlash = false;\\n        end = i + 1;\\n      }\\n      if (code === 46 /*.*/) {\\n          // If this is our first dot, mark it as the start of our extension\\n          if (startDot === -1)\\n            startDot = i;\\n          else if (preDotState !== 1)\\n            preDotState = 1;\\n      } else if (startDot !== -1) {\\n        // We saw a non-dot and non-path separator before our dot, so we should\\n        // have a good chance at having a non-empty extension\\n        preDotState = -1;\\n      }\\n    }\\n\\n    if (startDot === -1 || end === -1 ||\\n        // We saw a non-dot character immediately before the dot\\n        preDotState === 0 ||\\n        // The (right-most) trimmed path component is exactly '..'\\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\\n      return '';\\n    }\\n    return path.slice(startDot, end);\\n  },\\n\\n  format: function format(pathObject) {\\n    if (pathObject === null || typeof pathObject !== 'object') {\\n      throw new TypeError('The \\\"pathObject\\\" argument must be of type Object. Received type ' + typeof pathObject);\\n    }\\n    return _format('/', pathObject);\\n  },\\n\\n  parse: function parse(path) {\\n    assertPath(path);\\n\\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\\n    if (path.length === 0) return ret;\\n    var code = path.charCodeAt(0);\\n    var isAbsolute = code === 47 /*/*/;\\n    var start;\\n    if (isAbsolute) {\\n      ret.root = '/';\\n      start = 1;\\n    } else {\\n      start = 0;\\n    }\\n    var startDot = -1;\\n    var startPart = 0;\\n    var end = -1;\\n    var matchedSlash = true;\\n    var i = path.length - 1;\\n\\n    // Track the state of characters (if any) we see before our first dot and\\n    // after any path separator we find\\n    var preDotState = 0;\\n\\n    // Get non-dir info\\n    for (; i >= start; --i) {\\n      code = path.charCodeAt(i);\\n      if (code === 47 /*/*/) {\\n          // If we reached a path separator that was not part of a set of path\\n          // separators at the end of the string, stop now\\n          if (!matchedSlash) {\\n            startPart = i + 1;\\n            break;\\n          }\\n          continue;\\n        }\\n      if (end === -1) {\\n        // We saw the first non-path separator, mark this as the end of our\\n        // extension\\n        matchedSlash = false;\\n        end = i + 1;\\n      }\\n      if (code === 46 /*.*/) {\\n          // If this is our first dot, mark it as the start of our extension\\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\\n        } else if (startDot !== -1) {\\n        // We saw a non-dot and non-path separator before our dot, so we should\\n        // have a good chance at having a non-empty extension\\n        preDotState = -1;\\n      }\\n    }\\n\\n    if (startDot === -1 || end === -1 ||\\n    // We saw a non-dot character immediately before the dot\\n    preDotState === 0 ||\\n    // The (right-most) trimmed path component is exactly '..'\\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\\n      if (end !== -1) {\\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\\n      }\\n    } else {\\n      if (startPart === 0 && isAbsolute) {\\n        ret.name = path.slice(1, startDot);\\n        ret.base = path.slice(1, end);\\n      } else {\\n        ret.name = path.slice(startPart, startDot);\\n        ret.base = path.slice(startPart, end);\\n      }\\n      ret.ext = path.slice(startDot, end);\\n    }\\n\\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\\n\\n    return ret;\\n  },\\n\\n  sep: '/',\\n  delimiter: ':',\\n  win32: null,\\n  posix: null\\n};\\n\\nposix.posix = posix;\\n\\nmodule.exports = posix;\\n\\n}).call(this)}).call(this,require('_process'))\\n},{\\\"_process\\\":197}],197:[function(require,module,exports){\\n// shim for using process in browser\\nvar process = module.exports = {};\\n\\n// cached from whatever global is present so that test runners that stub it\\n// don't break things.  But we need to wrap it in a try catch in case it is\\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n// function because try/catches deoptimize in certain engines.\\n\\nvar cachedSetTimeout;\\nvar cachedClearTimeout;\\n\\nfunction defaultSetTimout() {\\n    throw new Error('setTimeout has not been defined');\\n}\\nfunction defaultClearTimeout () {\\n    throw new Error('clearTimeout has not been defined');\\n}\\n(function () {\\n    try {\\n        if (typeof setTimeout === 'function') {\\n            cachedSetTimeout = setTimeout;\\n        } else {\\n            cachedSetTimeout = defaultSetTimout;\\n        }\\n    } catch (e) {\\n        cachedSetTimeout = defaultSetTimout;\\n    }\\n    try {\\n        if (typeof clearTimeout === 'function') {\\n            cachedClearTimeout = clearTimeout;\\n        } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n        }\\n    } catch (e) {\\n        cachedClearTimeout = defaultClearTimeout;\\n    }\\n} ())\\nfunction runTimeout(fun) {\\n    if (cachedSetTimeout === setTimeout) {\\n        //normal enviroments in sane situations\\n        return setTimeout(fun, 0);\\n    }\\n    // if setTimeout wasn't available but was latter defined\\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n        cachedSetTimeout = setTimeout;\\n        return setTimeout(fun, 0);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedSetTimeout(fun, 0);\\n    } catch(e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n            return cachedSetTimeout.call(null, fun, 0);\\n        } catch(e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n            return cachedSetTimeout.call(this, fun, 0);\\n        }\\n    }\\n\\n\\n}\\nfunction runClearTimeout(marker) {\\n    if (cachedClearTimeout === clearTimeout) {\\n        //normal enviroments in sane situations\\n        return clearTimeout(marker);\\n    }\\n    // if clearTimeout wasn't available but was latter defined\\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n        cachedClearTimeout = clearTimeout;\\n        return clearTimeout(marker);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedClearTimeout(marker);\\n    } catch (e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n            return cachedClearTimeout.call(null, marker);\\n        } catch (e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n            return cachedClearTimeout.call(this, marker);\\n        }\\n    }\\n\\n\\n\\n}\\nvar queue = [];\\nvar draining = false;\\nvar currentQueue;\\nvar queueIndex = -1;\\n\\nfunction cleanUpNextTick() {\\n    if (!draining || !currentQueue) {\\n        return;\\n    }\\n    draining = false;\\n    if (currentQueue.length) {\\n        queue = currentQueue.concat(queue);\\n    } else {\\n        queueIndex = -1;\\n    }\\n    if (queue.length) {\\n        drainQueue();\\n    }\\n}\\n\\nfunction drainQueue() {\\n    if (draining) {\\n        return;\\n    }\\n    var timeout = runTimeout(cleanUpNextTick);\\n    draining = true;\\n\\n    var len = queue.length;\\n    while(len) {\\n        currentQueue = queue;\\n        queue = [];\\n        while (++queueIndex < len) {\\n            if (currentQueue) {\\n                currentQueue[queueIndex].run();\\n            }\\n        }\\n        queueIndex = -1;\\n        len = queue.length;\\n    }\\n    currentQueue = null;\\n    draining = false;\\n    runClearTimeout(timeout);\\n}\\n\\nprocess.nextTick = function (fun) {\\n    var args = new Array(arguments.length - 1);\\n    if (arguments.length > 1) {\\n        for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments[i];\\n        }\\n    }\\n    queue.push(new Item(fun, args));\\n    if (queue.length === 1 && !draining) {\\n        runTimeout(drainQueue);\\n    }\\n};\\n\\n// v8 likes predictible objects\\nfunction Item(fun, array) {\\n    this.fun = fun;\\n    this.array = array;\\n}\\nItem.prototype.run = function () {\\n    this.fun.apply(null, this.array);\\n};\\nprocess.title = 'browser';\\nprocess.browser = true;\\nprocess.env = {};\\nprocess.argv = [];\\nprocess.version = ''; // empty string to avoid regexp issues\\nprocess.versions = {};\\n\\nfunction noop() {}\\n\\nprocess.on = noop;\\nprocess.addListener = noop;\\nprocess.once = noop;\\nprocess.off = noop;\\nprocess.removeListener = noop;\\nprocess.removeAllListeners = noop;\\nprocess.emit = noop;\\nprocess.prependListener = noop;\\nprocess.prependOnceListener = noop;\\n\\nprocess.listeners = function (name) { return [] }\\n\\nprocess.binding = function (name) {\\n    throw new Error('process.binding is not supported');\\n};\\n\\nprocess.cwd = function () { return '/' };\\nprocess.chdir = function (dir) {\\n    throw new Error('process.chdir is not supported');\\n};\\nprocess.umask = function() { return 0; };\\n\\n},{}],198:[function(require,module,exports){\\n'use strict';\\nvar escapeStringRegexp = require('escape-string-regexp');\\n\\nmodule.exports = function (str, sub) {\\n\\tif (typeof str !== 'string' || typeof sub !== 'string') {\\n\\t\\tthrow new TypeError();\\n\\t}\\n\\n\\tsub = escapeStringRegexp(sub);\\n\\treturn str.replace(new RegExp('^' + sub + '|' + sub + '$', 'g'), '');\\n};\\n\\n},{\\\"escape-string-regexp\\\":153}],199:[function(require,module,exports){\\n'use strict';\\nvar escapeStringRegexp = require('escape-string-regexp');\\n\\nmodule.exports = function (str, target) {\\n\\tif (typeof str !== 'string' || typeof target !== 'string') {\\n\\t\\tthrow new TypeError('Expected a string');\\n\\t}\\n\\n\\treturn str.replace(new RegExp('(?:' + escapeStringRegexp(target) + '){2,}', 'g'), target);\\n};\\n\\n},{\\\"escape-string-regexp\\\":153}],200:[function(require,module,exports){\\n'use strict'\\n\\n/**\\n * Can be used with Array.sort to sort and array with Uint8Array entries\\n *\\n * @param {Uint8Array} a\\n * @param {Uint8Array} b\\n */\\nfunction compare (a, b) {\\n  for (let i = 0; i < a.byteLength; i++) {\\n    if (a[i] < b[i]) {\\n      return -1\\n    }\\n\\n    if (a[i] > b[i]) {\\n      return 1\\n    }\\n  }\\n\\n  if (a.byteLength > b.byteLength) {\\n    return 1\\n  }\\n\\n  if (a.byteLength < b.byteLength) {\\n    return -1\\n  }\\n\\n  return 0\\n}\\n\\nmodule.exports = compare\\n\\n},{}],201:[function(require,module,exports){\\narguments[4][15][0].apply(exports,arguments)\\n},{\\\"dup\\\":15}],202:[function(require,module,exports){\\narguments[4][16][0].apply(exports,arguments)\\n},{\\\"dup\\\":16}],203:[function(require,module,exports){\\n'use strict'\\n\\nconst { encoding: getCodec } = require('multibase')\\nconst utf8Encoder = new TextEncoder()\\n\\n/**\\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\\n */\\n\\n/**\\n * Interprets each character in a string as a byte and\\n * returns a Uint8Array of those bytes.\\n *\\n * @param {string} string - The string to turn into an array\\n */\\nfunction asciiStringToUint8Array (string) {\\n  const array = new Uint8Array(string.length)\\n\\n  for (let i = 0; i < string.length; i++) {\\n    array[i] = string.charCodeAt(i)\\n  }\\n\\n  return array\\n}\\n\\n/**\\n * Create a `Uint8Array` from the passed string\\n *\\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\\n *\\n * Also `ascii` which is similar to node's 'binary' encoding.\\n *\\n * @param {string} string\\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\\n * @returns {Uint8Array}\\n */\\nfunction fromString (string, encoding = 'utf8') {\\n  if (encoding === 'utf8' || encoding === 'utf-8') {\\n    return utf8Encoder.encode(string)\\n  }\\n\\n  if (encoding === 'ascii') {\\n    return asciiStringToUint8Array(string)\\n  }\\n\\n  return getCodec(encoding).decode(string)\\n}\\n\\nmodule.exports = fromString\\n\\n},{\\\"multibase\\\":173}],204:[function(require,module,exports){\\n'use strict'\\nconst compare = require('./compare')\\nconst concat = require('./concat')\\nconst equals = require('./equals')\\nconst fromString = require('./from-string')\\nconst toString = require('./to-string')\\nconst xor = require('./xor')\\n\\nmodule.exports = {\\n  compare,\\n  concat,\\n  equals,\\n  fromString,\\n  toString,\\n  xor\\n}\\n\\n},{\\\"./compare\\\":200,\\\"./concat\\\":201,\\\"./equals\\\":202,\\\"./from-string\\\":203,\\\"./to-string\\\":205,\\\"./xor\\\":206}],205:[function(require,module,exports){\\n'use strict'\\n\\nconst { encoding: getCodec } = require('multibase')\\nconst utf8Decoder = new TextDecoder('utf8')\\n\\n/**\\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\\n */\\n\\n/**\\n * Turns a Uint8Array of bytes into a string with each\\n * character being the char code of the corresponding byte\\n *\\n * @param {Uint8Array} array - The array to turn into a string\\n */\\nfunction uint8ArrayToAsciiString (array) {\\n  let string = ''\\n\\n  for (let i = 0; i < array.length; i++) {\\n    string += String.fromCharCode(array[i])\\n  }\\n  return string\\n}\\n\\n/**\\n * Turns a `Uint8Array` into a string.\\n *\\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\\n *\\n * Also `ascii` which is similar to node's 'binary' encoding.\\n *\\n * @param {Uint8Array} array - The array to turn into a string\\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\\n * @returns {string}\\n */\\nfunction toString (array, encoding = 'utf8') {\\n  if (encoding === 'utf8' || encoding === 'utf-8') {\\n    return utf8Decoder.decode(array)\\n  }\\n\\n  if (encoding === 'ascii') {\\n    return uint8ArrayToAsciiString(array)\\n  }\\n\\n  return getCodec(encoding).encode(array)\\n}\\n\\nmodule.exports = toString\\n\\n},{\\\"multibase\\\":173}],206:[function(require,module,exports){\\n'use strict'\\n\\n/**\\n * Returns the xor distance between two arrays\\n *\\n * @param {Uint8Array} a\\n * @param {Uint8Array} b\\n */\\nfunction xor (a, b) {\\n  if (a.length !== b.length) {\\n    throw new Error('Inputs should have the same length')\\n  }\\n\\n  const result = new Uint8Array(a.length)\\n\\n  for (let i = 0; i < a.length; i++) {\\n    result[i] = a[i] ^ b[i]\\n  }\\n\\n  return result\\n}\\n\\nmodule.exports = xor\\n\\n},{}]},{},[1])(1)\\n});\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-controller.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-controller.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-controller.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Controller\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const EnsAction = require('$:/plugins/ipfs/ens-action.js').EnsAction\\n  const EnsWrapper = require('$:/plugins/ipfs/ens-wrapper.js').EnsWrapper\\n\\n  const IpfsAction = require('$:/plugins/ipfs/ipfs-action.js').IpfsAction\\n  const IpfsBundle = require('$:/plugins/ipfs/ipfs-bundle.js').IpfsBundle\\n  const IpfsTiddler = require('$:/plugins/ipfs/ipfs-tiddler.js').IpfsTiddler\\n  const IpfsWrapper = require('$:/plugins/ipfs/ipfs-wrapper.js').IpfsWrapper\\n\\n  const ipnsKeyword = 'ipns'\\n\\n  const name = 'ipfs-controller'\\n\\n  var IpfsController = function () {\\n    this.pin = []\\n    this.unpin = []\\n  }\\n\\n  IpfsController.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    this.ipfsBundle = new IpfsBundle()\\n    this.ipfsBundle.init()\\n    this.ensWrapper = new EnsWrapper(this.ipfsBundle.ensLibrary)\\n    this.ipfsWrapper = new IpfsWrapper(this.ipfsBundle)\\n    // Listener\\n    this.ensAction = new EnsAction()\\n    this.ipfsAction = new IpfsAction()\\n    this.ipfsTiddler = new IpfsTiddler()\\n    // Init\\n    this.ensAction.init()\\n    this.ipfsAction.init()\\n    this.ipfsTiddler.init()\\n    // Load sigUtil early if needed\\n    if ($tw.crypto.hasEncryptionPublicKey() && globalThis.sigUtil === 'undefined') {\\n      this.loadEthSigUtilLibrary()\\n    }\\n    // Init once\\n    this.once = true\\n  }\\n\\n  IpfsController.prototype.getLogger = function () {\\n    if (window.log !== undefined && window.log !== null) {\\n      const loggers = window.log.getLoggers()\\n      var log = loggers.eruda\\n      if (log !== undefined && log !== null) {\\n        return log\\n      }\\n      log = loggers.ipfs\\n      if (log !== undefined && log !== null) {\\n        return log\\n      }\\n    }\\n    return console\\n  }\\n\\n  IpfsController.prototype.handleImportFile = async function (info) {\\n    return await this.ipfsTiddler.handleImportFile(info)\\n  }\\n\\n  IpfsController.prototype.loadToBase64 = async function (url, password) {\\n    return await this.ipfsBundle.loadToBase64(url, password)\\n  }\\n\\n  IpfsController.prototype.loadToUtf8 = async function (url, password) {\\n    return await this.ipfsBundle.loadToUtf8(url, password)\\n  }\\n\\n  IpfsController.prototype.Base64ToUint8Array = function (b64) {\\n    return this.ipfsBundle.Base64ToUint8Array(b64)\\n  }\\n\\n  IpfsController.prototype.Uint8ArrayToBase64 = function (ua) {\\n    return this.ipfsBundle.Uint8ArrayToBase64(ua)\\n  }\\n\\n  IpfsController.prototype.StringToUint8Array = function (string) {\\n    return this.ipfsBundle.StringToUint8Array(string)\\n  }\\n\\n  IpfsController.prototype.Utf8ArrayToStr = function (array) {\\n    return this.ipfsBundle.Utf8ArrayToStr(array)\\n  }\\n\\n  IpfsController.prototype.processContent = async function (tiddler, content, encoding, type) {\\n    if (content === undefined || content == null) {\\n      throw new Error('Unknown content...')\\n    }\\n    encoding = encoding !== undefined && encoding !== null && encoding.trim() !== '' ? encoding.trim() : null\\n    if (encoding == null) {\\n      throw new Error('Unknown encoding...')\\n    }\\n    type = type !== undefined && type !== null && type.trim() !== '' ? type.trim() : null\\n    if (type == null) {\\n      throw new Error('Unknown type...')\\n    }\\n    var compress = $tw.wiki.getTiddler('$:/isCompressed')\\n    compress = compress !== undefined ? compress.fields.text === 'yes' : false\\n    if (encoding === 'base64' || type === 'image/svg+xml') {\\n      compress = false\\n    }\\n    compress = tiddler !== undefined && tiddler.fields._compress !== undefined && tiddler.fields._compress.trim() !== '' ? tiddler.fields._compress.trim() === 'yes' : compress\\n    var encrypted = $tw.wiki.getTiddler('$:/isEncrypted')\\n    encrypted = encrypted !== undefined ? encrypted.fields.text === 'yes' : false\\n    var password = tiddler !== undefined && tiddler.fields._password !== undefined && tiddler.fields._password.trim() !== '' ? tiddler.fields._password.trim() : null\\n    var publicKey =\\n      tiddler !== undefined && tiddler.fields._encryption_public_key !== undefined && tiddler.fields._encryption_public_key.trim() !== ''\\n        ? tiddler.fields._encryption_public_key.trim()\\n        : null\\n    var sign = $tw.wiki.getTiddler('$:/isSigned')\\n    sign = sign !== undefined ? sign.fields.text === 'yes' : false\\n    sign = tiddler !== undefined && tiddler.fields._sign !== undefined && tiddler.fields._sign.trim() !== '' ? tiddler.fields._sign.trim() === 'yes' : sign\\n    var hasPublicKey = publicKey || $tw.crypto.hasEncryptionPublicKey()\\n    if (encrypted || password || hasPublicKey) {\\n      try {\\n        if (hasPublicKey && globalThis.sigUtil === 'undefined') {\\n          await this.loadEthSigUtilLibrary()\\n        }\\n        if (compress) {\\n          content = { compressed: this.deflate(content) }\\n          content.compressed = $tw.crypto.encrypt(content.compressed, password, publicKey)\\n          if (hasPublicKey && sign) {\\n            content.keccak256 = $tw.crypto.keccak256(content.compressed)\\n            content.signature = await this.personalSign(content.keccak256)\\n            content.signature = $tw.crypto.encrypt(content.signature, null, publicKey)\\n          }\\n          content = JSON.stringify(content)\\n        } else {\\n          // https://github.com/xmaysonnave/tiddlywiki-ipfs/issues/9\\n          if (encoding === 'base64') {\\n            content = atob(content)\\n          }\\n          if (hasPublicKey) {\\n            content = { encrypted: content }\\n            content.encrypted = $tw.crypto.encrypt(content.encrypted, null, publicKey)\\n            if (sign) {\\n              content.keccak256 = $tw.crypto.keccak256(content.encrypted)\\n              content.signature = await this.personalSign(content.keccak256)\\n              content.signature = $tw.crypto.encrypt(content.signature, null, publicKey)\\n            }\\n            content = JSON.stringify(content)\\n          } else {\\n            content = $tw.crypto.encrypt(content, password)\\n          }\\n        }\\n        content = $tw.ipfs.StringToUint8Array(content)\\n      } catch (error) {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, 'Failed to process encrypted content...')\\n        return null\\n      }\\n    } else {\\n      try {\\n        if (compress) {\\n          content = { compressed: this.deflate(content) }\\n          content = JSON.stringify(content)\\n          content = $tw.ipfs.StringToUint8Array(content)\\n        } else {\\n          if (encoding === 'base64') {\\n            content = $tw.ipfs.Base64ToUint8Array(content)\\n          } else {\\n            content = $tw.ipfs.StringToUint8Array(content)\\n          }\\n        }\\n      } catch (error) {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, 'Failed to process content...')\\n        return null\\n      }\\n    }\\n    return content\\n  }\\n\\n  IpfsController.prototype.addToPin = function (ipfsPath) {\\n    ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? decodeURI(ipfsPath.toString().trim()) : null\\n    if (ipfsPath !== null) {\\n      var index = this.unpin.indexOf(ipfsPath)\\n      if (index !== -1) {\\n        this.unpin.splice(index, 1)\\n        $tw.ipfs.getLogger().info(\\n          `Cancel request to Unpin:\\n${ipfsPath}`\\n        )\\n        return false\\n      }\\n      if (this.pin.indexOf(ipfsPath) === -1) {\\n        this.pin.push(ipfsPath)\\n        $tw.ipfs.getLogger().info(\\n          `Request to Pin:\\n${ipfsPath}`\\n        )\\n        return true\\n      }\\n    }\\n    return false\\n  }\\n\\n  IpfsController.prototype.addToUnpin = function (ipfsPath) {\\n    ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? decodeURI(ipfsPath.toString().trim()) : null\\n    if (ipfsPath !== null) {\\n      // Discard\\n      var index = this.pin.indexOf(ipfsPath)\\n      if (index !== -1) {\\n        this.pin.splice(index, 1)\\n        $tw.ipfs.getLogger().info(\\n          `Cancel request to Pin:\\n${ipfsPath}`\\n        )\\n        return false\\n      }\\n      // Add to unpin\\n      if (this.unpin.indexOf(ipfsPath) === -1) {\\n        this.unpin.push(ipfsPath)\\n        $tw.ipfs.getLogger().info(\\n          `Request to unpin:\\n${ipfsPath}`\\n        )\\n        return true\\n      }\\n    }\\n    return false\\n  }\\n\\n  IpfsController.prototype.removeFromPinUnpin = function (ipfsPath) {\\n    ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? decodeURI(ipfsPath.toString().trim()) : null\\n    if (ipfsPath !== null) {\\n      var index = this.pin.indexOf(ipfsPath)\\n      if (index !== -1) {\\n        this.pin.splice(index, 1)\\n        $tw.ipfs.getLogger().info(\\n          `Cancel request to Pin:\\n ${ipfsPath}`\\n        )\\n      }\\n      index = this.unpin.indexOf(ipfsPath)\\n      if (index !== -1) {\\n        this.unpin.splice(index, 1)\\n        $tw.ipfs.getLogger().info(\\n          `Cancel request to Unpin:\\n ${ipfsPath}`\\n        )\\n      }\\n    }\\n  }\\n\\n  IpfsController.prototype.pinToIpfs = async function (ipfsPath, recursive) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.pinToIpfs(ipfs, ipfsPath, recursive)\\n  }\\n\\n  IpfsController.prototype.unpinFromIpfs = async function (ipfsPath, recursive) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.unpinFromIpfs(ipfs, ipfsPath, recursive)\\n  }\\n\\n  IpfsController.prototype.addContentToIpfs = async function (content, ipfsPath) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.addContentToIpfs(ipfs, content, ipfsPath)\\n  }\\n\\n  IpfsController.prototype.generateIpnsCid = async function (ipnsKey) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.generateIpnsCid(ipfs, ipnsKey)\\n  }\\n\\n  IpfsController.prototype.removeIpnsKey = async function (ipnsKey) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.removeIpnsKey(ipfs, ipnsKey)\\n  }\\n\\n  IpfsController.prototype.renameIpnsKey = async function (oldIpnsKey, newIpnsKey) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.renameIpnsKey(ipfs, oldIpnsKey, newIpnsKey)\\n  }\\n\\n  IpfsController.prototype.resolveIpfs = async function (value, timeout) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.resolveIpfs(ipfs, value, timeout)\\n  }\\n\\n  IpfsController.prototype.resolveIpfsContainer = async function (value, timeout) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.resolveIpfsContainer(ipfs, value, timeout)\\n  }\\n\\n  IpfsController.prototype.getIpnsIdentifier = async function (identifier, resolveIpnsKey, base, path, ipnsKey) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.getIpnsIdentifier(ipfs, identifier, resolveIpnsKey, base, path, ipnsKey)\\n  }\\n\\n  IpfsController.prototype.fetchDagNode = async function (cid, timeout) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.fetchDagNode(ipfs, cid, timeout)\\n  }\\n\\n  IpfsController.prototype.resolveIpnsKey = async function (ipnsKey, timeout) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.resolveIpnsKey(ipfs, ipnsKey, timeout)\\n  }\\n\\n  IpfsController.prototype.publishIpnsKey = async function (ipfsCid, ipnsCid, ipnsKey, options) {\\n    const { ipfs } = await this.getIpfsClient()\\n    return await this.ipfsWrapper.publishIpnsKey(ipfs, ipfsCid, ipnsCid, ipnsKey, options)\\n  }\\n\\n  IpfsController.prototype.isJson = function (content) {\\n    return this.ipfsBundle.isJson(content)\\n  }\\n\\n  IpfsController.prototype.filenamify = function (name, options) {\\n    return this.ipfsBundle.filenamify(name, options)\\n  }\\n\\n  IpfsController.prototype.getBase = function (base) {\\n    return this.ipfsBundle.getBase(base)\\n  }\\n\\n  IpfsController.prototype.getIpfsBaseUrl = function () {\\n    return this.ipfsBundle.getIpfsBaseUrl()\\n  }\\n\\n  IpfsController.prototype.normalizeUrl = function (value, base) {\\n    return this.ipfsBundle.normalizeUrl(value, base)\\n  }\\n\\n  IpfsController.prototype.getDocumentUrl = function () {\\n    return this.ipfsBundle.getDocumentUrl()\\n  }\\n\\n  IpfsController.prototype.getIpfsDefaultApi = function () {\\n    return this.ipfsBundle.getIpfsDefaultApi()\\n  }\\n\\n  IpfsController.prototype.getIpfsDefaultGateway = function () {\\n    return this.ipfsBundle.getIpfsDefaultGateway()\\n  }\\n\\n  IpfsController.prototype.getIpfsApiUrl = function () {\\n    return this.ipfsBundle.getIpfsApiUrl()\\n  }\\n\\n  IpfsController.prototype.getIpfsGatewayUrl = function () {\\n    return this.ipfsBundle.getIpfsGatewayUrl()\\n  }\\n\\n  IpfsController.prototype.getUrl = function (url, base) {\\n    return this.ipfsBundle.getUrl(url, base)\\n  }\\n\\n  IpfsController.prototype.resolveUrl = async function (value, resolveIpns, resolveIpnsKey, resolveEns, base, web3) {\\n    var ipfsCid = null\\n    var ipnsCid = null\\n    var ipnsKey = null\\n    var normalizedUrl = null\\n    var resolvedUrl = null\\n    value = value !== undefined && value !== null && value.toString().trim() !== '' ? value.toString().trim() : null\\n    if (value == null) {\\n      return {\\n        ipfsCid: null,\\n        ipnsCid: null,\\n        ipnsKey: null,\\n        normalizedUrl: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    base = base !== undefined && base !== null && base.toString().trim() !== '' ? base.toString().trim() : null\\n    try {\\n      normalizedUrl = this.normalizeUrl(value, base)\\n    } catch (error) {\\n      // Ignore\\n    }\\n    if (normalizedUrl == null) {\\n      return {\\n        ipfsCid: null,\\n        ipnsCid: null,\\n        ipnsKey: null,\\n        normalizedUrl: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    var { ipfsCid, ipnsIdentifier, ipfsPath } = this.getIpfsIdentifier(normalizedUrl)\\n    if (ipnsIdentifier !== null) {\\n      var { ipfsCid, ipnsCid, ipnsKey, normalizedUrl, resolvedUrl } = await this.resolveIpns(ipnsIdentifier, resolveIpns, resolveIpnsKey, base, ipfsPath)\\n    } else if (resolveEns && ipfsCid == null && ipnsIdentifier == null && (normalizedUrl.hostname.endsWith('.eth') || normalizedUrl.hostname.endsWith('.eth.link'))) {\\n      var { identifier, protocol, normalizedUrl, resolvedUrl } = await this.resolveEns(normalizedUrl.hostname, base, ipfsPath, web3)\\n      if (protocol === ipnsKeyword) {\\n        var { ipfsCid, ipnsCid, ipnsKey, normalizedUrl, resolvedUrl } = await this.resolveIpns(identifier, resolveIpns, resolveIpnsKey, base, ipfsPath)\\n      }\\n    }\\n    return {\\n      ipfsCid: ipfsCid,\\n      ipnsCid: ipnsCid,\\n      ipnsKey: ipnsKey,\\n      normalizedUrl: normalizedUrl,\\n      resolvedUrl: resolvedUrl !== null ? resolvedUrl : normalizedUrl,\\n    }\\n  }\\n\\n  IpfsController.prototype.resolveIpns = async function (identifier, resolveIpfsCid, resolveIpnsKey, base, path) {\\n    identifier = identifier !== undefined && identifier !== null && identifier.toString().trim() !== '' ? identifier.toString().trim() : null\\n    path = path !== undefined && path !== null && path.trim() !== '' ? path.trim() : ''\\n    if (identifier == null) {\\n      return {\\n        ipfsCid: null,\\n        ipnsCid: null,\\n        ipnsKey: null,\\n        normalizedUrl: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    var ipfsCid = null\\n    var resolvedUrl = null\\n    var { ipnsKey, ipnsCid, normalizedUrl } = await this.getIpnsIdentifier(identifier, resolveIpnsKey, base, path)\\n    if (ipnsCid !== null && resolveIpfsCid) {\\n      var { cid: ipfsCid, remainderPath } = await this.resolveIpfs(normalizedUrl.pathname)\\n      if (ipfsCid !== null) {\\n        var credential = ''\\n        var { base } = this.ipfsBundle.getBase(normalizedUrl)\\n        if (normalizedUrl.username && normalizedUrl.password) {\\n          credential = `${normalizedUrl.username}:${normalizedUrl.password}@`\\n        }\\n        resolvedUrl = this.getUrl(`${base.protocol}//${credential}${base.host}/ipfs/${ipfsCid}${remainderPath}${normalizedUrl.search}${normalizedUrl.hash}`)\\n        if (normalizedUrl.toString() !== resolvedUrl.toString()) {\\n          $tw.ipfs.getLogger().info(\\n            `Resolved IPNS:\\n ${normalizedUrl}\\n ${resolvedUrl}`\\n          )\\n        } else {\\n          $tw.ipfs.getLogger().info(\\n            `Resolved IPNS:\\n ${resolvedUrl}`\\n          )\\n        }\\n      }\\n    }\\n    return {\\n      ipfsCid: ipfsCid,\\n      ipnsCid: ipnsCid,\\n      ipnsKey: ipnsKey,\\n      normalizedUrl: normalizedUrl,\\n      resolvedUrl: resolvedUrl !== undefined && resolvedUrl !== null ? resolvedUrl : normalizedUrl,\\n    }\\n  }\\n\\n  IpfsController.prototype.resolveEns = async function (ensDomain, base, path, web3) {\\n    ensDomain = ensDomain !== undefined && ensDomain !== null && ensDomain.toString().trim() !== '' ? ensDomain.toString().trim() : null\\n    if (ensDomain == null) {\\n      return {\\n        identifier: null,\\n        protocol: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    if (ensDomain.endsWith('.eth.link')) {\\n      ensDomain = ensDomain.substring(0, ensDomain.indexOf('.link'))\\n    }\\n    path = path !== undefined && path !== null && path.trim() !== '' ? path.trim() : ''\\n    if (web3 === undefined || web3 == null) {\\n      var { web3 } = await this.getWeb3Provider()\\n    }\\n    const { content, protocol } = await this.ensWrapper.getContentHash(ensDomain, web3)\\n    if (content == null || protocol == null) {\\n      return {\\n        identifier: null,\\n        protocol: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    const url = this.normalizeUrl(`/${protocol}/${content}${path}`, base)\\n    $tw.ipfs.getLogger().info(\\n      `Fetched ENS domain content: \\\"${ensDomain}\\\"\\n${url}`\\n    )\\n    return {\\n      identifier: content,\\n      protocol: protocol,\\n      resolvedUrl: url,\\n    }\\n  }\\n\\n  IpfsController.prototype.getIpfsClient = async function () {\\n    // Provider\\n    const ipfsProvider = $tw.utils.getIpfsProvider()\\n    // IPFS companion\\n    if (ipfsProvider === 'window') {\\n      const client = await this.ipfsWrapper.getWindowIpfsClient()\\n      return {\\n        ipfs: client.ipfs,\\n        provider: client.provider,\\n      }\\n    }\\n    // Default, try IPFS companion\\n    if (ipfsProvider === 'default') {\\n      try {\\n        const client = await this.ipfsWrapper.getWindowIpfsClient()\\n        return {\\n          ipfs: client.ipfs,\\n          provider: client.provider,\\n        }\\n      } catch (error) {\\n        // Ignore, fallback to HTTP\\n      }\\n    }\\n    const url = this.getIpfsApiUrl()\\n    if (url === undefined || url == null || url.toString().trim() === '') {\\n      throw new Error('Undefined IPFS API URL...')\\n    }\\n    const { ipfs, provider } = await this.ipfsWrapper.getHttpIpfsClient(url)\\n    return {\\n      ipfs: ipfs,\\n      provider: provider,\\n    }\\n  }\\n\\n  IpfsController.prototype.setContentHash = async function (ensDomain, identifier, web3, account) {\\n    if (account === undefined || account == null || web3 === undefined || web3 == null) {\\n      var { account, web3 } = await this.getEnabledWeb3Provider()\\n    }\\n    await this.ensWrapper.setContentHash(ensDomain, identifier, web3, account)\\n    const url = this.normalizeUrl(identifier)\\n    $tw.ipfs.getLogger().info(\\n      `Set ENS domain content:\\n ${url}\\n to: \\\"${ensDomain}\\\"`\\n    )\\n    return true\\n  }\\n\\n  IpfsController.prototype.getIpfsIdentifier = function (value) {\\n    return this.ipfsBundle.getIpfsIdentifier(value)\\n  }\\n\\n  IpfsController.prototype.getCid = function (cid) {\\n    return this.ipfsBundle.getCid(cid)\\n  }\\n\\n  IpfsController.prototype.cidToBase58CidV0 = function (cid, log) {\\n    return this.ipfsBundle.cidToBase58CidV0(cid, log)\\n  }\\n\\n  IpfsController.prototype.cidToCidV1 = function (cid, protocol, log) {\\n    return this.ipfsBundle.cidToCidV1(cid, protocol, log)\\n  }\\n\\n  IpfsController.prototype.cidToLibp2pKeyCidV1 = function (cid, multibaseName, log) {\\n    return this.ipfsBundle.cidToLibp2pKeyCidV1(cid, multibaseName, log)\\n  }\\n\\n  IpfsController.prototype.isEnsOwner = async function (domain, web3, account) {\\n    return await this.ipfsBundle.isEnsOwner(domain, web3, account)\\n  }\\n\\n  IpfsController.prototype.personalRecover = async function (message, signature) {\\n    return await this.ipfsBundle.personalRecover(message, signature)\\n  }\\n\\n  IpfsController.prototype.personalSign = async function (message, provider) {\\n    return await this.ipfsBundle.personalSign(message, provider)\\n  }\\n\\n  IpfsController.prototype.decrypt = async function (text, provider) {\\n    return await this.ipfsBundle.decrypt(text, provider)\\n  }\\n\\n  IpfsController.prototype.getPublicEncryptionKey = async function (provider) {\\n    return await this.ipfsBundle.getPublicEncryptionKey(provider)\\n  }\\n\\n  IpfsController.prototype.getEthereumProvider = async function () {\\n    return await this.ipfsBundle.getEthereumProvider()\\n  }\\n\\n  IpfsController.prototype.getEnabledWeb3Provider = async function () {\\n    return await this.ipfsBundle.getEnabledWeb3Provider()\\n  }\\n\\n  IpfsController.prototype.getWeb3Provider = async function () {\\n    return await this.ipfsBundle.getWeb3Provider()\\n  }\\n\\n  IpfsController.prototype.getBlockExplorerRegistry = function () {\\n    return this.ipfsBundle.getBlockExplorerRegistry()\\n  }\\n\\n  IpfsController.prototype.getNetworkRegistry = function () {\\n    return this.ipfsBundle.getNetworkRegistry()\\n  }\\n\\n  IpfsController.prototype.getENSRegistry = function () {\\n    return this.ipfsBundle.getENSRegistry()\\n  }\\n\\n  IpfsController.prototype.loadErudaLibrary = async function () {\\n    await this.ipfsBundle.loadErudaLibrary()\\n  }\\n\\n  IpfsController.prototype.loadEthSigUtilLibrary = async function () {\\n    await this.ipfsBundle.loadEthSigUtilLibrary()\\n  }\\n\\n  IpfsController.prototype.deflate = function (str) {\\n    return this.ipfsBundle.deflate(str)\\n  }\\n\\n  IpfsController.prototype.inflate = function (b64) {\\n    return this.ipfsBundle.inflate(b64)\\n  }\\n\\n  exports.IpfsController = IpfsController\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-import.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-import.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-import.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Import\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const name = 'ipfs-import'\\n  const IPFS_IMPORT_TITLE = '$:/IpfsImport'\\n\\n  const tiddlyWikiType = 'text/vnd.tiddlywiki'\\n\\n  const local = '<a href=\\\"'\\n  const remote = '<a class=\\\"tc-tiddlylink-external\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"'\\n\\n  const alertFailed = function (strings, msg, key, field, parentField, parentUrl, parentTitle) {\\n    var space = strings[1]\\n    var endH1 = strings[2]\\n    var endL1 = strings[3]\\n    var from = strings[4]\\n    var endH2 = strings[5]\\n    var endL2 = strings[6]\\n    if (parentUrl.hostname === $tw.ipfs.getDocumentUrl().hostname && parentUrl.pathname === $tw.ipfs.getDocumentUrl().pathname) {\\n      return `${msg}${space}${remote}${key}${endH1}${field}${endL1}${parentField}${from}${local}${parentUrl}${endH2}${parentTitle}${endL2}`\\n    } else {\\n      return `${msg}${space}${remote}${key}${endH1}${field}${endL1}${parentField}${from}${remote}${parentUrl}${endH2}${parentTitle}${endL2}`\\n    }\\n  }\\n\\n  const alertFieldFailed = function (strings, msg, field, url, title) {\\n    var failed = strings[1]\\n    var from = strings[2]\\n    var endH = strings[3]\\n    var endL = strings[4]\\n    if (url.hostname === $tw.ipfs.getDocumentUrl().hostname && url.pathname === $tw.ipfs.getDocumentUrl().pathname) {\\n      return `${msg}${failed}${field}${from}${local}${url}${endH}${title}${endL}`\\n    } else {\\n      return `${msg}${failed}${field}${from}${remote}${url}${endH}${title}${endL}`\\n    }\\n  }\\n\\n  const alertConditionFailed = function (strings, msg, condition, key, title, parentUrl) {\\n    var space = strings[1]\\n    var from = strings[2]\\n    var endH1 = strings[3]\\n    var endL1 = strings[4]\\n    var endH2 = strings[5]\\n    var endL2 = strings[6]\\n    if (parentUrl.hostname === $tw.ipfs.getDocumentUrl().hostname && parentUrl.pathname === $tw.ipfs.getDocumentUrl().pathname) {\\n      return `${msg}${space}${condition}${from}${remote}${key}${endH1}${title}${endL1}${local}${parentUrl}${endH2}${title}${endL2}`\\n    } else {\\n      return `${msg}${space}${condition}${from}${remote}${key}${endH1}${title}${endL1}${remote}${parentUrl}${endH2}${title}${endL2}`\\n    }\\n  }\\n\\n  var IpfsImport = function () {}\\n\\n  IpfsImport.prototype.removeTiddlers = function (keys, title) {\\n    var removed = 0\\n    for (var key of this.loaded.keys()) {\\n      if (keys.indexOf(key) !== -1) {\\n        continue\\n      }\\n      const { imported, resolvedKey } = this.loaded.get(key)\\n      if (imported.delete(title)) {\\n        const msg = 'Remove:'\\n        const field = ''\\n        $tw.ipfs.getLogger().info(\\n          `${msg} ${field}\\\"${title}\\\"\\n ${resolvedKey}`\\n        )\\n        $tw.utils.alert(name, alertFieldFailed`${msg} ${field}${resolvedKey}\\\">${title}</a>`)\\n        removed += 1\\n      }\\n    }\\n    return removed\\n  }\\n\\n  IpfsImport.prototype.getKey = async function (value, base) {\\n    var ipfsCid = null\\n    var ipnsCid = null\\n    var key = null\\n    var normalizedUrl = null\\n    var resolvedUrl = null\\n    value = value !== undefined && value !== null && value.toString().trim() !== '' ? value.toString().trim() : null\\n    if (value == null) {\\n      return {\\n        key: null,\\n        resolvedUrl: null,\\n      }\\n    }\\n    var { ipfsCid, ipnsCid, normalizedUrl, resolvedUrl } = await $tw.ipfs.resolveUrl(value, true, false, true, base)\\n    if (normalizedUrl == null && resolvedUrl == null) {\\n      throw new Error(`Failed to resolve value: ${value}`)\\n    }\\n    if (normalizedUrl.hostname.endsWith('.eth') || normalizedUrl.hostname.endsWith('.eth.link')) {\\n      key = normalizedUrl.hostname\\n      if (normalizedUrl.hostname.endsWith('.eth.link')) {\\n        key = normalizedUrl.hostname.substring(0, normalizedUrl.hostname.indexOf('.link'))\\n      }\\n    } else if (ipfsCid !== null) {\\n      key = `ipfs://${ipfsCid}`\\n    } else if (ipnsCid !== null) {\\n      key = `ipns://${ipnsCid}`\\n    } else {\\n      key = normalizedUrl.toString()\\n    }\\n    return {\\n      key: key,\\n      resolvedUrl: resolvedUrl,\\n    }\\n  }\\n\\n  IpfsImport.prototype.isIpfs = async function (key) {\\n    key = key !== undefined && key !== null && key.trim() !== '' ? key.trim() : null\\n    if (key == null) {\\n      return false\\n    }\\n    const { ipfsCid, ipnsIdentifier } = $tw.ipfs.getIpfsIdentifier(key)\\n    if (key.endsWith('.eth') || ipfsCid !== null || ipnsIdentifier !== null) {\\n      return true\\n    }\\n    return false\\n  }\\n\\n  IpfsImport.prototype.import = async function (canonicalUri, importUri, tiddler) {\\n    canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n    importUri = importUri !== undefined && importUri !== null && importUri.toString().trim() !== '' ? importUri.toString().trim() : null\\n    var password = tiddler.fields._password\\n    password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n    const { type } = $tw.utils.getContentType(tiddler)\\n    this.loaded = new Map()\\n    this.notLoaded = []\\n    this.isEmpty = []\\n    this.resolved = new Map()\\n    this.notResolved = []\\n    this.merged = new Map()\\n    try {\\n      // Load and prepare imported tiddlers to be processed\\n      const host = $tw.ipfs.getUrl(`#${encodeURI(IPFS_IMPORT_TITLE)}`, $tw.ipfs.getDocumentUrl())\\n      if (canonicalUri !== null || importUri !== null) {\\n        if (importUri !== null) {\\n          await this.load(host, IPFS_IMPORT_TITLE, '_import_uri', importUri, password, true)\\n        }\\n        if (canonicalUri !== null) {\\n          await this.load(host, IPFS_IMPORT_TITLE, '_canonical_uri', canonicalUri, password, tiddlyWikiType === type)\\n        }\\n        // Process\\n        this.processImported()\\n        // Import\\n        var rootUri = importUri !== null ? importUri : canonicalUri\\n        var { key: rootUriKey } = await this.getKey(rootUri)\\n        this.importTiddlers(rootUri)\\n        // Deleted\\n        var deleted = new Map()\\n        var titles = $tw.wiki.getTiddlers({ includeSystem: true })\\n        for (var i = 0; i < titles.length; i++) {\\n          const title = titles[i] !== undefined && titles[i] !== null && titles[i].trim() !== '' ? titles[i].trim() : null\\n          if (title == null) {\\n            continue\\n          }\\n          const current = $tw.wiki.getTiddler(title)\\n          canonicalUri = current.fields._canonical_uri\\n          canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n          if (canonicalUri !== null) {\\n            var key = this.resolved.get(canonicalUri)\\n            if (key === undefined) {\\n              var { key } = await this.getKey(canonicalUri, rootUri)\\n            }\\n            if (key === rootUriKey && this.merged.get(title) === undefined && deleted.get(title) === undefined) {\\n              deleted.set(title, JSON.parse($tw.wiki.getTiddlerAsJson(title)))\\n            }\\n          }\\n          importUri = current.fields._import_uri\\n          importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n          if (importUri !== null) {\\n            var key = this.resolved.get(importUri)\\n            if (key === undefined) {\\n              var { key } = await this.getKey(importUri, rootUri)\\n            }\\n            if (key === rootUriKey && this.merged.get(title) === undefined && deleted.get(title) === undefined) {\\n              deleted.set(title, JSON.parse($tw.wiki.getTiddlerAsJson(title)))\\n            }\\n          }\\n        }\\n        return {\\n          merged: this.merged,\\n          deleted: deleted,\\n          loaded: this.loaded,\\n          isEmpty: this.isEmpty,\\n          notLoaded: this.notLoaded,\\n          notResolved: this.notResolved,\\n        }\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n    }\\n    return null\\n  }\\n\\n  IpfsImport.prototype.load = async function (parentUrl, parentTitle, field, url, password, load) {\\n    var loaded = 0\\n    var removed = 0\\n    var key = null\\n    var resolvedUrl = null\\n    if (url !== null && this.notResolved.indexOf(url) === -1 && this.resolved.get(url) === undefined) {\\n      var { key, resolvedUrl } = await this.getKey(url, parentUrl)\\n      this.resolved.set(url, key)\\n    }\\n    if (load && key !== null && resolvedUrl !== null && this.notLoaded.indexOf(key) === -1 && this.loaded.get(key) === undefined) {\\n      const { loaded: loadedAdded, removed: loadedRemoved } = await this.loadResource(parentUrl, parentTitle, field, url, key, resolvedUrl, password)\\n      loaded = loadedAdded\\n      removed = loadedRemoved\\n    }\\n    return {\\n      loaded: loaded,\\n      removed: removed,\\n    }\\n  }\\n\\n  /**\\n   * https://stackoverflow.com/questions/15458876/check-if-a-string-is-html-or-not/15458987\\n   */\\n  IpfsImport.prototype.isHTML = function (text) {\\n    /*eslint max-len:\\\"off\\\"*/\\n    return /<(br|basefont|hr|input|source|frame|param|area|meta|!--|col|link|option|base|img|wbr|!DOCTYPE).*?>|<(a|abbr|acronym|address|applet|article|aside|audio|b|bdi|bdo|big|blockquote|body|button|canvas|caption|center|cite|code|colgroup|command|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|footer|form|frameset|head|header|hgroup|h1|h2|h3|h4|h5|h6|html|i|iframe|ins|kbd|keygen|label|legend|li|map|mark|menu|meter|nav|noframes|noscript|object|ol|optgroup|output|p|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|small|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video).*?<\\\\/\\\\2>/i.test(\\n      text\\n    )\\n  }\\n\\n  IpfsImport.prototype.loadResource = async function (parentUrl, parentTitle, parentField, url, key, resolvedKey, password) {\\n    var loaded = 0\\n    var removed = 0\\n    var content = null\\n    var imported = new Map()\\n    var tiddlers = null\\n    const creationFields = $tw.wiki.getCreationFields()\\n    try {\\n      // Load\\n      content = await $tw.ipfs.loadToUtf8(resolvedKey, password)\\n      // HTML\\n      if (this.isHTML(content)) {\\n        content = $tw.wiki.deserializeTiddlers('text/html', content, creationFields)\\n        if ($tw.utils.isArray(content) && content.length === 1 && content[0].text && $tw.ipfs.isJson(content[0].text)) {\\n          tiddlers = Object.values(JSON.parse(content[0].text))\\n        } else {\\n          tiddlers = content\\n        }\\n      } else {\\n        if ($tw.ipfs.isJson(content)) {\\n          tiddlers = $tw.wiki.deserializeTiddlers('application/json', content, creationFields)\\n        } else {\\n          tiddlers = $tw.wiki.deserializeTiddlers('application/x-tiddler', content, creationFields)\\n        }\\n      }\\n      // Loaded\\n      if (tiddlers !== undefined && tiddlers !== null) {\\n        this.loaded.set(key, {\\n          imported: imported,\\n          resolvedKey: resolvedKey,\\n          url: url,\\n        })\\n        for (var i in tiddlers) {\\n          const tiddler = tiddlers[i]\\n          var title = tiddler.title\\n          if (title === undefined || title == null || title.trim() === '') {\\n            const msg = 'Ignore Unknown:'\\n            const field = 'Title'\\n            $tw.ipfs.getLogger().info(\\n              `${msg} \\\"${field}\\\"\\n ${resolvedKey}\\nfrom \\\"${parentField}\\\", \\\"${parentTitle}\\\"\\n ${parentUrl}`\\n            )\\n            $tw.utils.alert(name, alertFailed`${msg} ${resolvedKey}\\\">${field}</a>, from \\\"${parentField}\\\", ${parentUrl}\\\">${parentTitle}</a>`)\\n            removed += 1\\n            continue\\n          }\\n          if (imported.get(title) !== undefined) {\\n            const msg = 'Ignore Duplicate:'\\n            $tw.ipfs.getLogger().info(\\n              `${msg} \\\"${title}\\\"\\n ${resolvedKey}\\nfrom \\\"${parentField}\\\", \\\"${parentTitle}\\\"\\n ${parentUrl}`\\n            )\\n            $tw.utils.alert(name, alertFailed`${msg} ${resolvedKey}\\\">${title}</a>, from \\\"${parentField}\\\", ${parentUrl}\\\">${parentTitle}</a>`)\\n            removed += 1\\n            continue\\n          }\\n          var type = tiddler.type\\n          if (type === undefined || type == null) {\\n            type = tiddlyWikiType\\n          }\\n          var info = $tw.config.contentTypeInfo[type]\\n          if (info === undefined || info == null) {\\n            const msg = 'Unknown:'\\n            const field = 'Content-Type'\\n            $tw.ipfs.getLogger().info(\\n              `${msg} \\\"${field}\\\": \\\"${title}\\\"\\n ${resolvedKey}`\\n            )\\n            $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\": ${resolvedKey}\\\">${title}</a>`)\\n            // Default\\n            type = tiddlyWikiType\\n            info = $tw.config.contentTypeInfo[type]\\n          }\\n          tiddler.type = type\\n          // Next\\n          var canonicalUri = tiddler._canonical_uri\\n          canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n          tiddler._canonical_uri = canonicalUri\\n          var importUri = tiddler._import_uri\\n          importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n          tiddler._import_uri = importUri\\n          if (canonicalUri !== null || importUri !== null) {\\n            password = tiddler._password\\n            password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n            if (importUri !== null) {\\n              const { loaded: loadedAdded, removed: loadedRemoved } = await this.load(resolvedKey, title, '_import_uri', importUri, password, true)\\n              loaded += loadedAdded\\n              removed += loadedRemoved\\n            }\\n            if (canonicalUri !== null) {\\n              const { loaded: loadedAdded, removed: loadedRemoved } = await this.load(resolvedKey, title, '_canonical_uri', canonicalUri, password, tiddlyWikiType === tiddler.type)\\n              loaded += loadedAdded\\n              removed += loadedRemoved\\n            }\\n          }\\n          imported.set(title, tiddler)\\n          loaded += 1\\n        }\\n      }\\n      if (imported.size === 0) {\\n        this.isEmpty.push(key)\\n        const msg = 'Empty Import:'\\n        const field = 'Resource'\\n        $tw.ipfs.getLogger().info(\\n          `${msg} \\\"${field}\\\"\\n ${resolvedKey}\\nfrom \\\"${parentField}\\\", \\\"${parentTitle}\\\"\\n ${parentUrl}`\\n        )\\n        $tw.utils.alert(name, alertFailed`${msg} ${resolvedKey}\\\">${field}</a> from \\\"${parentField}\\\", ${parentUrl}\\\">${parentTitle}</a>`)\\n      }\\n    } catch (error) {\\n      this.notLoaded.push(key)\\n      const msg = 'Failed to Import:'\\n      const field = 'Resource'\\n      $tw.ipfs.getLogger().info(\\n        `${msg} \\\"${field}\\\"\\n ${resolvedKey}\\nfrom \\\"${parentField}\\\", \\\"${parentTitle}\\\"\\n ${parentUrl}`\\n      )\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, alertFailed`${msg} ${resolvedKey}\\\">${field}</a> from \\\"${parentField}\\\", ${parentUrl}\\\">${parentTitle}</a>`)\\n    }\\n    return {\\n      loaded: loaded,\\n      removed: removed,\\n    }\\n  }\\n\\n  IpfsImport.prototype.performImport = function (toBeAdded, toBeUpdated, toBeDeleted) {\\n    // New and Updated\\n    for (var [title, merged] of this.merged.entries()) {\\n      if (toBeAdded.indexOf(title) || toBeUpdated.indexOf(title) !== -1) {\\n        $tw.wiki.addTiddler(merged)\\n      }\\n    }\\n    // Deleted\\n    for (var i = 0; i < toBeDeleted.length; i++) {\\n      $tw.wiki.deleteTiddler(toBeDeleted[i])\\n    }\\n  }\\n\\n  IpfsImport.prototype.processImported = function () {\\n    var processed = 0\\n    var removed = 0\\n    var processedTitles = []\\n    for (var key of this.loaded.keys()) {\\n      const { imported, resolvedKey } = this.loaded.get(key)\\n      for (var title of imported.keys()) {\\n        if (processedTitles.indexOf(title) !== -1) {\\n          continue\\n        }\\n        const keys = []\\n        const tiddler = imported.get(title)\\n        var type = tiddler.type\\n        var canonicalUri = tiddler._canonical_uri\\n        canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n        var importUri = tiddler._import_uri\\n        importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n        if (canonicalUri == null && importUri == null) {\\n          keys.push(key)\\n        } else if (canonicalUri == null && importUri !== null) {\\n          const msg = 'Missing:'\\n          const field = '_canonical_uri'\\n          $tw.ipfs.getLogger().info(\\n            `${msg} \\\"${field}\\\" from ${title}\\\"\\n ${resolvedKey}`\\n          )\\n          $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\" from ${resolvedKey}\\\">${title}</a>`)\\n        } else {\\n          var canonicalKey = null\\n          if (canonicalUri !== null && this.notResolved.indexOf(canonicalUri) === -1) {\\n            canonicalKey = this.resolved.get(canonicalUri)\\n          }\\n          if (canonicalKey !== undefined && canonicalKey !== null) {\\n            if (key === canonicalKey) {\\n              const msg = 'Cycle:'\\n              const field = '_canonical_uri'\\n              $tw.ipfs.getLogger().info(\\n                `${msg} \\\"${field}\\\" from ${title}\\\"\\n ${resolvedKey}`\\n              )\\n              $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\" from ${resolvedKey}\\\">${title}</a>`)\\n            } else if (this.processCanonicalKey(keys, resolvedKey, title, canonicalKey, type)) {\\n              var importKey = null\\n              if (importUri !== null && this.notResolved.indexOf(importUri) === -1) {\\n                importKey = this.resolved.get(importUri)\\n              }\\n              if (importKey === undefined || importKey == null) {\\n                keys.push(key)\\n              } else {\\n                if (canonicalKey === importKey) {\\n                  const msg = 'Matching:'\\n                  const field = '\\\"_canonical_uri\\\" and \\\"_import_uri\\\"'\\n                  $tw.ipfs.getLogger().info(\\n                    `${msg} ${field} from \\\"${title}\\\"\\n ${resolvedKey}`\\n                  )\\n                  $tw.utils.alert(name, alertFieldFailed`${msg} ${field} from ${resolvedKey}\\\">${title}</a>`)\\n                } else if (key === importKey) {\\n                  const msg = 'Cycle:'\\n                  const field = '_import_uri'\\n                  $tw.ipfs.getLogger().info(\\n                    `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${resolvedKey}`\\n                  )\\n                  $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\" from ${resolvedKey}\\\">${title}</a>`)\\n                } else {\\n                  keys.push(key)\\n                  this.processImportKey(keys, resolvedKey, title, canonicalKey, importKey)\\n                }\\n              }\\n            }\\n          }\\n        }\\n        processed += keys.length\\n        removed += this.removeTiddlers(keys, title)\\n        processedTitles.push(title)\\n      }\\n    }\\n    return {\\n      processed: processed,\\n      removed: removed,\\n    }\\n  }\\n\\n  IpfsImport.prototype.processCanonicalKey = function (keys, parentResolvedKey, title, canonicalKey, type) {\\n    if (tiddlyWikiType !== type) {\\n      keys.push(canonicalKey)\\n      return true\\n    }\\n    if (this.notLoaded.indexOf(canonicalKey) !== -1) {\\n      return false\\n    }\\n    if (this.loaded.get(canonicalKey) === undefined) {\\n      return false\\n    }\\n    const { imported, resolvedKey } = this.loaded.get(canonicalKey)\\n    if (imported === undefined) {\\n      return false\\n    }\\n    const tiddler = imported.get(title)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    var canonicalUri = tiddler._canonical_uri\\n    canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n    if (canonicalUri !== null) {\\n      const msg = 'Inconsistency:'\\n      const field = '_canonical_uri'\\n      $tw.ipfs.getLogger().info(\\n        `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${resolvedKey}\\nand ${parentResolvedKey}`\\n      )\\n      $tw.utils.alert(name, alertConditionFailed`${msg} \\\"${field}\\\" from ${resolvedKey}\\\">${title}</a> and ${parentResolvedKey}\\\">${title}</a>`)\\n      return false\\n    }\\n    var importUri = tiddler._import_uri\\n    importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n    if (importUri !== null) {\\n      const msg = 'Inconsistency:'\\n      const field = '_import_uri'\\n      $tw.ipfs.getLogger().info(\\n        `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${resolvedKey}\\nand ${parentResolvedKey}`\\n      )\\n      $tw.utils.alert(name, alertConditionFailed`${msg} \\\"${field}\\\" from ${resolvedKey}\\\">${title}</a> and ${parentResolvedKey}\\\">${title}</a>`)\\n      return false\\n    }\\n    keys.push(canonicalKey)\\n    return true\\n  }\\n\\n  IpfsImport.prototype.processImportKey = function (keys, parentResolvedKey, title, canonicalKey, importKey) {\\n    if (this.notLoaded.indexOf(importKey) !== -1) {\\n      return\\n    }\\n    if (this.loaded.get(importKey) === undefined) {\\n      return\\n    }\\n    const { imported, resolvedKey: importResolvedKey } = this.loaded.get(importKey)\\n    if (imported === undefined) {\\n      return\\n    }\\n    const tiddler = imported.get(title)\\n    if (tiddler === undefined) {\\n      return\\n    }\\n    var targetCanonicalUri = tiddler._canonical_uri\\n    targetCanonicalUri = targetCanonicalUri !== undefined && targetCanonicalUri !== null && targetCanonicalUri.trim() === '' ? targetCanonicalUri.trim() : null\\n    var targetCanonicalKey = null\\n    if (targetCanonicalUri !== null && this.notResolved.indexOf(targetCanonicalUri) === -1) {\\n      targetCanonicalKey = this.resolved.get(targetCanonicalUri)\\n    }\\n    if (targetCanonicalKey !== undefined && targetCanonicalKey !== null && canonicalKey !== targetCanonicalKey) {\\n      const msg = 'Inconsistency:'\\n      const field = '_canonical_uri'\\n      $tw.ipfs.getLogger().info(\\n        `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${importResolvedKey}\\nand ${parentResolvedKey}`\\n      )\\n      $tw.utils.alert(name, alertConditionFailed`${msg} \\\"${field}\\\" from ${importResolvedKey}\\\">${title}</a> and ${parentResolvedKey}\\\">${title}</a>`)\\n      return\\n    }\\n    var nextImportUri = tiddler._import_uri\\n    nextImportUri = nextImportUri !== undefined && nextImportUri !== null && nextImportUri.trim() !== '' ? nextImportUri.trim() : null\\n    if (targetCanonicalUri == null && nextImportUri !== null) {\\n      const msg = 'Missing:'\\n      const field = '_canonical_uri'\\n      $tw.ipfs.getLogger().info(\\n        `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${importResolvedKey}`\\n      )\\n      $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\" from ${importResolvedKey}\\\">${title}</a>`)\\n      return\\n    }\\n    if (nextImportUri == null) {\\n      keys.push(importKey)\\n    } else {\\n      var nextImportKey = null\\n      if (nextImportUri !== null && this.notResolved.indexOf(nextImportUri) === -1) {\\n        nextImportKey = this.resolved.get(nextImportUri)\\n      }\\n      if (nextImportKey !== undefined && nextImportKey !== null) {\\n        if (canonicalKey === nextImportKey) {\\n          const msg = 'Matching:'\\n          const field = '\\\"_canonical_uri\\\" and \\\"_import_uri\\\"'\\n          $tw.ipfs.getLogger().info(\\n            `${msg} ${field} from \\\"${title}\\\"\\n ${importResolvedKey}`\\n          )\\n          $tw.utils.alert(name, alertFieldFailed`${msg} ${field} from ${importResolvedKey}\\\">${title}</a>`)\\n        } else if (keys.indexOf(nextImportKey) !== -1) {\\n          const msg = 'Cycle:'\\n          const field = '_import_uri'\\n          $tw.ipfs.getLogger().info(\\n            `${msg} \\\"${field}\\\" from \\\"${title}\\\"\\n ${importResolvedKey}`\\n          )\\n          $tw.utils.alert(name, alertFieldFailed`${msg} \\\"${field}\\\" from ${importResolvedKey}\\\">${title}</a>`)\\n        } else {\\n          keys.push(importKey)\\n          this.processImportKey(keys, importResolvedKey, title, canonicalKey, nextImportKey)\\n        }\\n      }\\n    }\\n  }\\n\\n  IpfsImport.prototype.importTiddlers = function (rootUri) {\\n    var processedTitles = []\\n    for (var key of this.loaded.keys()) {\\n      const { imported, url } = this.loaded.get(key)\\n      for (var title of imported.keys()) {\\n        if (processedTitles.indexOf(title) !== -1) {\\n          continue\\n        }\\n        const tiddler = imported.get(title)\\n        var type = tiddler.type\\n        var canonicalUri = tiddler._canonical_uri\\n        canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n        var importUri = tiddler._import_uri\\n        importUri = importUri === undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n        var processed\\n        if (importUri !== null) {\\n          processed = this.importTiddler(title, importUri)\\n        }\\n        if (processed === false && canonicalUri !== null && tiddlyWikiType === type) {\\n          this.importTiddler(title, canonicalUri)\\n        }\\n        if (this.mergeTiddler(title, url)) {\\n          const merged = this.merged.get(title)\\n          var type = merged.type\\n          if (tiddlyWikiType !== type) {\\n            if (rootUri.startsWith('blob:') === false) {\\n              merged._import_uri = rootUri\\n            }\\n          } else {\\n            var canonicalUri = merged._canonical_uri\\n            if (canonicalUri === undefined || canonicalUri == null) {\\n              if (url !== rootUri) {\\n                merged._canonical_uri = this.resolved.get(url)\\n                if (rootUri.startsWith('blob:') === false) {\\n                  merged._import_uri = rootUri\\n                }\\n              } else {\\n                if (rootUri.startsWith('blob:') === false) {\\n                  merged._canonical_uri = rootUri\\n                }\\n              }\\n            } else {\\n              merged._canonical_uri = this.resolved.get(canonicalUri)\\n              if (canonicalUri !== rootUri && rootUri.startsWith('blob:') === false) {\\n                merged._import_uri = rootUri\\n              }\\n            }\\n          }\\n        }\\n        processedTitles.push(title)\\n      }\\n    }\\n  }\\n\\n  IpfsImport.prototype.importTiddler = function (title, uri) {\\n    const key = this.resolved.get(uri)\\n    if (key === undefined) {\\n      return false\\n    }\\n    if (this.loaded.get(key) === undefined) {\\n      return false\\n    }\\n    const { imported } = this.loaded.get(key)\\n    if (imported === undefined) {\\n      return false\\n    }\\n    const tiddler = imported.get(title)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    var type = tiddler.type\\n    var importUri = tiddler._import_uri\\n    importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n    var canonicalUri = tiddler._canonical_uri\\n    canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n    var processed = false\\n    if (importUri !== null) {\\n      processed = this.importTiddler(title, importUri)\\n    }\\n    if (processed === false && canonicalUri !== null && tiddlyWikiType === type) {\\n      this.importTiddler(title, canonicalUri)\\n    }\\n    return this.mergeTiddler(title, uri)\\n  }\\n\\n  IpfsImport.prototype.mergeTiddler = function (title, uri) {\\n    title = title !== undefined && title !== null && title.trim() !== '' ? title.trim() : null\\n    if (title == null) {\\n      return false\\n    }\\n    const key = this.resolved.get(uri)\\n    if (key === undefined) {\\n      return false\\n    }\\n    if (this.loaded.get(key) === undefined) {\\n      return false\\n    }\\n    const { imported } = this.loaded.get(key)\\n    if (imported === undefined) {\\n      return false\\n    }\\n    const tiddler = imported.get(title)\\n    if (tiddler === undefined) {\\n      return false\\n    }\\n    // Retrieve target host Tiddler\\n    var currentTiddler = $tw.wiki.getTiddler(title)\\n    // Retrieve or prepare merged content\\n    var merged = this.merged.get(title)\\n    if (merged === undefined) {\\n      merged = {}\\n      this.merged.set(title, merged)\\n    }\\n    // Tags\\n    var tags = tiddler.tags !== undefined ? tiddler.tags : ''\\n    // Fields\\n    var hasModified = false\\n    for (var field in tiddler) {\\n      // Discard\\n      if (field === 'tags') {\\n        continue\\n      }\\n      if (field === 'modified') {\\n        hasModified = true\\n      }\\n      // Unknown from leaf to top, we keep the top modified field\\n      if (merged[field] === undefined || merged[field] == null || field === '_canonical_uri' || field === '_import_uri' || field === 'modified') {\\n        merged[field] = tiddler[field]\\n      }\\n    }\\n    if (hasModified === false) {\\n      merged.modified = new Date()\\n    }\\n    // Merge current Tiddler Tags\\n    if (currentTiddler !== undefined && currentTiddler !== null) {\\n      const currentTags = (currentTiddler.fields.tags || []).slice(0)\\n      for (var i = 0; i < currentTags.length; i++) {\\n        const currentTag = currentTags[i]\\n        if (tags.includes(currentTag) === false) {\\n          tags = `${tags} [[${currentTag}]]`\\n        }\\n      }\\n    }\\n    // Merge Tags\\n    if (merged.tags !== undefined && merged.tags !== null) {\\n      const mergedTags = $tw.utils.parseStringArray(merged.tags, false)\\n      for (var i = 0; i < mergedTags.length; i++) {\\n        const mergedTag = mergedTags[i]\\n        if (tags.includes(mergedTag) === false) {\\n          tags = `${tags} [[${mergedTag}]]`\\n        }\\n      }\\n    }\\n    // IPFS tag\\n    if (this.isIpfs(key) && tags.includes('$:/isIpfs') === false) {\\n      tags = `${tags} $:/isIpfs`\\n    }\\n    // Imported tag\\n    if (tags.includes('$:/isImported') === false) {\\n      tags = `${tags} $:/isImported`\\n    }\\n    // Processed tags\\n    merged.tags = tags\\n    // Processed\\n    return true\\n  }\\n\\n  exports.IpfsImport = IpfsImport\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-tiddler.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-tiddler.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-tiddler.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Tiddler\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const IpfsImport = require('$:/plugins/ipfs/ipfs-import.js').IpfsImport\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-tiddler'\\n\\n  var IpfsTiddler = function () {\\n    this.once = false\\n  }\\n\\n  IpfsTiddler.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return\\n    }\\n    const self = this\\n    // Events\\n    $tw.wiki.addEventListener('change', function (changes) {\\n      return self.handleChangeEvent(changes)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-pin', function (event) {\\n      return self.handleIpfsPin(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-ipfs-unpin', function (event) {\\n      return self.handleIpfsUnpin(event)\\n    })\\n    $tw.rootWidget.addEventListener('tm-refresh-tiddler', function (event) {\\n      return self.handleRefreshTiddler(event)\\n    })\\n    // Hooks\\n    $tw.hooks.addHook('th-deleting-tiddler', async function (tiddler) {\\n      return await self.handleDeleteTiddler(tiddler)\\n    })\\n    $tw.hooks.addHook('th-saving-tiddler', async function (tiddler) {\\n      return await self.handleSaveTiddler(tiddler)\\n    })\\n    // Init once\\n    this.once = true\\n  }\\n\\n  IpfsTiddler.prototype.handleChangeEvent = function (changes) {\\n    // Gateway preference\\n    const api = changes['$:/ipfs/saver/api']\\n    if (api !== undefined && api.modified) {\\n      $tw.ipfs.getLogger().info(`IPFS API: ${$tw.ipfs.getIpfsApiUrl()}`)\\n    }\\n    // Gateway preference\\n    const gateway = changes['$:/ipfs/saver/gateway']\\n    if (gateway !== undefined && gateway.modified) {\\n      const base = $tw.ipfs.getIpfsBaseUrl()\\n      if ($tw.utils.getIpfsUrlPolicy() === 'gateway') {\\n        $tw.ipfs.getLogger().info(`Gateway Policy: ${base}`)\\n      }\\n    }\\n    // Policy preference\\n    const policy = changes['$:/ipfs/saver/policy']\\n    if (policy !== undefined && policy.modified) {\\n      const base = $tw.ipfs.getIpfsBaseUrl()\\n      if ($tw.utils.getIpfsUrlPolicy() === 'origin') {\\n        $tw.ipfs.getLogger().info(`Origin Policy: ${base}`)\\n      } else {\\n        $tw.ipfs.getLogger().info(`Gateway Policy: ${base}`)\\n      }\\n    }\\n    // Pin preference\\n    const pin = changes['$:/ipfs/saver/pin']\\n    if (pin !== undefined && pin.modified) {\\n      if ($tw.utils.getIpfsPin()) {\\n        $tw.ipfs.getLogger().info('Pin current IPFS content...')\\n      } else {\\n        $tw.ipfs.getLogger().info('Do not pin current IPFS content...')\\n      }\\n    }\\n    // Unpin preference\\n    const unpin = changes['$:/ipfs/saver/unpin']\\n    if (unpin !== undefined && unpin.modified) {\\n      if ($tw.utils.getIpfsUnpin()) {\\n        $tw.ipfs.getLogger().info('Unpin previous IPFS content...')\\n      } else {\\n        $tw.ipfs.getLogger().info('Do not unpin previous IPFS content...')\\n      }\\n    }\\n    // Verbose preference\\n    const verbose = changes['$:/ipfs/saver/verbose']\\n    if (verbose !== undefined && verbose.modified) {\\n      if (window.log !== undefined && window.log !== null) {\\n        if ($tw.utils.getIpfsVerbose()) {\\n          window.log.setLevel('info', false)\\n        } else {\\n          window.log.setLevel('warn', false)\\n        }\\n      }\\n    }\\n  }\\n\\n  IpfsTiddler.prototype.handleIpfsPin = function (event) {\\n    const title = event.tiddlerTitle\\n    const tiddler = $tw.wiki.getTiddler(title)\\n    // Tiddler\\n    if (tiddler !== undefined && title !== '$:/plugins/tiddlywiki/menubar/items/pagecontrols') {\\n      if (event.param) {\\n        // Tiddler\\n        for (var field in tiddler.fields) {\\n          if ($tw.utils.isTiddlyWikiReservedWord(field)) {\\n            continue\\n          }\\n          var value = tiddler.getFieldString(field)\\n          value = value !== undefined && value !== null && value.trim() !== '' ? value.trim() : null\\n          if (value !== null) {\\n            this.ipfsPin(value, field)\\n          }\\n        }\\n        return true\\n      }\\n      return false\\n    }\\n    // Wiki\\n    this.ipfsPin($tw.ipfs.getDocumentUrl().toString(), 'Wiki')\\n    return true\\n  }\\n\\n  IpfsTiddler.prototype.ipfsPin = function (value, field) {\\n    $tw.ipfs\\n      .resolveUrl(value, $tw.utils.getIpnsResolve(), false, true)\\n      .then(data => {\\n        const { ipfsCid, ipnsCid, resolvedUrl } = data\\n        if (ipfsCid != null || ipnsCid !== null) {\\n          $tw.ipfs\\n            .pinToIpfs(decodeURI(resolvedUrl.pathname))\\n            .then(pin => {\\n              if (pin !== undefined && pin !== null) {\\n                $tw.ipfs.removeFromPinUnpin(resolvedUrl.pathname)\\n                if (field !== undefined && field !== null) {\\n                  $tw.ipfs.getLogger().info(\\n                    `Pinned: \\\"${field}\\\"\\n ${decodeURI(resolvedUrl.pathname)}`\\n                  )\\n                  $tw.utils.alert(name, `Pinned: '${field}'`)\\n                }\\n              }\\n            })\\n            .catch(error => {\\n              $tw.ipfs.getLogger().error(error)\\n              $tw.utils.alert(name, error.message)\\n            })\\n        }\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n  }\\n\\n  IpfsTiddler.prototype.handleIpfsUnpin = async function (event) {\\n    const title = event.tiddlerTitle\\n    const tiddler = $tw.wiki.getTiddler(title)\\n    if (tiddler !== undefined && title !== '$:/plugins/tiddlywiki/menubar/items/pagecontrols') {\\n      const { type, info } = $tw.utils.getContentType(tiddler)\\n      if (event.param) {\\n        // Tiddler\\n        for (var field in tiddler.fields) {\\n          if ($tw.utils.isTiddlyWikiReservedWord(field)) {\\n            continue\\n          }\\n          var value = tiddler.getFieldString(field)\\n          value = value !== undefined && value !== null && value.trim() !== '' ? value.trim() : null\\n          if (value !== null) {\\n            if (info.encoding !== 'base64' && type !== 'image/svg+xml') {\\n              if (field === '_canonical_uri' || field === '_import_uri') {\\n                continue\\n              }\\n            }\\n            this.ipfsUnpin(value, field)\\n          }\\n        }\\n        return true\\n      }\\n      return false\\n    }\\n    // Wiki\\n    this.ipfsUnpin($tw.ipfs.getDocumentUrl().toString(), 'Wiki')\\n    return true\\n  }\\n\\n  IpfsTiddler.prototype.ipfsUnpin = function (value, field) {\\n    field = field !== undefined && field !== null && field.trim() !== '' ? field.trim() : null\\n    $tw.ipfs\\n      .resolveUrl(value, $tw.utils.getIpnsResolve(), false, true)\\n      .then(data => {\\n        const { ipfsCid, ipnsCid, resolvedUrl } = data\\n        if (ipfsCid != null || ipnsCid !== null) {\\n          $tw.ipfs\\n            .unpinFromIpfs(decodeURI(resolvedUrl.pathname))\\n            .then(unpin => {\\n              if (unpin !== undefined && unpin !== null) {\\n                $tw.ipfs.removeFromPinUnpin(resolvedUrl.pathname)\\n                if (field !== undefined && field !== null) {\\n                  $tw.ipfs.getLogger().info(\\n                    `Unpinned: \\\"${field}\\n ${decodeURI(resolvedUrl.pathname)}`\\n                  )\\n                  $tw.utils.alert(name, `Unpinned: '${field}'`)\\n                }\\n              }\\n            })\\n            .catch(error => {\\n              $tw.ipfs.getLogger().error(error)\\n              $tw.utils.alert(name, error.message)\\n            })\\n        }\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n  }\\n\\n  IpfsTiddler.prototype.handleDeleteTiddler = async function (tiddler) {\\n    try {\\n      for (var field in tiddler.fields) {\\n        var ipfsCid = null\\n        var ipnsCid = null\\n        var resolvedUrl = null\\n        const value = tiddler.getFieldString(field)\\n        var { ipfsCid, ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(value, false, false, true)\\n        if (ipfsCid == null && ipnsCid == null) {\\n          continue\\n        }\\n        $tw.ipfs.addToUnpin(resolvedUrl !== null ? resolvedUrl.pathname : null)\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(name, error.message)\\n    }\\n    return tiddler\\n  }\\n\\n  IpfsTiddler.prototype.handleRefreshTiddler = function (event) {\\n    const title = event.tiddlerTitle\\n    const tiddler = $tw.wiki.getTiddler(title)\\n    // Ignore\\n    if (tiddler === undefined || title === '$:/plugins/tiddlywiki/menubar/items/pagecontrols') {\\n      return false\\n    }\\n    if (tiddler.fields.type === 'application/json' && tiddler.hasField('plugin-type')) {\\n      return false\\n    }\\n    // Process\\n    var canonicalUri = tiddler.fields._canonical_uri\\n    canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n    var importUri = tiddler.fields._import_uri\\n    importUri = importUri !== undefined && importUri !== null && importUri.trim() !== '' ? importUri.trim() : null\\n    // Reload\\n    if (canonicalUri !== null && importUri == null) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: 'text', value: '' }],\\n      })\\n      $tw.wiki.addTiddler(updatedTiddler)\\n      return true\\n    }\\n    // Import\\n    if (canonicalUri !== null || importUri !== null) {\\n      const ipfsImport = new IpfsImport()\\n      ipfsImport\\n        .import(canonicalUri, importUri, tiddler)\\n        .then(data => {\\n          if (data !== undefined && data !== null) {\\n            if (data.merged.size > 0 || data.deleted.size > 0) {\\n              const navigator = $tw.utils.locateNavigatorWidget($tw.pageWidgetNode)\\n              if (navigator !== undefined && navigator !== null) {\\n                navigator.dispatchEvent({\\n                  type: 'tm-ipfs-import-tiddlers',\\n                  param: data,\\n                })\\n              }\\n            }\\n          }\\n        })\\n        .catch(error => {\\n          $tw.ipfs.getLogger().error(error)\\n          $tw.utils.alert(name, error.message)\\n        })\\n      return true\\n    }\\n    // Refresh\\n    $tw.wiki.clearCache(title)\\n    const changedTiddler = $tw.utils.getChangedTiddler(title)\\n    $tw.rootWidget.refresh(changedTiddler)\\n    return true\\n  }\\n\\n  IpfsTiddler.prototype.handleImportFile = async function (info) {\\n    const dummy = new $tw.Tiddler({\\n      title: $tw.wiki.generateNewTitle('Untitled'),\\n      type: info.type,\\n    })\\n    var type = null\\n    if (info !== undefined && info !== null && info.type !== undefined && info.type !== null) {\\n      type = info.type\\n    }\\n    if (type == null) {\\n      return false\\n    }\\n    if (type !== 'text/html' && type !== 'application/json' && type !== 'application/x-tiddler') {\\n      return false\\n    }\\n    try {\\n      const ipfsImport = new IpfsImport()\\n      const url = URL.createObjectURL(info.file)\\n      try {\\n        const data = await ipfsImport.import(null, url, dummy)\\n        if (data === undefined || data == null) {\\n          return false\\n        }\\n        if (data.merged.size > 0 || data.deleted.size > 0) {\\n          info.callback(data)\\n          return true\\n        }\\n      } catch (error) {\\n        $tw.ipfs.getLogger().error(error)\\n      } finally {\\n        URL.revokeObjectURL(url)\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n    }\\n    return false\\n  }\\n\\n  IpfsTiddler.prototype.handleSaveTiddler = async function (tiddler) {\\n    const oldTiddler = $tw.wiki.getTiddler(tiddler.fields.title)\\n    const { type, info } = $tw.utils.getContentType(tiddler)\\n    var password = tiddler.fields._password\\n    password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n    // Prepare\\n    var updatedTiddler = new $tw.Tiddler(tiddler)\\n    if (oldTiddler !== undefined && oldTiddler !== null) {\\n      // Title update\\n      if ($tw.utils.getWrappedDirectory() && tiddler.fields.title !== oldTiddler.fields.title) {\\n        // Process\\n        if (tiddler.fields._canonical_uri) {\\n        }\\n      }\\n      // Process deleted fields\\n      for (var field in oldTiddler.fields) {\\n        // Not a reserved keyword\\n        if ($tw.utils.isTiddlyWikiReservedWord(field)) {\\n          continue\\n        }\\n        // Updated\\n        const discard = tiddler.fields[field]\\n        if (discard && tiddler.getFieldString(field)) {\\n          continue\\n        }\\n        // Old value\\n        var oldResolvedUrl = null\\n        var oldValue = oldTiddler.getFieldString(field)\\n        try {\\n          var { resolvedUrl: oldResolvedUrl } = await $tw.ipfs.resolveUrl(oldValue, $tw.utils.getIpnsResolve(), false, true)\\n        } catch (error) {\\n          $tw.ipfs.getLogger().error(error)\\n          $tw.utils.alert(name, error.message)\\n          $tw.wiki.addTiddler(updatedTiddler)\\n          return updatedTiddler\\n        }\\n        // Deleted\\n        oldResolvedUrl = oldResolvedUrl !== undefined && oldResolvedUrl !== null && oldResolvedUrl.toString().trim() !== '' ? oldResolvedUrl.toString().trim() : null\\n        if (oldResolvedUrl !== null && field === '_canonical_uri') {\\n          var addTags = []\\n          var msg = 'Embed'\\n          var data = tiddler.fields.text\\n          try {\\n            if (info.encoding === 'base64') {\\n              addTags = ['$:/isAttachment', '$:/isEmbedded']\\n              msg = `${msg} attachment '${type}':`\\n              data = await $tw.ipfs.loadToBase64(oldResolvedUrl, password)\\n            } else if (type === 'image/svg+xml') {\\n              addTags = ['$:/isAttachment', '$:/isEmbedded']\\n              msg = `${msg} attachment '${type}':`\\n              data = await $tw.ipfs.loadToUtf8(oldResolvedUrl, password)\\n            } else if (oldTiddler.fields.text && oldTiddler.fields.text !== '') {\\n              msg = `${msg} '${type}':`\\n              data = oldTiddler.fields.text\\n            } else {\\n              msg = `${msg} '${type}':`\\n              data = await $tw.ipfs.loadToUtf8(oldResolvedUrl, password)\\n            }\\n            if (tiddler.fields.type === 'application/json' && tiddler.hasField('plugin-type')) {\\n              const innerData = JSON.parse(data)\\n              if (innerData.text !== undefined && innerData.text !== null && innerData.text !== '') {\\n                updatedTiddler = $tw.utils.updateTiddler({\\n                  tiddler: updatedTiddler,\\n                  addTags: addTags,\\n                  fields: [{ key: 'text', value: innerData.text }],\\n                })\\n                $tw.wiki.setPluginInfo(tiddler.fields.title, JSON.parse(innerData.text))\\n              }\\n            } else {\\n              updatedTiddler = $tw.utils.updateTiddler({\\n                tiddler: updatedTiddler,\\n                addTags: addTags,\\n                fields: [{ key: 'text', value: data }],\\n              })\\n            }\\n            $tw.ipfs.getLogger().info(\\n              `${msg} ${data.length}\\n ${oldResolvedUrl}`\\n            )\\n          } catch (error) {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(name, error.message)\\n            $tw.wiki.addTiddler(updatedTiddler)\\n            return updatedTiddler\\n          }\\n        }\\n        $tw.ipfs.addToUnpin(oldResolvedUrl !== null ? oldResolvedUrl.pathname : null)\\n      }\\n    }\\n    // Process exports\\n    var oldCanonicalUri = oldTiddler !== undefined && oldTiddler !== null ? oldTiddler.fields._canonical_uri : null\\n    oldCanonicalUri = oldCanonicalUri !== undefined && oldCanonicalUri !== null && oldCanonicalUri.trim() !== '' ? oldCanonicalUri.trim() : null\\n    var canonicalUri = tiddler.fields._canonical_uri\\n    canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() !== '' ? canonicalUri.trim() : null\\n    const { ipnsCid, normalizedUrl } = await $tw.ipfs.resolveUrl(canonicalUri, false, false, true)\\n    // Process new canonical_uri\\n    if (oldCanonicalUri == null && ipnsCid !== null && canonicalUri !== null && tiddler.fields.text !== '') {\\n      const { info } = $tw.utils.getContentType(tiddler)\\n      const content = await $tw.ipfs.processContent(tiddler, tiddler.fields.text, info.encoding, type)\\n      var filename = '/'\\n      var incomingName = null\\n      if ($tw.utils.getWrappedDirectory()) {\\n        try {\\n          var path = null\\n          const pathname = normalizedUrl.pathname.slice(`/ipns/${ipnsCid}`.length)\\n          if (pathname !== undefined && pathname !== null && pathname.trim() !== '') {\\n            path = pathname.substring(0, pathname.lastIndexOf('/'))\\n            if (path !== undefined && path !== null && path.trim() !== '') {\\n              const incoming = pathname.split('/').pop()\\n              if (incoming !== undefined && incoming !== null && incoming.trim() !== '') {\\n                incomingName = decodeURI(incoming)\\n                filename = `${path}/${incomingName}`\\n              }\\n            }\\n          }\\n          if (filename === '/') {\\n            const url = $tw.ipfs.getUrl(tiddler.fields.title, $tw.ipfs.getIpfsBaseUrl())\\n            if (path === undefined || path == null || path.trim() === '') {\\n              path = url.pathname.substring(0, url.pathname.lastIndexOf('/'))\\n            }\\n            if (path !== undefined && path !== null && path.trim() !== '') {\\n              const incoming = url.pathname.split('/').pop()\\n              if (incoming !== undefined && incoming !== null && incoming.trim() !== '') {\\n                incomingName = decodeURI(incoming)\\n                filename = `${path}/${incomingName}`\\n              }\\n            }\\n          }\\n        } catch (error) {\\n          // Ignore\\n        }\\n        if (filename === '/') {\\n          incomingName = $tw.ipfs.filenamify(tiddler.fields.title)\\n          filename = `${filename}${incomingName}`\\n        }\\n        if (filename.endsWith(info.extension) === false) {\\n          incomingName = `${incomingName}${info.extension}`\\n          filename = `${filename}${info.extension}`\\n        }\\n      }\\n      // Beware, async...\\n      const fields = [{ key: 'text', value: '' }]\\n      $tw.utils.exportToIpfs(tiddler, content, fields, '_canonical_uri', filename, incomingName)\\n    } else {\\n      updatedTiddler = await $tw.utils.processUpdatedTiddler(tiddler, oldTiddler, updatedTiddler)\\n    }\\n    $tw.wiki.addTiddler(updatedTiddler)\\n    return updatedTiddler\\n  }\\n\\n  exports.IpfsTiddler = IpfsTiddler\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-wrapper.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-wrapper.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-wrapper.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Wrapper\\n\\n\\\\*/\\n/*jslint node:true,browser:true*/\\n/*global $tw:false*/\\n'use strict'\\n\\nconst cidAnalyser = 'https://cid.ipfs.io/#'\\n\\nconst ipfsKeyword = 'ipfs'\\nconst ipnsKeyword = 'ipns'\\n\\n/*eslint no-unused-vars:\\\"off\\\"*/\\nconst name = 'ipfs-wrapper'\\n\\nvar IpfsWrapper = function (ipfsBundle) {\\n  this.ipfsBundle = ipfsBundle\\n  this.ipfsLibrary = ipfsBundle.ipfsLibrary\\n  this.ipfsUrl = ipfsBundle.ipfsUrl\\n}\\n\\nIpfsWrapper.prototype.getLogger = function () {\\n  return this.ipfsBundle.getLogger()\\n}\\n\\nIpfsWrapper.prototype.getWindowIpfsClient = async function () {\\n  // IPFS Companion\\n  try {\\n    const policy = await this.ipfsLibrary.getWindowIpfs()\\n    if (policy !== null && policy.ipfs !== null && policy.provider !== null) {\\n      return policy\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to retrieve IPFS Companion...')\\n}\\n\\nIpfsWrapper.prototype.getHttpIpfsClient = async function (url) {\\n  // HTTP Client\\n  try {\\n    const { ipfs, provider } = await this.ipfsLibrary.getHttpIpfs(url)\\n    if (ipfs !== null && provider !== null) {\\n      return {\\n        ipfs: ipfs,\\n        provider: provider,\\n      }\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to retrieve an IPFS HTTP provider...')\\n}\\n\\nIpfsWrapper.prototype.getIpfsClient = async function (url) {\\n  try {\\n    var policy = null\\n    const ipfsProvider = $tw.utils.getIpfsProvider()\\n    if (ipfsProvider === 'window') {\\n      policy = await this.ipfsLibrary.getWindowIpfs()\\n    } else if (ipfsProvider === 'http') {\\n      policy = await this.ipfsLibrary.getHttpIpfs(url)\\n    } else {\\n      policy = await this.ipfsLibrary.getDefaultIpfs(url)\\n    }\\n    if (policy !== null && policy.ipfs !== null && policy.provider !== null) {\\n      return policy\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to retrieve an IPFS provider...')\\n}\\n\\nIpfsWrapper.prototype.getIpnsIdentifier = async function (ipfs, identifier, resolveIpnsKey, base, path, ipnsKey) {\\n  identifier = identifier !== undefined && identifier !== null && identifier.toString().trim() !== '' ? identifier.toString().trim() : null\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.trim() !== '' ? ipnsKey.trim() : null\\n  if (identifier == null && ipnsKey == null) {\\n    throw new Error('Undefined IPNS identifiers...')\\n  }\\n  path = path !== undefined && path !== null && path.trim() !== '' ? path.trim() : ''\\n  var ipnsCid = null\\n  if (this.ipfsBundle.getCid(identifier) !== null) {\\n    ipnsCid = identifier\\n  }\\n  var found = false\\n  var keys = null\\n  if (resolveIpnsKey || ipnsCid == null) {\\n    try {\\n      keys = await this.getIpnsKeys(ipfs)\\n    } catch (error) {\\n      this.getLogger().error(error)\\n      $tw.utils.alert(name, 'Unable to resolve IPNS keys...')\\n    }\\n  }\\n  // Do our best\\n  if (keys !== null && keys !== undefined && Array.isArray(keys)) {\\n    if (ipnsKey !== null && identifier !== null) {\\n      for (var index = 0; index < keys.length; index++) {\\n        const cidv1b32 = this.ipfsBundle.cidToLibp2pKeyCidV1(keys[index].id, 'base32', false).toString()\\n        const cidv1b36 = this.ipfsBundle.cidToLibp2pKeyCidV1(keys[index].id, 'base36', false).toString()\\n        if ((keys[index].id === identifier || cidv1b32 === identifier || cidv1b36 === identifier) && keys[index].name === ipnsKey) {\\n          ipnsCid = keys[index].id\\n          found = true\\n          break\\n        }\\n      }\\n    } else if (ipnsKey !== null) {\\n      for (var index = 0; index < keys.length; index++) {\\n        if (keys[index].name === ipnsKey) {\\n          ipnsCid = keys[index].id\\n          found = true\\n          break\\n        }\\n      }\\n    } else {\\n      for (var index = 0; index < keys.length; index++) {\\n        const cidv1b32 = this.ipfsBundle.cidToLibp2pKeyCidV1(keys[index].id, 'base32', false).toString()\\n        const cidv1b36 = this.ipfsBundle.cidToLibp2pKeyCidV1(keys[index].id, 'base36', false).toString()\\n        if (keys[index].id === identifier || cidv1b32 === identifier || cidv1b36 === identifier || keys[index].name === identifier) {\\n          ipnsCid = keys[index].id\\n          ipnsKey = keys[index].name\\n          found = true\\n          break\\n        }\\n      }\\n    }\\n    if (found === false) {\\n      if (this.ipfsBundle.getCid(identifier) == null) {\\n        throw new Error('Unknown IPNS identifier...')\\n      }\\n    }\\n  }\\n  // Path\\n  var normalizedUrl = null\\n  const startPath = `/${ipnsKeyword}/${ipnsCid}`\\n  if (path.startsWith(startPath)) {\\n    path = path.slice(startPath.length)\\n  }\\n  path = `${startPath}${path}`\\n  // Lets build an url, the resolver will do the final check, we cannot do more here\\n  if (found) {\\n    const cidv0 = this.ipfsBundle.cidToBase58CidV0(ipnsCid, false).toString()\\n    const cidv1b32 = this.ipfsBundle.cidToLibp2pKeyCidV1(cidv0, 'base32', false).toString()\\n    ipnsCid = this.ipfsBundle.cidToLibp2pKeyCidV1(cidv1b32, 'base36', false)\\n    normalizedUrl = this.ipfsUrl.normalizeUrl(path, base)\\n    this.getLogger().info(\\n      `Fetched IPNS key: '${ipnsKey}':\\n'dag-pb' \\\"cidv0\\\" (base58btc): ${cidAnalyser}${cidv0}\\nto 'libp2p-key' \\\"cidv1\\\" (base32): ${cidAnalyser}${cidv1b32}\\nto 'libp2p-key' \\\"cidv1\\\" (base36): ${cidAnalyser}${ipnsCid}\\n${normalizedUrl}`\\n    )\\n  } else {\\n    normalizedUrl = this.ipfsUrl.normalizeUrl(path, base)\\n    this.getLogger().info(\\n      `Unable to Fetch IPNS identifiers, default to\\n${normalizedUrl}`\\n    )\\n  }\\n  return {\\n    ipnsCid: ipnsCid !== null ? ipnsCid.toString() : null,\\n    ipnsKey: ipnsKey,\\n    normalizedUrl: normalizedUrl,\\n  }\\n}\\n\\nIpfsWrapper.prototype.generateIpnsCid = async function (ipfs, ipnsKey) {\\n  try {\\n    var ipnsCid = await this.ipfsLibrary.genKey(ipfs, ipnsKey)\\n    ipnsCid = this.ipfsBundle.cidToLibp2pKeyCidV1(ipnsCid, 'base36', true).toString()\\n    const url = this.ipfsUrl.normalizeUrl(`/${ipnsKeyword}/${ipnsCid}`)\\n    this.getLogger().info(\\n      `Generated IPNS cid with IPNS key '${ipnsKey}'\\n${url}`\\n    )\\n    return ipnsCid\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error(`Failed to generate IPNS cid with IPNS key '${ipnsKey}'...`)\\n}\\n\\nIpfsWrapper.prototype.removeIpnsKey = async function (ipfs, ipnsKey) {\\n  try {\\n    const ipnsCid = await this.ipfsLibrary.rmKey(ipfs, ipnsKey)\\n    this.getLogger().info(`Removed IPNS key: ${ipnsKey}`)\\n    return ipnsCid\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to remove an IPNS Key...')\\n}\\n\\nIpfsWrapper.prototype.renameIpnsKey = async function (ipfs, oldIpnsKey, newIpnsKey) {\\n  try {\\n    var { ipnsCid, was, now } = await this.ipfsLibrary.keyRename(ipfs, oldIpnsKey, newIpnsKey)\\n    ipnsCid = this.ipfsBundle.cidToLibp2pKeyCidV1(ipnsCid, 'base36', true).toString()\\n    this.getLogger().info(`Renamed IPNS key: ${was} with ${now}`)\\n    return {\\n      ipnsCid: ipnsCid,\\n      ipnsKey: now,\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to rename an IPNS key...')\\n}\\n\\nIpfsWrapper.prototype.getIpnsKeys = async function (ipfs) {\\n  try {\\n    this.getLogger().info('Fetch IPNS keys...')\\n    const keyList = await this.ipfsLibrary.keyList(ipfs)\\n    return keyList\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to fetch IPNS keys...')\\n}\\n\\nIpfsWrapper.prototype.fetchFromIpfs = async function (ipfs, cid) {\\n  cid = cid !== undefined && cid !== null && cid.toString().trim() !== '' ? cid.toString().trim() : null\\n  if (cid == null) {\\n    throw new Error('Undefined IPNS identifier...')\\n  }\\n  try {\\n    const pathname = `/${ipfsKeyword}/${cid}`\\n    const url = this.ipfsUrl.normalizeUrl(pathname)\\n    this.getLogger().info(`Fetch:\\n${url}`)\\n    const fetched = await this.ipfsLibrary.cat(ipfs, pathname)\\n    return fetched\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to fetch from IPFS...')\\n}\\n\\nIpfsWrapper.prototype.resolveIpfs = async function (ipfs, value, timeout) {\\n  value = value !== undefined && value !== null && value.toString().trim() !== '' ? value.toString().trim() : null\\n  if (value == null) {\\n    throw new Error('Undefined value...')\\n  }\\n  var cid = null\\n  var remainderPath = null\\n  try {\\n    var { cid, remainderPath } = await this.ipfsBundle.resolveIpfs(ipfs, value, timeout)\\n    if (cid !== null) {\\n      const url = this.ipfsUrl.normalizeUrl(`/ipfs/${cid}${remainderPath}`)\\n      this.getLogger().info(`Resolved IPFS path:\\n  ${url}`)\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n    $tw.utils.alert(name, 'Unable to resolve IPFS path...')\\n  }\\n  return {\\n    cid: cid,\\n    remainderPath: remainderPath,\\n  }\\n}\\n\\nIpfsWrapper.prototype.resolveIpfsContainer = async function (ipfs, value, timeout) {\\n  value = value !== undefined && value !== null && value.toString().trim() !== '' ? value.toString().trim() : null\\n  if (value == null) {\\n    throw new Error('Undefined value...')\\n  }\\n  var cid = null\\n  try {\\n    cid = await this.ipfsBundle.resolveIpfsContainer(ipfs, value, timeout)\\n    if (cid !== null) {\\n      const url = this.ipfsUrl.normalizeUrl(`/ipfs/${cid}`)\\n      this.getLogger().info(`Resolved IPFS container:\\n  ${url}`)\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  return cid\\n}\\n\\nIpfsWrapper.prototype.fetchDagNode = async function (ipfs, cid, timeout) {\\n  cid = cid !== undefined && cid !== null && cid.toString().trim() !== '' ? cid.toString().trim() : null\\n  if (cid == null) {\\n    throw new Error('Undefined IPFS cid...')\\n  }\\n  const options = {\\n    localResolve: false,\\n  }\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null\\n  if (timeout !== null) {\\n    options.timeout = timeout\\n  }\\n  var node = null\\n  try {\\n    node = this.ipfsBundle.dagGet(ipfs, cid, options)\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  return node\\n}\\n\\nIpfsWrapper.prototype.resolveIpnsKey = async function (ipfs, ipnsKey, timeout) {\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.toString().trim() !== '' ? ipnsKey.toString().trim() : null\\n  if (ipnsKey == null) {\\n    throw new Error('Undefined IPNS key...')\\n  }\\n  const options = {\\n    nocache: false,\\n    recursive: true,\\n  }\\n  timeout = timeout !== undefined && timeout !== null ? timeout : null\\n  if (timeout !== null) {\\n    options.timeout = timeout\\n  }\\n  // The IPNS address you want to resolve.\\n  // eg: const addr = '/ipns/ipfs.io'\\n  const pathname = `/${ipnsKeyword}/${ipnsKey}`\\n  try {\\n    const url = this.ipfsUrl.normalizeUrl(pathname)\\n    const resolved = await this.ipfsLibrary.nameResolve(ipfs, pathname, options)\\n    const { ipfsCid } = this.ipfsBundle.getIpfsIdentifier(resolved)\\n    if (ipfsCid !== null) {\\n      const parsed = this.ipfsUrl.normalizeUrl(resolved)\\n      this.getLogger().info(\\n        `Resolved IPNS:\\n${url}\\n${parsed}`\\n      )\\n      return ipfsCid\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to resolve an IPNS key...')\\n}\\n\\nIpfsWrapper.prototype.addContentToIpfs = async function (ipfs, content, ipfsPath) {\\n  try {\\n    if (content === undefined || content == null) {\\n      throw new Error('Undefined content...')\\n    }\\n    ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.trim() !== '' ? ipfsPath.trim() : '/'\\n    const upload = []\\n    upload.push({\\n      path: `${ipfsPath}`,\\n      content: content,\\n    })\\n    const options = {\\n      chunker: 'rabin-262144-524288-1048576',\\n      cidVersion: 0,\\n      hashAlg: 'sha2-256',\\n      pin: false,\\n      rawLeaves: false,\\n      wrapWithDirectory: true,\\n    }\\n    if (ipfsPath === '/') {\\n      options.wrapWithDirectory = false\\n    }\\n    var cid = null\\n    var parentCid = null\\n    var parentSize = null\\n    const added = await this.ipfsLibrary.addAll(ipfs, upload, options)\\n    for (var [cid, details] of added.entries()) {\\n      if (added.size === 1 || details.path === '') {\\n        parentCid = cid\\n        parentSize = details.size\\n      }\\n    }\\n    const url = this.ipfsUrl.normalizeUrl(`/${ipfsKeyword}/${parentCid}${ipfsPath}`)\\n    this.getLogger().info(`Added: ${parentSize} bytes,\\n${url}`)\\n    return {\\n      cid: parentCid,\\n      path: `/ipfs/${parentCid}${ipfsPath}`,\\n      size: parentSize,\\n      uri: `ipfs://${parentCid}${ipfsPath}`,\\n    }\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to add content to IPFS...')\\n}\\n\\nIpfsWrapper.prototype.publishIpnsKey = async function (ipfs, ipfsCid, ipnsCid, ipnsKey, options) {\\n  ipfsCid = ipfsCid !== undefined && ipfsCid !== null && ipfsCid.toString().trim() !== '' ? ipfsCid.toString().trim() : null\\n  if (ipfsCid == null) {\\n    throw new Error('Undefined IPFS cid...')\\n  }\\n  ipnsCid = ipnsCid !== undefined && ipnsCid !== null && ipnsCid.trim() !== '' ? ipnsCid.trim() : null\\n  if (ipnsCid == null) {\\n    throw new Error('Undefined IPNS cid...')\\n  }\\n  ipnsKey = ipnsKey !== undefined && ipnsKey !== null && ipnsKey.toString().trim() !== '' ? ipnsKey.toString().trim() : null\\n  if (ipnsKey == null) {\\n    throw new Error('Undefined IPNS key...')\\n  }\\n  // Path\\n  try {\\n    // Publish\\n    const result = await this.ipfsBundle.namePublish(ipfs, ipnsKey, ipfsCid, options)\\n    const ipnsUrl = this.ipfsUrl.normalizeUrl(`/${ipnsKeyword}/${ipnsCid}`)\\n    const ipfsUrl = this.ipfsUrl.normalizeUrl(`/${ipfsKeyword}/${ipfsCid}`)\\n    this.getLogger().info(\\n      `Published IPNS key: ${ipnsKey}\\n${ipnsUrl}\\n${ipfsUrl}`\\n    )\\n    return result\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to publish an IPNS key...')\\n}\\n\\nIpfsWrapper.prototype.pinToIpfs = async function (ipfs, ipfsPath, recursive) {\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...')\\n  }\\n  try {\\n    const pinned = await this.ipfsLibrary.pinAdd(ipfs, ipfsPath, {\\n      recursive: recursive,\\n    })\\n    const url = this.ipfsUrl.normalizeUrl(ipfsPath)\\n    this.getLogger().info(\\n      `Pinned:\\n${url}`\\n    )\\n    return pinned\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to pin...')\\n}\\n\\nIpfsWrapper.prototype.unpinFromIpfs = async function (ipfs, ipfsPath, recursive) {\\n  ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.toString().trim() !== '' ? ipfsPath.toString().trim() : null\\n  if (ipfsPath == null) {\\n    throw new Error('Undefined IPFS path...')\\n  }\\n  try {\\n    const unpinned = await this.ipfsLibrary.pinRm(ipfs, ipfsPath, {\\n      recursive: recursive,\\n    })\\n    const url = this.ipfsUrl.normalizeUrl(ipfsPath)\\n    this.getLogger().info(\\n      `Unpinned:\\n${url}`\\n    )\\n    return unpinned\\n  } catch (error) {\\n    this.getLogger().error(error)\\n  }\\n  throw new Error('Failed to unpin...')\\n}\\n\\nexports.IpfsWrapper = IpfsWrapper\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/core/modules/macros/infosaver.js\": {\n            \"title\": \"$:/core/modules/macros/infosaver.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/macros/infosaver.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  exports.name = 'infosaver'\\n\\n  exports.params = [{ name: 'tiddler' }]\\n\\n  exports.run = function (tiddler) {\\n    return $tw.saverHandler.getSaver(tiddler).module.info.name\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/macros/ipfs-console-tooltip.js\": {\n            \"title\": \"$:/plugins/ipfs/macros/ipfs-console-tooltip.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/macros/ipfs-console-tooltip.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  exports.name = 'ipfs-console-tooltip'\\n\\n  exports.params = []\\n\\n  exports.run = function () {\\n    var tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Console/Mobile/Hint')\\n    if (typeof window.eruda === 'undefined') {\\n      tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Console/Mobile/Load')\\n    } else if ($tw.ipfs.ipfsAction !== undefined) {\\n      if ($tw.ipfs.ipfsAction.console) {\\n        tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Console/Mobile/Hide')\\n      } else {\\n        tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Console/Mobile/Show')\\n      }\\n    }\\n    return tiddler.fields.text\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/macros/ipfs-edition-build.js\": {\n            \"title\": \"$:/plugins/ipfs/macros/ipfs-edition-build.js\",\n            \"text\": \"/*\\\\\\ntitle:  $:/plugins/ipfs/macros/ipfs-edition-build.js\\ntype: application/javascript\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.name = 'ipfs-edition-build'\\n\\n  exports.params = []\\n\\n  exports.run = function () {\\n    if ($tw && $tw.wiki) {\\n      const build = $tw.wiki.getTiddler('$:/ipfs/edition-build')\\n      if (build !== undefined && build !== null) {\\n        return build.fields.build\\n      }\\n      if ($tw.utils && $tw.utils.getIpfsEditionBuild) {\\n        return $tw.utils.getIpfsEditionBuild()\\n      }\\n    }\\n    return ''\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/macros/ipfs-edition-version.js\": {\n            \"title\": \"$:/plugins/ipfs/macros/ipfs-edition-version.js\",\n            \"text\": \"/*\\\\\\ntitle:  $:/plugins/ipfs/macros/ipfs-edition-version.js\\ntype: application/javascript\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.name = 'ipfs-edition-version'\\n\\n  exports.params = []\\n\\n  exports.run = function () {\\n    if ($tw && $tw.wiki) {\\n      const build = $tw.wiki.getTiddler('$:/ipfs/edition-build')\\n      if (build !== undefined && build !== null) {\\n        return build.fields.version\\n      }\\n      if ($tw.utils && $tw.utils.getIpfsEditionVersion) {\\n        return $tw.utils.getIpfsEditionVersion()\\n      }\\n    }\\n    return ''\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/macros/ipfs-encryption-tooltip.js\": {\n            \"title\": \"$:/plugins/ipfs/macros/ipfs-encryption-tooltip.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/macros/ipfs-encryption-tooltip.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  exports.name = 'ipfs-encryption-tooltip'\\n\\n  exports.params = []\\n\\n  exports.run = function () {\\n    var encrypted = $tw.wiki.getTiddler('$:/isEncrypted')\\n    if (encrypted !== undefined && encrypted !== null && encrypted.fields.text === 'yes') {\\n      encrypted = true\\n    } else {\\n      encrypted = false\\n    }\\n    var tiddler\\n    var encryption = $tw.wiki.getTiddler('$:/config/encryption')\\n    if (encrypted) {\\n      tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Encryption/ClearEncryptionPublicKey/Hint')\\n      if (encryption.fields.text === 'standford') {\\n        tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Encryption/ClearPassword/Hint')\\n      }\\n    } else {\\n      tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Encryption/SetEncryptionPublicKey/Hint')\\n      if (encryption.fields.text === 'standford') {\\n        tiddler = $tw.wiki.getTiddler('$:/language/Buttons/Encryption/SetPassword/Hint')\\n      }\\n    }\\n    return tiddler.fields.text\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/core/modules/macros/jsontiddler.js\": {\n            \"title\": \"$:/core/modules/macros/jsontiddler.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/macros/jsontiddler.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output a single tiddler to JSON\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.name = 'jsontiddler'\\n\\n  exports.params = [{ name: 'title' }]\\n\\n  exports.run = function (title) {\\n    title = title || this.getVariable('currentTiddler')\\n    var tiddler = !!title && this.wiki.getTiddler(title)\\n    var fields = {}\\n    if (tiddler) {\\n      for (var field in tiddler.fields) {\\n        fields[field] = tiddler.getFieldString(field)\\n      }\\n    }\\n    var content = JSON.stringify(fields, null, $tw.config.preferences.jsonSpaces)\\n    var compress = $tw.wiki.getTiddler('$:/isCompressed')\\n    compress = compress !== undefined ? compress.fields.text === 'yes' : false\\n    if (compress) {\\n      content = { compressed: $tw.compress.deflate(content) }\\n    }\\n    var encrypt = $tw.wiki.getTiddler('$:/isEncrypted')\\n    encrypt = encrypt !== undefined ? encrypt.fields.text === 'yes' : false\\n    if (encrypt) {\\n      content.compressed = $tw.crypto.encrypt(compress ? content.compressed : content)\\n      if ($tw.crypto.hasEncryptionPublicKey()) {\\n        content.keccak256 = $tw.crypto.keccak256(compress ? content.compressed : content)\\n      }\\n    }\\n    if (compress || encrypt) {\\n      content = JSON.stringify(content)\\n    }\\n    return content\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/core/modules/macros/jsontiddlers.js\": {\n            \"title\": \"$:/core/modules/macros/jsontiddlers.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/macros/jsontiddlers.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output tiddlers matching a filter to JSON\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  exports.name = 'jsontiddlers'\\n\\n  exports.params = [{ name: 'filter' }, { name: 'spaces' }]\\n\\n  exports.run = function (filter, spaces) {\\n    var content = this.wiki.getTiddlersAsJson(filter, $tw.utils.parseInt(spaces))\\n    var compress = $tw.wiki.getTiddler('$:/isCompressed')\\n    compress = compress !== undefined ? compress.fields.text === 'yes' : false\\n    if (compress) {\\n      content = { compressed: $tw.compress.deflate(content) }\\n    }\\n    var encrypt = $tw.wiki.getTiddler('$:/isEncrypted')\\n    encrypt = encrypt !== undefined ? encrypt.fields.text === 'yes' : false\\n    if (encrypt) {\\n      content.compressed = $tw.crypto.encrypt(compress ? content.compressed : content)\\n      if ($tw.crypto.hasEncryptionPublicKey()) {\\n        content.keccak256 = $tw.crypto.keccak256(compress ? content.compressed : content)\\n      }\\n    }\\n    if (compress || encrypt) {\\n      content = JSON.stringify(content)\\n    }\\n    return content\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/macros/version-url.js\": {\n            \"title\": \"$:/plugins/ipfs/macros/version-url.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/macros/version-url.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  exports.name = 'version-url'\\n\\n  exports.params = [{ name: 'title' }, { name: 'ipath' }]\\n\\n  exports.run = function (title, ipath) {\\n    title = title !== undefined && title !== null && title.trim() !== '' ? title.trim() : null\\n    if (title === null) {\\n      return ''\\n    }\\n    ipath = ipath !== undefined && ipath !== null && ipath.trim() !== '' ? ipath.trim() : ''\\n    const rootBuild = $tw !== undefined && $tw !== null ? $tw.wiki.getTiddler('$:/ipfs/build/ipns/cid') : null\\n    const tiddler = $tw !== undefined && $tw !== null ? $tw.wiki.getTiddler(title) : null\\n    if (rootBuild !== undefined && rootBuild !== null && tiddler !== undefined && tiddler !== null) {\\n      if (ipath === 'editions') {\\n        return `${rootBuild.fields.text}/editions/${tiddler.fields.name}/${tiddler.fields.build}/`\\n      } else {\\n        return `${rootBuild.fields.text}/${ipath}/${tiddler.fields.build}/`\\n      }\\n    }\\n    return ''\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/core/modules/parsers/audioparser.js\": {\n            \"title\": \"$:/core/modules/parsers/audioparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/audioparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe audio parser parses an audio tiddler into an embeddable HTML element\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  var name = 'ipfs-audioparser'\\n\\n  var AudioParser = function (type, text, options) {\\n    var value = `data:${type};base64,`\\n    var element = {\\n      type: 'element',\\n      tag: 'audio',\\n      attributes: {\\n        controls: { type: 'string', value: 'controls' },\\n        style: { type: 'string', value: 'width: 100%; object-fit: contain' },\\n      },\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToBase64(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.src = {\\n                      type: 'string',\\n                      value: `${value}${data}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        element.attributes.src = { type: 'string', value: `${value}${text}` }\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['audio/ogg'] = AudioParser\\n  exports['audio/mpeg'] = AudioParser\\n  exports['audio/mp3'] = AudioParser\\n  exports['audio/mp4'] = AudioParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/binaryparser.js\": {\n            \"title\": \"$:/core/modules/parsers/binaryparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/binaryparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe binary parser parses a binary tiddler into a warning message and download link\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n  const name = 'ipfs-binaryparser'\\n\\n  var BINARY_WARNING_MESSAGE = '$:/core/ui/BinaryWarning'\\n  var EXPORT_BUTTON_IMAGE = '$:/core/images/export-button'\\n\\n  var BinaryParser = function (type, text, options) {\\n    var self = this\\n    var value = `data:${type};base64,`\\n    // Transclude the binary data tiddler warning message\\n    var warn = {\\n      type: 'element',\\n      tag: 'p',\\n      children: [\\n        {\\n          type: 'transclude',\\n          attributes: {\\n            tiddler: { type: 'string', value: BINARY_WARNING_MESSAGE },\\n          },\\n        },\\n      ],\\n    }\\n    // Create download link based on binary tiddler title\\n    var link = {\\n      type: 'element',\\n      tag: 'a',\\n      attributes: {\\n        title: { type: 'indirect', textReference: '!!title' },\\n        download: { type: 'indirect', textReference: '!!title' },\\n      },\\n      children: [\\n        {\\n          type: 'transclude',\\n          attributes: {\\n            tiddler: { type: 'string', value: EXPORT_BUTTON_IMAGE },\\n          },\\n        },\\n      ],\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToBase64(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    link.attributes.href = {\\n                      type: 'string',\\n                      value: `${value}${data}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        link.attributes.href = {\\n          type: 'string',\\n          value: `${value}${text}`,\\n        }\\n      }\\n    }\\n    // Combine warning message and download link in a div\\n    var element = {\\n      type: 'element',\\n      tag: 'div',\\n      attributes: {\\n        class: { type: 'string', value: 'tc-binary-warning' },\\n      },\\n      children: [warn, link],\\n    }\\n    this.tree = [element]\\n  }\\n\\n  exports['application/octet-stream'] = BinaryParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/csvparser.js\": {\n            \"title\": \"$:/core/modules/parsers/csvparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/csvparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe CSV text parser processes CSV files into a table wrapped in a scrollable widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-cvsparser'\\n\\n  var CsvParser = function (type, text, options) {\\n    var self = this\\n    // Table framework\\n    this.tree = [\\n      {\\n        type: 'scrollable',\\n        children: [\\n          {\\n            type: 'element',\\n            tag: 'table',\\n            children: [\\n              {\\n                type: 'element',\\n                tag: 'tbody',\\n                children: [],\\n              },\\n            ],\\n            attributes: {\\n              class: { type: 'string', value: 'tc-csv-table' },\\n            },\\n          },\\n        ],\\n      },\\n    ]\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToUtf8(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    self.split(data)\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        this.split(text)\\n      }\\n    }\\n  }\\n\\n  CsvParser.prototype.split = function (text) {\\n    // Split the text into lines\\n    var lines = text.split(/\\\\r?\\\\n/gm)\\n    var tag = 'th'\\n    for (var line = 0; line < lines.length; line++) {\\n      var lineText = lines[line]\\n      if (lineText) {\\n        var row = {\\n          type: 'element',\\n          tag: 'tr',\\n          children: [],\\n        }\\n        var columns = lineText.split(',')\\n        for (var column = 0; column < columns.length; column++) {\\n          row.children.push({\\n            type: 'element',\\n            tag: tag,\\n            children: [\\n              {\\n                type: 'text',\\n                text: columns[column],\\n              },\\n            ],\\n          })\\n        }\\n        tag = 'td'\\n        this.tree[0].children[0].children[0].children.push(row)\\n      }\\n    }\\n  }\\n  exports['text/csv'] = CsvParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/htmlparser.js\": {\n            \"title\": \"$:/core/modules/parsers/htmlparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/htmlparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe HTML parser displays text as raw HTML\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-htmlparser'\\n\\n  var HtmlParser = function (type, text, options) {\\n    var src = ''\\n    var self = this\\n    var value = 'data:text/html;charset=utf-8,'\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              self.tree[0].attributes.src = { type: 'string', value: resolvedUrl.href }\\n              var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n              $tw.rootWidget.refresh(parsedTiddler)\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        src = `${value}${encodeURIComponent(text)}`\\n      }\\n    }\\n    this.tree = [\\n      {\\n        type: 'element',\\n        tag: 'iframe',\\n        attributes: {\\n          src: { type: 'string', value: src },\\n        },\\n      },\\n    ]\\n    if ($tw.wiki.getTiddlerText('$:/config/HtmlParser/DisableSandbox', 'no') !== 'yes') {\\n      var tokens = $tw.wiki.getTiddlerText('$:/config/HtmlParser/SandboxTokens', '')\\n      if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n        var tiddlerTokens = options.tiddler.getFieldString('_sandbox_tokens')\\n        tiddlerTokens = tiddlerTokens !== undefined && tiddlerTokens !== null && tiddlerTokens.trim() !== '' ? tiddlerTokens.trim() : null\\n        if (tiddlerTokens !== null) {\\n          tokens = tiddlerTokens\\n        }\\n      }\\n      this.tree[0].attributes.sandbox = { type: 'string', value: tokens }\\n    }\\n  }\\n\\n  exports['text/html'] = HtmlParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/imageparser.js\": {\n            \"title\": \"$:/core/modules/parsers/imageparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/imageparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe image parser parses an image into an embeddable HTML element\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  var name = 'ipfs-imageparser'\\n\\n  var ImageParser = function (type, text, options) {\\n    var value = `data:${type};base64,`\\n    var element = {\\n      type: 'element',\\n      tag: 'img',\\n      attributes: {},\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToBase64(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.src = {\\n                      type: 'string',\\n                      value: `${value}${data}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        element.attributes.src = { type: 'string', value: `${value}${text}` }\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['image/gif'] = ImageParser\\n  exports['image/heic'] = ImageParser\\n  exports['image/heif'] = ImageParser\\n  exports['image/jpeg'] = ImageParser\\n  exports['image/jpg'] = ImageParser\\n  exports['image/png'] = ImageParser\\n  exports['image/vnd.microsoft.icon'] = ImageParser\\n  exports['image/webp'] = ImageParser\\n  exports['image/x-icon'] = ImageParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/pdfparser.js\": {\n            \"title\": \"$:/core/modules/parsers/pdfparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/pdfparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe PDF parser embeds a PDF viewer\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-pdfparser'\\n\\n  var PdfParser = function (type, text, options) {\\n    var value = 'data:application/pdf;base64,'\\n    var element = {\\n      type: 'element',\\n      tag: 'embed',\\n      attributes: {},\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToBase64(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.src = {\\n                      type: 'string',\\n                      value: `${value}${data}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        element.attributes.src = { type: 'string', value: `${value}${text}` }\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['application/pdf'] = PdfParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/svgparser.js\": {\n            \"title\": \"$:/core/modules/parsers/svgparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/svgparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe image parser parses an image into an embeddable HTML element\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-svgparser'\\n\\n  var SvgParser = function (type, text, options) {\\n    var value = 'data:image/svg+xml;utf8,'\\n    var element = {\\n      type: 'element',\\n      tag: 'img',\\n      attributes: {},\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToUtf8(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.src = {\\n                      type: 'string',\\n                      value: `${value}${encodeURIComponent(data)}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        element.attributes.src = {\\n          type: 'string',\\n          value: `${value}${encodeURIComponent(text)}`,\\n        }\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['image/svg+xml'] = SvgParser\\n  exports['.svg'] = SvgParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/textparser.js\": {\n            \"title\": \"$:/core/modules/parsers/textparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/textparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe plain text parser processes blocks of source text into a degenerate parse tree consisting of a single text node\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-textparser'\\n\\n  var TextParser = function (type, text, options) {\\n    var element = {\\n      type: 'codeblock',\\n      attributes: {\\n        code: { type: 'string', value: text !== undefined && text !== null ? text : '' },\\n        language: { type: 'string', value: type },\\n      },\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToUtf8(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.code.value = data\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['application/javascript'] = TextParser\\n  exports['application/json'] = TextParser\\n  exports['application/x-tiddler-dictionary'] = TextParser\\n  exports['text/css'] = TextParser\\n  exports['text/plain'] = TextParser\\n  exports['text/x-tiddlywiki'] = TextParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/videoparser.js\": {\n            \"title\": \"$:/core/modules/parsers/videoparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/videoparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe video parser parses a video tiddler into an embeddable HTML element\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const name = 'ipfs-videoparser'\\n\\n  var VideoParser = function (type, text, options) {\\n    var value = `data:${type};base64,`\\n    var element = {\\n      type: 'element',\\n      tag: 'video',\\n      attributes: {\\n        controls: { type: 'string', value: 'controls' },\\n        style: { type: 'string', value: 'width: 100%; object-fit: contain' },\\n      },\\n    }\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      if ((text || '') === '' && canonicalUri !== null) {\\n        var password = options.tiddler.fields._password\\n        password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n        $tw.ipfs\\n          .resolveUrl(canonicalUri, false, false, false)\\n          .then(data => {\\n            var { resolvedUrl } = data\\n            if (resolvedUrl !== null) {\\n              $tw.ipfs\\n                .loadToBase64(resolvedUrl, password)\\n                .then(data => {\\n                  if (data) {\\n                    element.attributes.src = {\\n                      type: 'string',\\n                      value: `${value}${data}`,\\n                    }\\n                    var parsedTiddler = $tw.utils.getChangedTiddler(options.tiddler)\\n                    $tw.rootWidget.refresh(parsedTiddler)\\n                  }\\n                })\\n                .catch(error => {\\n                  $tw.ipfs.getLogger().error(error)\\n                  $tw.utils.alert(name, error.message)\\n                })\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n          })\\n      } else if (text !== undefined && text !== null) {\\n        element.attributes.src = { type: 'string', value: `${value}${text}` }\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element]\\n  }\\n\\n  exports['video/mp4'] = VideoParser\\n  exports['video/ogg'] = VideoParser\\n  exports['video/quicktime'] = VideoParser\\n  exports['video/webm'] = VideoParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/parsers/wikiparser/wikiparser.js\": {\n            \"title\": \"$:/core/modules/parsers/wikiparser/wikiparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/wikiparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe wiki text parser processes blocks of source text into a parse tree.\\n\\nThe parse tree is made up of nested arrays of these JavaScript objects:\\n\\n\\t{type: \\\"element\\\", tag: <string>, attributes: {}, children: []} - an HTML element\\n\\t{type: \\\"text\\\", text: <string>} - a text node\\n\\t{type: \\\"entity\\\", value: <string>} - an entity\\n\\t{type: \\\"raw\\\", html: <string>} - raw HTML\\n\\nAttributes are stored as hashmaps of the following objects:\\n\\n\\t{type: \\\"string\\\", value: <string>} - literal string\\n\\t{type: \\\"indirect\\\", textReference: <textReference>} - indirect through a text reference\\n\\t{type: \\\"macro\\\", macro: <TBD>} - indirect through a macro invocation\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const IpfsImport = require('$:/plugins/ipfs/ipfs-import.js').IpfsImport\\n\\n  var name = 'ipfs-wikiparser'\\n\\n  var WikiParser = function (type, text, options) {\\n    this.wiki = options.wiki\\n    // Check for an externally linked tiddler\\n    if ($tw.browser && (text || '') === '' && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri\\n      canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n      var importUri = options.tiddler.fields._import_uri\\n      importUri = importUri !== undefined && importUri !== null && importUri.toString().trim() !== '' ? importUri.toString().trim() : null\\n      if (canonicalUri !== null || importUri !== null) {\\n        var ipfsImport = new IpfsImport()\\n        ipfsImport\\n          .import(canonicalUri, importUri, options.tiddler)\\n          .then(data => {\\n            if (data !== undefined && data !== null) {\\n              if (data.merged.size > 0 || data.deleted.size > 0) {\\n                const navigator = $tw.utils.locateNavigatorWidget($tw.pageWidgetNode)\\n                if (navigator) {\\n                  navigator.dispatchEvent({\\n                    type: 'tm-ipfs-import-tiddlers',\\n                    param: data,\\n                  })\\n                }\\n              }\\n            }\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(name, error.message)\\n          })\\n        text = `''${$tw.language.getRawString('LazyLoadingWarning')}''`\\n      }\\n    }\\n    // Save the parse text\\n    this.type = type || 'text/vnd.tiddlywiki'\\n    this.source = text || ''\\n    this.sourceLength = this.source.length\\n    // Flag for ignoring whitespace\\n    this.configTrimWhiteSpace = false\\n    // Set current parse position\\n    this.pos = 0\\n    // Start with empty output\\n    this.tree = []\\n    // Assemble the rule classes we're going to use\\n    var pragmaRuleClasses, blockRuleClasses, inlineRuleClasses\\n    if (options.rules) {\\n      pragmaRuleClasses = options.rules.pragma\\n      blockRuleClasses = options.rules.block\\n      inlineRuleClasses = options.rules.inline\\n    } else {\\n      // Setup the rule classes if we don't have them already\\n      if (!this.pragmaRuleClasses) {\\n        WikiParser.prototype.pragmaRuleClasses = $tw.modules.createClassesFromModules('wikirule', 'pragma', $tw.WikiRuleBase)\\n        this.setupRules(WikiParser.prototype.pragmaRuleClasses, '$:/config/WikiParserRules/Pragmas/')\\n      }\\n      pragmaRuleClasses = this.pragmaRuleClasses\\n      if (!this.blockRuleClasses) {\\n        WikiParser.prototype.blockRuleClasses = $tw.modules.createClassesFromModules('wikirule', 'block', $tw.WikiRuleBase)\\n        this.setupRules(WikiParser.prototype.blockRuleClasses, '$:/config/WikiParserRules/Block/')\\n      }\\n      blockRuleClasses = this.blockRuleClasses\\n      if (!this.inlineRuleClasses) {\\n        WikiParser.prototype.inlineRuleClasses = $tw.modules.createClassesFromModules('wikirule', 'inline', $tw.WikiRuleBase)\\n        this.setupRules(WikiParser.prototype.inlineRuleClasses, '$:/config/WikiParserRules/Inline/')\\n      }\\n      inlineRuleClasses = this.inlineRuleClasses\\n    }\\n    // Instantiate the pragma parse rules\\n    this.pragmaRules = this.instantiateRules(pragmaRuleClasses, 'pragma', 0)\\n    // Instantiate the parser block and inline rules\\n    this.blockRules = this.instantiateRules(blockRuleClasses, 'block', 0)\\n    this.inlineRules = this.instantiateRules(inlineRuleClasses, 'inline', 0)\\n    // Parse any pragmas\\n    var topBranch = this.parsePragmas()\\n    // Parse the text into inline runs or blocks\\n    if (options.parseAsInline) {\\n      topBranch.push.apply(topBranch, this.parseInlineRun())\\n    } else {\\n      topBranch.push.apply(topBranch, this.parseBlocks())\\n    }\\n    // Return the parsed tree\\n  }\\n\\n  /*\\n   */\\n  WikiParser.prototype.setupRules = function (proto, configPrefix) {\\n    var self = this\\n    if (!$tw.safemode) {\\n      $tw.utils.each(proto, function (object, name) {\\n        if (self.wiki.getTiddlerText(configPrefix + name, 'enable') !== 'enable') {\\n          delete proto[name]\\n        }\\n      })\\n    }\\n  }\\n\\n  /*\\nInstantiate an array of parse rules\\n*/\\n  WikiParser.prototype.instantiateRules = function (classes, type, startPos) {\\n    var rulesInfo = []\\n    var self = this\\n    $tw.utils.each(classes, function (RuleClass) {\\n      // Instantiate the rule\\n      var rule = new RuleClass(self)\\n      rule.is = {}\\n      rule.is[type] = true\\n      rule.init(self)\\n      var matchIndex = rule.findNextMatch(startPos)\\n      if (matchIndex !== undefined) {\\n        rulesInfo.push({\\n          rule: rule,\\n          matchIndex: matchIndex,\\n        })\\n      }\\n    })\\n    return rulesInfo\\n  }\\n\\n  /*\\nSkip any whitespace at the current position. Options are:\\n  treatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n*/\\n  WikiParser.prototype.skipWhitespace = function (options) {\\n    options = options || {}\\n    var whitespaceRegExp = options.treatNewlinesAsNonWhitespace ? /([^\\\\S\\\\n]+)/gm : /(\\\\s+)/gm\\n    whitespaceRegExp.lastIndex = this.pos\\n    var whitespaceMatch = whitespaceRegExp.exec(this.source)\\n    if (whitespaceMatch && whitespaceMatch.index === this.pos) {\\n      this.pos = whitespaceRegExp.lastIndex\\n    }\\n  }\\n\\n  /*\\nGet the next match out of an array of parse rule instances\\n*/\\n  WikiParser.prototype.findNextMatch = function (rules, startPos) {\\n    // Find the best matching rule by finding the closest match position\\n    var matchingRule\\n    var matchingRulePos = this.sourceLength\\n    // Step through each rule\\n    for (var t = 0; t < rules.length; t++) {\\n      var ruleInfo = rules[t]\\n      // Ask the rule to get the next match if we've moved past the current one\\n      if (ruleInfo.matchIndex !== undefined && ruleInfo.matchIndex < startPos) {\\n        ruleInfo.matchIndex = ruleInfo.rule.findNextMatch(startPos)\\n      }\\n      // Adopt this match if it's closer than the current best match\\n      if (ruleInfo.matchIndex !== undefined && ruleInfo.matchIndex <= matchingRulePos) {\\n        matchingRule = ruleInfo\\n        matchingRulePos = ruleInfo.matchIndex\\n      }\\n    }\\n    return matchingRule\\n  }\\n\\n  /*\\nParse any pragmas at the beginning of a block of parse text\\n*/\\n  WikiParser.prototype.parsePragmas = function () {\\n    var currentTreeBranch = this.tree\\n    while (true) {\\n      // Skip whitespace\\n      this.skipWhitespace()\\n      // Check for the end of the text\\n      if (this.pos >= this.sourceLength) {\\n        break\\n      }\\n      // Check if we've arrived at a pragma rule match\\n      var nextMatch = this.findNextMatch(this.pragmaRules, this.pos)\\n      // If not, just exit\\n      if (!nextMatch || nextMatch.matchIndex !== this.pos) {\\n        break\\n      }\\n      // Process the pragma rule\\n      var subTree = nextMatch.rule.parse()\\n      if (subTree.length > 0) {\\n        // Quick hack; we only cope with a single parse tree node being returned, which is true at the moment\\n        currentTreeBranch.push.apply(currentTreeBranch, subTree)\\n        subTree[0].children = []\\n        currentTreeBranch = subTree[0].children\\n      }\\n    }\\n    return currentTreeBranch\\n  }\\n\\n  /*\\nParse a block from the current position\\n  terminatorRegExpString: optional regular expression string that identifies the end of plain paragraphs. Must not include capturing parenthesis\\n*/\\n  WikiParser.prototype.parseBlock = function (terminatorRegExpString) {\\n    var terminatorRegExp = terminatorRegExpString ? new RegExp('(' + terminatorRegExpString + '|\\\\\\\\r?\\\\\\\\n\\\\\\\\r?\\\\\\\\n)', 'mg') : /(\\\\r?\\\\n\\\\r?\\\\n)/gm\\n    this.skipWhitespace()\\n    if (this.pos >= this.sourceLength) {\\n      return []\\n    }\\n    // Look for a block rule that applies at the current position\\n    var nextMatch = this.findNextMatch(this.blockRules, this.pos)\\n    if (nextMatch && nextMatch.matchIndex === this.pos) {\\n      return nextMatch.rule.parse()\\n    }\\n    // Treat it as a paragraph if we didn't find a block rule\\n    return [\\n      {\\n        type: 'element',\\n        tag: 'p',\\n        children: this.parseInlineRun(terminatorRegExp),\\n      },\\n    ]\\n  }\\n\\n  /*\\nParse a series of blocks of text until a terminating regexp is encountered or the end of the text\\n  terminatorRegExpString: terminating regular expression\\n*/\\n  WikiParser.prototype.parseBlocks = function (terminatorRegExpString) {\\n    if (terminatorRegExpString) {\\n      return this.parseBlocksTerminated(terminatorRegExpString)\\n    } else {\\n      return this.parseBlocksUnterminated()\\n    }\\n  }\\n\\n  /*\\nParse a block from the current position to the end of the text\\n*/\\n  WikiParser.prototype.parseBlocksUnterminated = function () {\\n    var tree = []\\n    while (this.pos < this.sourceLength) {\\n      tree.push.apply(tree, this.parseBlock())\\n    }\\n    return tree\\n  }\\n\\n  /*\\nParse blocks of text until a terminating regexp is encountered\\n*/\\n  WikiParser.prototype.parseBlocksTerminated = function (terminatorRegExpString) {\\n    var terminatorRegExp = new RegExp('(' + terminatorRegExpString + ')', 'mg')\\n    var tree = []\\n    // Skip any whitespace\\n    this.skipWhitespace()\\n    //  Check if we've got the end marker\\n    terminatorRegExp.lastIndex = this.pos\\n    var match = terminatorRegExp.exec(this.source)\\n    // Parse the text into blocks\\n    while (this.pos < this.sourceLength && !(match && match.index === this.pos)) {\\n      var blocks = this.parseBlock(terminatorRegExpString)\\n      tree.push.apply(tree, blocks)\\n      // Skip any whitespace\\n      this.skipWhitespace()\\n      //  Check if we've got the end marker\\n      terminatorRegExp.lastIndex = this.pos\\n      match = terminatorRegExp.exec(this.source)\\n    }\\n    if (match && match.index === this.pos) {\\n      this.pos = match.index + match[0].length\\n    }\\n    return tree\\n  }\\n\\n  /*\\nParse a run of text at the current position\\n  terminatorRegExp: a regexp at which to stop the run\\n  options: see below\\nOptions available:\\n  eatTerminator: move the parse position past any encountered terminator (default false)\\n*/\\n  WikiParser.prototype.parseInlineRun = function (terminatorRegExp, options) {\\n    if (terminatorRegExp) {\\n      return this.parseInlineRunTerminated(terminatorRegExp, options)\\n    } else {\\n      return this.parseInlineRunUnterminated(options)\\n    }\\n  }\\n\\n  WikiParser.prototype.parseInlineRunUnterminated = function (options) {\\n    var tree = []\\n    // Find the next occurrence of an inline rule\\n    var nextMatch = this.findNextMatch(this.inlineRules, this.pos)\\n    // Loop around the matches until we've reached the end of the text\\n    while (this.pos < this.sourceLength && nextMatch) {\\n      // Process the text preceding the run rule\\n      if (nextMatch.matchIndex > this.pos) {\\n        this.pushTextWidget(tree, this.source.substring(this.pos, nextMatch.matchIndex))\\n        this.pos = nextMatch.matchIndex\\n      }\\n      // Process the run rule\\n      tree.push.apply(tree, nextMatch.rule.parse())\\n      // Look for the next run rule\\n      nextMatch = this.findNextMatch(this.inlineRules, this.pos)\\n    }\\n    // Process the remaining text\\n    if (this.pos < this.sourceLength) {\\n      this.pushTextWidget(tree, this.source.substr(this.pos))\\n    }\\n    this.pos = this.sourceLength\\n    return tree\\n  }\\n\\n  WikiParser.prototype.parseInlineRunTerminated = function (terminatorRegExp, options) {\\n    options = options || {}\\n    var tree = []\\n    // Find the next occurrence of the terminator\\n    terminatorRegExp.lastIndex = this.pos\\n    var terminatorMatch = terminatorRegExp.exec(this.source)\\n    // Find the next occurrence of a inlinerule\\n    var inlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos)\\n    // Loop around until we've reached the end of the text\\n    while (this.pos < this.sourceLength && (terminatorMatch || inlineRuleMatch)) {\\n      // Return if we've found the terminator, and it precedes any inline rule match\\n      if (terminatorMatch) {\\n        if (!inlineRuleMatch || inlineRuleMatch.matchIndex >= terminatorMatch.index) {\\n          if (terminatorMatch.index > this.pos) {\\n            this.pushTextWidget(tree, this.source.substring(this.pos, terminatorMatch.index))\\n          }\\n          this.pos = terminatorMatch.index\\n          if (options.eatTerminator) {\\n            this.pos += terminatorMatch[0].length\\n          }\\n          return tree\\n        }\\n      }\\n      // Process any inline rule, along with the text preceding it\\n      if (inlineRuleMatch) {\\n        // Preceding text\\n        if (inlineRuleMatch.matchIndex > this.pos) {\\n          this.pushTextWidget(tree, this.source.substring(this.pos, inlineRuleMatch.matchIndex))\\n          this.pos = inlineRuleMatch.matchIndex\\n        }\\n        // Process the inline rule\\n        tree.push.apply(tree, inlineRuleMatch.rule.parse())\\n        // Look for the next inline rule\\n        inlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos)\\n        // Look for the next terminator match\\n        terminatorRegExp.lastIndex = this.pos\\n        terminatorMatch = terminatorRegExp.exec(this.source)\\n      }\\n    }\\n    // Process the remaining text\\n    if (this.pos < this.sourceLength) {\\n      this.pushTextWidget(tree, this.source.substr(this.pos))\\n    }\\n    this.pos = this.sourceLength\\n    return tree\\n  }\\n\\n  /*\\nPush a text widget onto an array, respecting the configTrimWhiteSpace setting\\n*/\\n  WikiParser.prototype.pushTextWidget = function (array, text) {\\n    if (this.configTrimWhiteSpace) {\\n      text = $tw.utils.trim(text)\\n    }\\n    if (text) {\\n      array.push({ type: 'text', text: text })\\n    }\\n  }\\n\\n  /*\\nParse zero or more class specifiers `.classname`\\n*/\\n  /*eslint no-useless-escape:\\\"off\\\"*/\\n  WikiParser.prototype.parseClasses = function () {\\n    var classRegExp = /\\\\.([^\\\\s\\\\.]+)/gm\\n    var classNames = []\\n    classRegExp.lastIndex = this.pos\\n    var match = classRegExp.exec(this.source)\\n    while (match && match.index === this.pos) {\\n      this.pos = match.index + match[0].length\\n      classNames.push(match[1])\\n      match = classRegExp.exec(this.source)\\n    }\\n    return classNames\\n  }\\n\\n  /*\\nAmend the rules used by this instance of the parser\\n  type: `only` keeps just the named rules, `except` keeps all but the named rules\\n  names: array of rule names\\n*/\\n  WikiParser.prototype.amendRules = function (type, names) {\\n    names = names || []\\n    // Define the filter function\\n    var target\\n    if (type === 'only') {\\n      target = true\\n    } else if (type === 'except') {\\n      target = false\\n    } else {\\n      return\\n    }\\n    // Define a function to process each of our rule arrays\\n    var processRuleArray = function (ruleArray) {\\n      for (var t = ruleArray.length - 1; t >= 0; t--) {\\n        if ((names.indexOf(ruleArray[t].rule.name) === -1) === target) {\\n          ruleArray.splice(t, 1)\\n        }\\n      }\\n    }\\n    // Process each rule array\\n    processRuleArray(this.pragmaRules)\\n    processRuleArray(this.blockRules)\\n    processRuleArray(this.inlineRules)\\n  }\\n\\n  exports['text/vnd.tiddlywiki'] = WikiParser\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/ipfs-saver.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-saver.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-saver.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: saver\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  const IpfsController = require('$:/plugins/ipfs/ipfs-controller.js').IpfsController\\n\\n  const ensKeyword = 'ens'\\n  const ipfsKeyword = 'ipfs'\\n  const ipnsKeyword = 'ipns'\\n\\n  const ipfsSaverName = 'ipfs-saver'\\n\\n  /*\\n   * Select the appropriate saver module and set it up\\n   */\\n  var IpfsSaver = function (wiki) {\\n    // Controller\\n    $tw.ipfs = new IpfsController()\\n    $tw.ipfs.init()\\n    // Log url policy\\n    $tw.ipfs.getLogger().info('ipfs-saver is starting up...')\\n    const base = $tw.ipfs.getIpfsBaseUrl()\\n    if ($tw.utils.getIpfsUrlPolicy() === 'origin') {\\n      $tw.ipfs.getLogger().info(`Origin Policy: ${base}`)\\n    } else {\\n      $tw.ipfs.getLogger().info(`Gateway Policy: ${base}`)\\n    }\\n  }\\n\\n  IpfsSaver.prototype.save = async function (text, method, callback, options) {\\n    if ($tw.saverHandler.isDirty() === false) {\\n      return false\\n    }\\n    const publishToIpns = async function (added, ipnsIpfsCid, ipnsCid, ipnsKey) {\\n      try {\\n        await $tw.ipfs.publishIpnsKey(added, ipnsCid, ipnsKey)\\n        $tw.utils.alert(ipfsSaverName, `Published IPNS key: ${ipnsKey}`)\\n      } catch (error) {\\n        $tw.ipfs.getLogger().warn(error)\\n        $tw.utils.alert(ipfsSaverName, error.message)\\n        if (ipnsIpfsCid !== null) {\\n          $tw.ipfs.addToPin(`/ipfs/${ipnsIpfsCid}`)\\n        }\\n        return false\\n      }\\n      return true\\n    }\\n    try {\\n      var account = null\\n      var ensCid = null\\n      var ensIpnsCid = null\\n      var ensIpnsKey = null\\n      var ensDomain = null\\n      var ipfsCid = null\\n      var ipnsCid = null\\n      var ipnsIpfsCid = null\\n      var ipnsKey = null\\n      var options = options || {}\\n      var resolvedUrl = null\\n      var web3 = null\\n      const base = $tw.ipfs.getIpfsBaseUrl()\\n      const wiki = $tw.ipfs.normalizeUrl($tw.ipfs.getDocumentUrl(), base)\\n      const protocol = base.protocol\\n      const host = base.host\\n      var credential = ''\\n      if (wiki.username && wiki.password) {\\n        credential = `${wiki.username}:${wiki.password}@`\\n      }\\n      var pathname = wiki.pathname\\n      const search = wiki.search\\n      const hash = wiki.hash\\n      // Resolve origin\\n      try {\\n        var { ipfsCid, ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(wiki, false, false, false)\\n      } catch (error) {\\n        $tw.ipfs.getLogger().warn(error)\\n        callback(error)\\n      }\\n      if (ipfsCid !== null && ipnsCid == null) {\\n        const resolvedCid = await $tw.ipfs.resolveIpfsContainer(resolvedUrl)\\n        if (resolvedCid !== null) {\\n          $tw.ipfs.addToUnpin(`/ipfs/${resolvedCid}`)\\n        }\\n      }\\n      // IPNS\\n      if (ipnsCid !== null || $tw.utils.getIpfsProtocol() === ipnsKeyword) {\\n        // Resolve current IPNS\\n        try {\\n          if (ipnsCid !== null) {\\n            var { ipfsCid: ipnsIpfsCid, ipnsKey, resolvedUrl } = await $tw.ipfs.resolveUrl(wiki, true, true, false)\\n          } else {\\n            // Default IPNS\\n            ipnsCid = $tw.utils.getIpnsCid()\\n            ipnsKey = $tw.utils.getIpnsKey()\\n            if (ipnsCid == null && ipnsKey == null) {\\n              callback(new Error('Unknown default IPNS key pair...'))\\n              return true\\n            }\\n            $tw.ipfs.getLogger().info('Processing default IPNS key pair...')\\n            var identifier = ipnsCid\\n            if (identifier == null) {\\n              identifier = ipnsKey\\n            }\\n            var { ipfsCid: ipnsIpfsCid, ipnsCid, ipnsKey, resolvedUrl } = await $tw.ipfs.resolveUrl(`/${ipnsKeyword}/${identifier}`, true, true, false)\\n          }\\n        } catch (error) {\\n          $tw.ipfs.getLogger().warn(error)\\n          $tw.utils.alert(ipfsSaverName, error.message)\\n        }\\n        if (ipnsIpfsCid !== null) {\\n          const resolvedCid = await $tw.ipfs.resolveIpfsContainer(resolvedUrl)\\n          if (resolvedCid !== null) {\\n            $tw.ipfs.addToUnpin(`/ipfs/${resolvedCid}`)\\n          }\\n        }\\n      }\\n      // ENS\\n      if ($tw.utils.getIpfsProtocol() === ensKeyword) {\\n        ensDomain = $tw.utils.getIpfsEnsDomain()\\n        if (ensDomain == null) {\\n          callback(new Error('Undefined ENS domain...'))\\n          return true\\n        }\\n        try {\\n          var { account, web3 } = await $tw.ipfs.getEnabledWeb3Provider()\\n          const isOwner = await $tw.ipfs.isEnsOwner(ensDomain, web3, account)\\n          if (isOwner === false) {\\n            const err = new Error('Unauthorized Account...')\\n            err.name = 'OwnerError'\\n            throw err\\n          }\\n          var { ipfsCid: ensCid, ipnsCid: ensIpnsCid, ipnsKey: ensIpnsKey, resolvedUrl: ensResolvedUrl } = await $tw.ipfs.resolveUrl(\\n            ensDomain,\\n            $tw.utils.getIpnsResolve(),\\n            true,\\n            true,\\n            null,\\n            web3\\n          )\\n        } catch (error) {\\n          $tw.ipfs.getLogger().warn(error)\\n          $tw.utils.alert(ipfsSaverName, error.message)\\n        }\\n        if (ensCid !== null || ensIpnsCid !== null) {\\n          const resolvedCid = await $tw.ipfs.resolveIpfsContainer(ensResolvedUrl)\\n          if (resolvedCid !== null) {\\n            $tw.ipfs.addToUnpin(`/ipfs/${resolvedCid}`)\\n          }\\n        }\\n      }\\n      // Upload\\n      $tw.ipfs.getLogger().info(`Uploading wiki: ${text.length} bytes`)\\n      const { cid: added } = await $tw.ipfs.addContentToIpfs($tw.ipfs.StringToUint8Array(text))\\n      $tw.ipfs.addToPin(`/${ipfsKeyword}/${added}`)\\n      // Publish to IPNS\\n      pathname = `/${ipfsKeyword}/${added}/`\\n      if (ipnsCid !== null && ipnsKey !== null) {\\n        if (await publishToIpns(added, ipnsIpfsCid, ipnsCid, ipnsKey)) {\\n          pathname = `/${ipnsKeyword}/${ipnsCid}/`\\n        }\\n      }\\n      if (ensIpnsCid !== null && ensIpnsKey !== null) {\\n        if (await publishToIpns(added, ensCid, ensIpnsCid, ensIpnsKey)) {\\n          pathname = `/${ipnsKeyword}/${ensIpnsCid}/`\\n        }\\n      }\\n      // Publish to ENS\\n      if ($tw.utils.getIpfsProtocol() === ensKeyword && ensIpnsCid == null) {\\n        try {\\n          await $tw.ipfs.setContentHash(ensDomain, `/${ipfsKeyword}/${added}`, web3, account)\\n          $tw.utils.alert(ipfsSaverName, `Published to ENS: ${ensDomain}`)\\n        } catch (error) {\\n          $tw.ipfs.getLogger().warn(error)\\n          $tw.utils.alert(ipfsSaverName, error.message)\\n          $tw.ipfs.addToPin(ensResolvedUrl !== null ? ensResolvedUrl.pathname : null)\\n        }\\n      }\\n      // Unpin\\n      if ($tw.utils.getIpfsUnpin()) {\\n        for (var i in $tw.ipfs.unpin) {\\n          try {\\n            const unpin = $tw.ipfs.unpin[i]\\n            await $tw.ipfs.unpinFromIpfs(unpin)\\n          } catch (error) {\\n            $tw.ipfs.getLogger().warn(error)\\n            $tw.utils.alert(ipfsSaverName, error.message)\\n          }\\n        }\\n      }\\n      $tw.ipfs.unpin = []\\n      // Pin\\n      if ($tw.utils.getIpfsPin()) {\\n        for (var i in $tw.ipfs.pin) {\\n          try {\\n            const pin = $tw.ipfs.pin[i]\\n            await $tw.ipfs.pinToIpfs(pin)\\n          } catch (error) {\\n            $tw.ipfs.getLogger().warn(error)\\n            $tw.utils.alert(ipfsSaverName, error.message)\\n          }\\n        }\\n      }\\n      $tw.ipfs.pin = []\\n      // Callback\\n      callback(null)\\n      // Next\\n      const next = $tw.ipfs.getUrl(`${protocol}//${credential}${host}${pathname}${search}${hash}`)\\n      if (next.protocol !== wiki.protocol || next.host !== wiki.host || next.pathname !== wiki.pathname) {\\n        $tw.ipfs.getLogger().info(`Loading: '${next.href}'`)\\n        window.location.assign(next.href)\\n      }\\n    } catch (error) {\\n      if (error.name !== 'OwnerError' && error.name !== 'RejectedUserRequest' && error.name !== 'UnauthorizedUserAccount') {\\n        $tw.ipfs.getLogger().error(error)\\n      }\\n      callback(error)\\n      return true\\n    }\\n    callback(null)\\n    return true\\n  }\\n\\n  /*\\n   * Information about this saver\\n   */\\n  IpfsSaver.prototype.info = {\\n    name: 'Ipfs',\\n    priority: 3100,\\n    capabilities: ['save'],\\n  }\\n\\n  /*\\n   * Static method that returns true if this saver is capable of working\\n   */\\n  exports.canSave = function (wiki) {\\n    return true\\n  }\\n\\n  /*\\n   * Create an instance of this saver\\n   */\\n  exports.create = function (wiki) {\\n    return new IpfsSaver(wiki)\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"saver\"\n        },\n        \"$:/core/modules/saver-handler.js\": {\n            \"title\": \"$:/core/modules/saver-handler.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/saver-handler.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: global\\n\\nThe saver handler tracks changes to the store and handles saving the entire wiki via saver modules.\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /**\\n   * Instantiate the saver handler with the following options:\\n   * wiki: wiki to be synced\\n   * dirtyTracking: true if dirty tracking should be performed\\n   */\\n  function SaverHandler (options) {\\n    var self = this\\n    this.wiki = options.wiki\\n    this.dirtyTracking = options.dirtyTracking\\n    this.preloadDirty = options.preloadDirty || []\\n    this.pendingAutoSave = false\\n    // Make a logger\\n    this.logger = new $tw.utils.Logger('saver-handler')\\n    // Initialise our savers\\n    if ($tw.browser) {\\n      this.initSavers()\\n    }\\n    // Only do dirty tracking if required\\n    if ($tw.browser && this.dirtyTracking) {\\n      // Compile the dirty tiddler filter\\n      this.filterFn = this.wiki.compileFilter(this.wiki.getTiddlerText(this.titleSyncFilter))\\n      // Count of changes that have not yet been saved\\n      var filteredChanges = self.filterFn.call(self.wiki, function (iterator) {\\n        $tw.utils.each(self.preloadDirty, function (title) {\\n          var tiddler = self.wiki.getTiddler(title)\\n          iterator(tiddler, title)\\n        })\\n      })\\n      this.numChanges = filteredChanges.length\\n      // Listen out for changes to tiddlers\\n      this.wiki.addEventListener('change', async function (changes) {\\n        // Filter the changes so that we only count changes to tiddlers that we care about\\n        var filteredChanges = self.filterFn.call(self.wiki, function (iterator) {\\n          $tw.utils.each(changes, function (change, title) {\\n            var tiddler = self.wiki.getTiddler(title)\\n            iterator(tiddler, title)\\n          })\\n        })\\n        // Adjust the number of changes\\n        self.numChanges += filteredChanges.length\\n        self.updateDirtyStatus()\\n        // Do any autosave if one is pending and there's no more change events\\n        if (self.pendingAutoSave && self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n          // Check if we're dirty\\n          if (self.numChanges > 0) {\\n            await self.saveWiki({\\n              method: 'autosave',\\n              downloadType: 'text/plain',\\n            })\\n          }\\n          self.pendingAutoSave = false\\n        }\\n      })\\n      // Listen for the autosave event\\n      $tw.rootWidget.addEventListener('tm-auto-save-wiki', async function (event) {\\n        // Do the autosave unless there are outstanding tiddler change events\\n        if (self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n          // Check if we're dirty\\n          if (self.numChanges > 0) {\\n            await self.saveWiki({\\n              method: 'autosave',\\n              downloadType: 'text/plain',\\n            })\\n          }\\n        } else {\\n          // Otherwise put ourselves in the \\\"pending autosave\\\" state and wait for the change event before we do the autosave\\n          self.pendingAutoSave = true\\n        }\\n      })\\n      // Set up our beforeunload handler\\n      $tw.addUnloadTask(function (event) {\\n        var confirmationMessage\\n        if (self.isDirty()) {\\n          confirmationMessage = $tw.language.getString('UnsavedChangesWarning')\\n          event.returnValue = confirmationMessage // Gecko\\n        }\\n        return confirmationMessage\\n      })\\n    }\\n    // Install the save action handlers\\n    if ($tw.browser) {\\n      $tw.rootWidget.addEventListener('tm-save-wiki', async function (event) {\\n        await self.saveWiki({\\n          template: event.param,\\n          downloadType: 'text/plain',\\n          variables: event.paramObject,\\n        })\\n      })\\n      $tw.rootWidget.addEventListener('tm-download-file', async function (event) {\\n        await self.saveWiki({\\n          method: 'download',\\n          template: event.param,\\n          downloadType: 'text/plain',\\n          variables: event.paramObject,\\n        })\\n      })\\n    }\\n  }\\n\\n  SaverHandler.prototype.titleSyncFilter = '$:/config/SaverFilter'\\n  SaverHandler.prototype.titleAutoSave = '$:/config/AutoSave'\\n  SaverHandler.prototype.titleSavedNotification = '$:/language/Notifications/Save/Done'\\n\\n  /**\\n   * Select the appropriate saver modules and set them up\\n   */\\n  SaverHandler.prototype.initSavers = function (moduleType) {\\n    moduleType = moduleType || 'saver'\\n    // Instantiate the available savers\\n    this.savers = []\\n    var self = this\\n    $tw.modules.forEachModuleOfType(moduleType, function (title, module) {\\n      if (module.canSave(self)) {\\n        self.savers.push({ title: title, module: module.create(self.wiki) })\\n      }\\n    })\\n    // Sort savers\\n    this.sortSavers()\\n  }\\n\\n  /*\\n   * Sort the savers into priority order\\n   */\\n  SaverHandler.prototype.sortSavers = function () {\\n    this.savers.sort(function (a, b) {\\n      if (a.module.info.priority < b.module.info.priority) {\\n        return -1\\n      } else {\\n        if (a.module.info.priority > b.module.info.priority) {\\n          return +1\\n        } else {\\n          return 0\\n        }\\n      }\\n    })\\n  }\\n\\n  /**\\n   * Save the wiki contents. Options are:\\n   * method: \\\"save\\\", \\\"autosave\\\" or \\\"download\\\"\\n   * template: the tiddler containing the template to save\\n   * downloadType: the content type for the saved file\\n   */\\n  SaverHandler.prototype.saveWiki = async function (options) {\\n    options = options || {}\\n    var self = this\\n    var method = options.method || 'save'\\n    // Ignore autosave if disabled\\n    if (method === 'autosave' && ($tw.config.disableAutoSave || this.wiki.getTiddlerText(this.titleAutoSave, 'yes') !== 'yes')) {\\n      return false\\n    }\\n    if ($tw.browser && typeof $tw.crypto.hasEncryptionPublicKey === 'function' && $tw.crypto.hasEncryptionPublicKey() && typeof globalThis.sigUtil === 'undefined') {\\n      await $tw.ipfs.loadEthSigUtilLibrary()\\n    }\\n    var variables = options.variables || {}\\n    var template = options.template || '$:/core/save/all'\\n    var downloadType = options.downloadType || 'text/plain'\\n    var text = await this.wiki.renderTiddlerAndSign(downloadType, template, options)\\n    var callback = function (err) {\\n      if (err) {\\n        alert($tw.language.getString('Error/WhileSaving') + ':\\\\n\\\\n' + err)\\n      } else {\\n        // Clear the task queue if we're saving (rather than downloading)\\n        if (method !== 'download') {\\n          self.numChanges = 0\\n          self.updateDirtyStatus()\\n        }\\n        $tw.notifier.display(self.titleSavedNotification)\\n        if (options.callback) {\\n          options.callback()\\n        }\\n      }\\n    }\\n    var ignorePreferred = null\\n    var preferredSaver = $tw.wiki.getTiddler('$:/config/PreferredSaver')\\n    if (preferredSaver !== undefined && preferredSaver !== null) {\\n      var title = preferredSaver.fields.text\\n      title = title !== undefined && title !== null && title.trim() !== '' ? title.trim() : null\\n      if (title !== null) {\\n        var saver = this.getSaver(title)\\n        if (saver !== null && saver.module !== undefined) {\\n          if (await this.save(saver.module, method, variables, text, callback)) {\\n            return true\\n          }\\n        }\\n        ignorePreferred = title\\n      }\\n    }\\n\\n    // Call the highest priority saver that supports this method\\n    for (var t = this.savers.length - 1; t >= 0; t--) {\\n      if (this.savers[t].title === ignorePreferred) {\\n        continue\\n      }\\n      if (await this.save(this.savers[t].module, method, variables, text, callback)) {\\n        return true\\n      }\\n    }\\n    return false\\n  }\\n\\n  SaverHandler.prototype.getSaver = function (title) {\\n    var saver = null\\n    for (var i = 0; i < this.savers.length; i++) {\\n      var current = this.savers[i]\\n      if (current.title === title) {\\n        saver = current\\n        break\\n      }\\n    }\\n    return saver\\n  }\\n\\n  SaverHandler.prototype.save = async function (saver, method, variables, text, callback) {\\n    if (saver.info.capabilities.indexOf(method) !== -1) {\\n      var saved = await saver.save(text, method, callback, {\\n        variables: { filename: variables.filename },\\n      })\\n      if (saved) {\\n        this.logger.log('Saved wiki with method', method, 'through saver', saver.info.name)\\n        return true\\n      }\\n    }\\n    return false\\n  }\\n\\n  /**\\n   * Checks whether the wiki is dirty (ie the window shouldn't be closed)\\n   */\\n  SaverHandler.prototype.isDirty = function () {\\n    return this.numChanges > 0\\n  }\\n\\n  /**\\n   * Update the document body with the class \\\"tc-dirty\\\" if the wiki has unsaved/unsynced changes\\n   */\\n  SaverHandler.prototype.updateDirtyStatus = function () {\\n    var self = this\\n    if ($tw.browser) {\\n      $tw.utils.toggleClass(document.body, 'tc-dirty', this.isDirty())\\n      $tw.utils.each($tw.windows, function (win) {\\n        $tw.utils.toggleClass(win.document.body, 'tc-dirty', self.isDirty())\\n      })\\n    }\\n  }\\n\\n  exports.SaverHandler = SaverHandler\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"global\"\n        },\n        \"$:/core/modules/startup/favicon.js\": {\n            \"title\": \"$:/core/modules/startup/favicon.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/startup/favicon.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nFavicon handling\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  // Export name and synchronous status\\n  exports.name = 'favicon'\\n  exports.platforms = ['browser']\\n  exports.after = ['startup']\\n  exports.synchronous = true\\n\\n  // Favicon tiddler\\n  var FAVICON_TITLE = '$:/favicon.ico'\\n\\n  exports.startup = function () {\\n    // Set up the favicon\\n    setFavicon()\\n    // Reset the favicon when the tiddler changes\\n    $tw.wiki.addEventListener('change', function (changes) {\\n      if ($tw.utils.hop(changes, FAVICON_TITLE)) {\\n        setFavicon()\\n      }\\n    })\\n  }\\n\\n  function setFavicon () {\\n    var tiddler = $tw.wiki.getTiddler(FAVICON_TITLE)\\n    if (tiddler) {\\n      try {\\n        var faviconLink = document.getElementById('faviconLink')\\n        if (faviconLink) {\\n          faviconLink.setAttribute(\\n            'href',\\n            $tw.utils.makeDataUri(tiddler.fields.text, tiddler.fields.type, tiddler.fields.altSourceUri ? tiddler.fields.altSourceUri : tiddler.fields._canonical_uri)\\n          )\\n        }\\n      } catch (error) {\\n        $tw.ipfs.getLogger().error(error)\\n      }\\n    }\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/ipfs/startup/ipfs-password.js\": {\n            \"title\": \"$:/plugins/ipfs/startup/ipfs-password.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/startup/ipfs-password.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: startup\\n\\nCompression handling\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  // Export name and synchronous status\\n  exports.name = 'ipfs-password'\\n  exports.platforms = ['browser']\\n  exports.after = ['ipfs-startup']\\n  exports.synchronous = true\\n\\n  exports.startup = function () {\\n    const setPassword = function () {\\n      $tw.passwordPrompt.createPrompt({\\n        serviceName: $tw.language.getString('Encryption/PromptSetPassword'),\\n        noUserName: true,\\n        submitText: $tw.language.getString('Encryption/SetPassword'),\\n        canCancel: true,\\n        repeatPassword: true,\\n        callback: function (data) {\\n          if (data) {\\n            $tw.crypto.setPassword(data.password)\\n          } else {\\n            $tw.crypto.setPassword(null)\\n          }\\n          return true // Get rid of the password prompt\\n        },\\n      })\\n    }\\n    // Ensure that $:/isEncrypted is maintained properly\\n    $tw.wiki.addEventListener('change', function (changes) {\\n      if ($tw.utils.hop(changes, '$:/config/encryption')) {\\n        const encrypted = $tw.wiki.getTiddler('$:/isEncrypted')\\n        if (encrypted !== undefined && encrypted.fields.text === 'yes') {\\n          const hasPassword = $tw.crypto.hasPassword()\\n          const encryption = $tw.wiki.getTiddler('$:/config/encryption')\\n          if (!hasPassword && encryption !== undefined && encryption.fields.text === 'standford') {\\n            setPassword()\\n          } else if (hasPassword) {\\n            $tw.rootWidget.dispatchEvent({ type: 'tm-clear-password' })\\n          }\\n        }\\n      }\\n    })\\n    $tw.rootWidget.addEventListener('tm-set-password', async function (event) {\\n      const encryption = $tw.wiki.getTiddler('$:/config/encryption')\\n      if (encryption !== undefined && encryption.fields.text === 'standford') {\\n        if ($tw.crypto.hasPassword() === false) {\\n          setPassword()\\n        }\\n      } else {\\n        try {\\n          const encryptionKey = await $tw.ipfs.getPublicEncryptionKey()\\n          $tw.crypto.setEncryptionKey(encryptionKey)\\n        } catch (error) {\\n          if (error.name !== 'RejectedUserRequest') {\\n            $tw.ipfs.getLogger().error(error)\\n          }\\n          $tw.utils.alert('ipfs-password', error.message)\\n          $tw.crypto.setEncryptionKey()\\n        }\\n      }\\n    })\\n    $tw.rootWidget.addEventListener('tm-clear-password', async function (event) {\\n      if ($tw.browser) {\\n        const hasPassword = $tw.crypto.hasPassword()\\n        const hasEncryptionPublicKey = $tw.crypto.hasEncryptionPublicKey()\\n        if (hasPassword) {\\n          if (!confirm($tw.language.getString('Encryption/ConfirmClearPassword'))) {\\n            return\\n          }\\n          $tw.crypto.setPassword()\\n        } else if (hasEncryptionPublicKey) {\\n          if (!confirm($tw.language.getString('Encryption/ConfirmClearEncryptionPublicKey'))) {\\n            return\\n          }\\n          $tw.crypto.setEncryptionKey()\\n        }\\n      }\\n    })\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/ipfs/startup/ipfs-startup.js\": {\n            \"title\": \"$:/plugins/ipfs/startup/ipfs-startup.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/startup/ipfs-startup.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: startup\\n\\nStartup initialisation\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  exports.name = 'ipfs-startup'\\n  exports.platforms = ['browser']\\n  exports.after = ['startup']\\n  exports.synchronous = true\\n\\n  exports.startup = function () {\\n    var getLogger = function () {\\n      if (globalThis.window !== undefined && globalThis.window.log !== undefined && globalThis.window.log !== null) {\\n        return globalThis.window.log.getLogger('ipfs')\\n      }\\n      return console\\n    }\\n    // Logger\\n    if (globalThis.window !== undefined && globalThis.window.log !== undefined && globalThis.window.log !== null) {\\n      const log = globalThis.window.log.getLogger('ipfs')\\n      if ($tw.utils.getIpfsVerbose()) {\\n        log.setLevel('info', false)\\n      } else {\\n        log.setLevel('warn', false)\\n      }\\n      log.info('loglevel is set up...')\\n    }\\n    // Missing Media Types\\n    $tw.utils.registerFileType('application/gzip', 'base64', '.gz')\\n    $tw.utils.registerFileType('application/x-tiddler-dictionary', 'utf8', '.dict')\\n    $tw.utils.registerFileType('application/zlib', 'base64', '.zlib')\\n    $tw.utils.registerFileType('audio/mpeg', 'base64', '.mp2')\\n    $tw.utils.registerFileType('image/jpg', 'base64', ['.jpg', '.jpeg'], {\\n      flags: ['image'],\\n    })\\n    $tw.utils.registerFileType('text/csv', 'utf8', '.csv')\\n    $tw.utils.registerFileType('video/quicktime', 'base64', ['.mov', '.qt'])\\n    $tw.utils.registerFileType('text/x-tiddlywiki', 'utf8', '.tid', {\\n      deserializerType: 'text/html',\\n    })\\n    // Log\\n    getLogger().info('ipfs-startup is starting up...')\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/ipfs/startup/ipfs-states.js\": {\n            \"title\": \"$:/plugins/ipfs/startup/ipfs-states.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/startup/ipfs-states.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: startup\\n\\nCompression handling\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  // Export name and synchronous status\\n  exports.name = 'ipfs-states'\\n  exports.platforms = ['browser']\\n  exports.after = ['ipfs-startup']\\n  exports.synchronous = true\\n\\n  exports.startup = function () {\\n    // Ensure that $:/isCompressed and $:/isModule are maintained properly\\n    $tw.wiki.addEventListener('change', function (changes) {\\n      if ($tw.utils.hop(changes, '$:/isCompressed')) {\\n        const tiddler = $tw.wiki.getTiddler('$:/isCompressed')\\n        $tw.compress.setCompressState(tiddler.fields.text === 'yes')\\n      }\\n      if ($tw.utils.hop(changes, '$:/isModule')) {\\n        const tiddler = $tw.wiki.getTiddler('$:/isModule')\\n        $tw.modulesState.setModulesState(tiddler.fields.text === 'yes')\\n      }\\n    })\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/ipfs/utils/compress.js\": {\n            \"title\": \"$:/plugins/ipfs/utils/compress.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/utils/compress.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nUtility functions related to compression.\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /**\\n   * Look for a compression store area in the text of a TiddlyWiki file\\n   */\\n  exports.extractCompressedStoreArea = function (text) {\\n    const compressedStoreAreaStartMarker = '<pre id=\\\"compressedStoreArea\\\" type=\\\"text/plain\\\" style=\\\"display:none;\\\">'\\n    const compressedStoreAreaStart = text.indexOf(compressedStoreAreaStartMarker)\\n    if (compressedStoreAreaStart !== -1) {\\n      const compressedStoreAreaEnd = text.indexOf('</pre>', compressedStoreAreaStart)\\n      if (compressedStoreAreaEnd !== -1) {\\n        return $tw.utils.htmlDecode(text.substring(compressedStoreAreaStart + compressedStoreAreaStartMarker.length, compressedStoreAreaEnd - 1))\\n      }\\n    }\\n    return null\\n  }\\n\\n  exports.inflateCompressedStoreArea = function (compressedStoreArea, callback) {\\n    if (compressedStoreArea) {\\n      if (compressedStoreArea.match(/^{\\\"compressed\\\":/)) {\\n        const json = JSON.parse(compressedStoreArea)\\n        if (json) {\\n          if (json.compressed.match(/^{\\\"iv\\\":/)) {\\n            $tw.utils.decryptStoreAreaInteractive(json.compressed, function (decrypted) {\\n              $tw.utils.inflateTiddlers(decrypted, function (tiddlers) {\\n                if (tiddlers) {\\n                  callback(tiddlers)\\n                }\\n              })\\n            })\\n            return true\\n          } else if (json.compressed.match(/^{\\\"version\\\":/)) {\\n            $tw.utils.decryptFromMetamaskPrompt(json.compressed, json.keccak256, json.signature, function (decrypted) {\\n              $tw.utils.inflateTiddlers(decrypted, function (tiddlers) {\\n                if (tiddlers) {\\n                  callback(tiddlers)\\n                }\\n              })\\n            })\\n            return true\\n          }\\n        }\\n      }\\n    }\\n    return false\\n  }\\n\\n  exports.inflate = function (compressed, password, privateKey) {\\n    if (compressed) {\\n      if (compressed.match(/^{\\\"compressed\\\":/)) {\\n        var data = null\\n        const json = JSON.parse(compressed)\\n        if (json && json.compressed) {\\n          if (json.compressed.match(/^{\\\"iv\\\":/) || json.compressed.match(/^{\\\"version\\\":/)) {\\n            const b64 = $tw.crypto.decrypt(json.compressed, password, privateKey)\\n            data = $tw.compress.inflate(b64)\\n          } else {\\n            data = $tw.compress.inflate(json.compressed)\\n          }\\n        }\\n        if (data) {\\n          return $tw.utils.loadTiddlers(data)\\n        }\\n      }\\n    }\\n    return null\\n  }\\n\\n  exports.inflateTiddlers = function (b64, callback) {\\n    if (b64) {\\n      const data = $tw.compress.inflate(b64)\\n      if (data) {\\n        const tiddlers = $tw.utils.loadTiddlers(data)\\n        if (tiddlers) {\\n          callback(tiddlers)\\n        }\\n      }\\n    }\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/plugins/ipfs/utils/crypto.js\": {\n            \"title\": \"$:/plugins/ipfs/utils/crypto.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/utils/crypto.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nUtility functions related to crypto.\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  /**\\n   * Look for an encrypted store area in the text of a TiddlyWiki file\\n   */\\n  exports.extractEncryptedStoreArea = function (text) {\\n    const encryptedStoreAreaStartMarker = '<pre id=\\\"encryptedStoreArea\\\" type=\\\"text/plain\\\" style=\\\"display:none;\\\">'\\n    const encryptedStoreAreaStart = text.indexOf(encryptedStoreAreaStartMarker)\\n    if (encryptedStoreAreaStart !== -1) {\\n      const encryptedStoreAreaEnd = text.indexOf('</pre>', encryptedStoreAreaStart)\\n      if (encryptedStoreAreaEnd !== -1) {\\n        return $tw.utils.htmlDecode(text.substring(encryptedStoreAreaStart + encryptedStoreAreaStartMarker.length, encryptedStoreAreaEnd - 1))\\n      }\\n    }\\n    return null\\n  }\\n\\n  exports.decrypt = function (encrypted, callback) {\\n    if (encrypted) {\\n      if (encrypted.match(/^{\\\"iv\\\":/)) {\\n        $tw.utils.decryptStoreAreaInteractive(encrypted, function (decrypted) {\\n          const tiddlers = $tw.utils.loadTiddlers(decrypted)\\n          if (tiddlers) {\\n            callback(tiddlers)\\n          }\\n        })\\n        return true\\n      } else if (encrypted.match(/^{\\\"encrypted\\\":/)) {\\n        const json = JSON.parse(encrypted)\\n        if (json) {\\n          $tw.utils.decryptFromMetamaskPrompt(json.encrypted, json.keccak256, json.signature, function (decrypted) {\\n            const tiddlers = $tw.utils.loadTiddlers(decrypted)\\n            if (tiddlers) {\\n              callback(tiddlers)\\n            }\\n          })\\n          return true\\n        }\\n      }\\n    }\\n    return false\\n  }\\n\\n  /**\\n   * Attempt to extract the tiddlers from an encrypted store area using the current password.\\n   * If the password is not provided then the password in the password store will be used\\n   */\\n  exports.decryptStoreArea = function (encryptedStoreArea, password, privateKey) {\\n    const json = JSON.parse(encryptedStoreArea)\\n    return $tw.utils.loadTiddlers($tw.crypto.decrypt(json.encrypted, password, privateKey))\\n  }\\n\\n  exports.decryptFromMetamaskPrompt = function (encryptedStoreArea, keccak256, signature, callback) {\\n    // Try to decrypt with the current password\\n    const decrypted = $tw.utils.decryptStoreArea(encryptedStoreArea)\\n    if (decrypted) {\\n      callback(decrypted)\\n    } else {\\n      $tw.boot.metamaskPrompt(encryptedStoreArea, keccak256, signature, function (decrypted) {\\n        if (decrypted) {\\n          callback(decrypted)\\n        }\\n      })\\n    }\\n  }\\n\\n  /**\\n   * Attempt to extract the tiddlers from an encrypted store area using the current password.\\n   * If that fails, the user is prompted for a password.\\n   *\\n   * encryptedStoreArea: text of the TiddlyWiki encrypted store area\\n   * callback: function(tiddlers) called with the array of decrypted tiddlers\\n   *\\n   * The following configuration settings are supported:\\n   *\\n   * $tw.config.usePasswordVault: causes any password entered by the user to also be put into the system password vault\\n   */\\n  exports.decryptStoreAreaInteractive = function (encryptedStoreArea, callback, options) {\\n    // Try to decrypt with the current password\\n    const decrypted = $tw.utils.decryptStoreArea(encryptedStoreArea)\\n    if (decrypted) {\\n      callback(decrypted)\\n    } else {\\n      // Prompt for a new password and keep trying\\n      $tw.passwordPrompt.createPrompt({\\n        serviceName: 'Enter a password to decrypt the imported TiddlyWiki',\\n        noUserName: true,\\n        canCancel: true,\\n        submitText: 'Decrypt',\\n        callback: function (data) {\\n          // Exit if the user cancelled\\n          if (!data) {\\n            return false\\n          }\\n          // Attempt to decrypt the tiddlers\\n          const text = $tw.crypto.decrypt(encryptedStoreArea, data.password)\\n          if (text) {\\n            if ($tw.config.usePasswordVault) {\\n              $tw.crypto.setPassword(data.password)\\n            }\\n            callback(text)\\n            // Exit and remove the password prompt\\n            return true\\n          } else {\\n            // We didn't decrypt everything, so continue to prompt for password\\n            return false\\n          }\\n        },\\n      })\\n    }\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/core/modules/utils/dom/dragndrop.js\": {\n            \"title\": \"$:/core/modules/utils/dom/dragndrop.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/utils/dom/dragndrop.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nBrowser data transfer utilities, used with the clipboard and drag and drop\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  const IpfsImport = require('$:/plugins/ipfs/ipfs-import.js').IpfsImport\\n\\n  exports.handleImportURL = async function (title, url) {\\n    const dummy = new $tw.Tiddler({\\n      title: title,\\n    })\\n    try {\\n      const ipfsImport = new IpfsImport()\\n      const data = await ipfsImport.import(null, url, dummy)\\n      if (data !== undefined && data !== null) {\\n        if (data.merged.size > 0 || data.deleted.size > 0) {\\n          return data\\n        }\\n      }\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n    }\\n    return null\\n  }\\n\\n  /**\\n   * Options:\\n   *\\n   * domNode: dom node to make draggable\\n   * dragImageType: \\\"pill\\\" or \\\"dom\\\"\\n   * dragTiddlerFn: optional function to retrieve the title of tiddler to drag\\n   * dragFilterFn: optional function to retreive the filter defining a list of tiddlers to drag\\n   * widget: widget to use as the contect for the filter\\n   */\\n  exports.makeDraggable = function (options) {\\n    var dragImageType = options.dragImageType || 'dom'\\n    var dragImage\\n    var domNode = options.domNode\\n    // Make the dom node draggable (not necessary for anchor tags)\\n    if ((domNode.tagName || '').toLowerCase() !== 'a') {\\n      domNode.setAttribute('draggable', 'true')\\n    }\\n    // Add event handlers\\n    $tw.utils.addEventListeners(domNode, [\\n      {\\n        name: 'dragstart',\\n        handlerFunction: function (event) {\\n          if (event.dataTransfer === undefined) {\\n            return false\\n          }\\n          // Collect the tiddlers being dragged\\n          var dragTiddler = options.dragTiddlerFn && options.dragTiddlerFn()\\n          var dragFilter = options.dragFilterFn && options.dragFilterFn()\\n          var titles = dragTiddler ? [dragTiddler] : []\\n          var startActions = options.startActions\\n          if (dragFilter) {\\n            titles.push.apply(titles, options.widget.wiki.filterTiddlers(dragFilter, options.widget))\\n          }\\n          var titleString = $tw.utils.stringifyList(titles)\\n          // Check that we've something to drag\\n          if (titles.length > 0 && event.target === domNode) {\\n            // Mark the drag in progress\\n            $tw.dragInProgress = domNode\\n            // Set the dragging class on the element being dragged\\n            $tw.utils.addClass(event.target, 'tc-dragging')\\n            // Invoke drag-start actions if given\\n            if (startActions !== undefined) {\\n              options.widget.invokeActionString(startActions, options.widget, event, { actionTiddler: titleString })\\n            }\\n            // Create the drag image elements\\n            dragImage = options.widget.document.createElement('div')\\n            dragImage.className = 'tc-tiddler-dragger'\\n            var inner = options.widget.document.createElement('div')\\n            inner.className = 'tc-tiddler-dragger-inner'\\n            inner.appendChild(options.widget.document.createTextNode(titles.length === 1 ? titles[0] : titles.length + ' tiddlers'))\\n            dragImage.appendChild(inner)\\n            options.widget.document.body.appendChild(dragImage)\\n            // Set the data transfer properties\\n            var dataTransfer = event.dataTransfer\\n            // Set up the image\\n            dataTransfer.effectAllowed = 'all'\\n            if (dataTransfer.setDragImage) {\\n              if (dragImageType === 'pill') {\\n                dataTransfer.setDragImage(dragImage.firstChild, -16, -16)\\n              } else {\\n                var r = domNode.getBoundingClientRect()\\n                dataTransfer.setDragImage(domNode, event.clientX - r.left, event.clientY - r.top)\\n              }\\n            }\\n            // Set up the data transfer\\n            if (dataTransfer.clearData) {\\n              dataTransfer.clearData()\\n            }\\n            var jsonData = []\\n            if (titles.length > 1) {\\n              titles.forEach(function (title) {\\n                jsonData.push(options.widget.wiki.getTiddlerAsJson(title))\\n              })\\n              jsonData = '[' + jsonData.join(',') + ']'\\n            } else {\\n              jsonData = options.widget.wiki.getTiddlerAsJson(titles[0])\\n            }\\n            // IE doesn't like these content types\\n            if (!$tw.browser.isIE) {\\n              dataTransfer.setData('text/vnd.tiddler', jsonData)\\n              dataTransfer.setData('text/plain', titleString)\\n              dataTransfer.setData('text/x-moz-url', 'data:text/vnd.tiddler,' + encodeURIComponent(jsonData))\\n            }\\n            dataTransfer.setData('URL', 'data:text/vnd.tiddler,' + encodeURIComponent(jsonData))\\n            dataTransfer.setData('Text', titleString)\\n            event.stopPropagation()\\n          }\\n          return false\\n        },\\n      },\\n      {\\n        name: 'dragend',\\n        handlerFunction: function (event) {\\n          if (event.target === domNode) {\\n            // Collect the tiddlers being dragged\\n            var dragTiddler = options.dragTiddlerFn && options.dragTiddlerFn()\\n            var dragFilter = options.dragFilterFn && options.dragFilterFn()\\n            var titles = dragTiddler ? [dragTiddler] : []\\n            var endActions = options.endActions\\n            if (dragFilter) {\\n              titles.push.apply(titles, options.widget.wiki.filterTiddlers(dragFilter, options.widget))\\n            }\\n            var titleString = $tw.utils.stringifyList(titles)\\n            $tw.dragInProgress = null\\n            // Invoke drag-end actions if given\\n            if (endActions !== undefined) {\\n              options.widget.invokeActionString(endActions, options.widget, event, { actionTiddler: titleString })\\n            }\\n            // Remove the dragging class on the element being dragged\\n            $tw.utils.removeClass(event.target, 'tc-dragging')\\n            // Delete the drag image element\\n            if (dragImage) {\\n              dragImage.parentNode.removeChild(dragImage)\\n              dragImage = null\\n            }\\n          }\\n          return false\\n        },\\n      },\\n    ])\\n  }\\n\\n  exports.importDataTransfer = async function (dataTransfer, fallbackTitle, callback) {\\n    // Try each provided data type in turn\\n    if ($tw.log.IMPORT) {\\n      console.log('Available data types:')\\n      for (var type = 0; type < dataTransfer.types.length; type++) {\\n        console.log('type', dataTransfer.types[type], dataTransfer.getData(dataTransfer.types[type]))\\n      }\\n    }\\n    for (var t = 0; t < importDataTypes.length; t++) {\\n      if (!$tw.browser.isIE || importDataTypes[t].IECompatible) {\\n        // Get the data\\n        var dataType = importDataTypes[t]\\n        var data = dataTransfer.getData(dataType.type)\\n        // Import the tiddlers in the data\\n        if (data !== null && data !== '') {\\n          if ($tw.log.IMPORT) {\\n            console.log(\\\"Importing data type '\\\" + dataType.type + \\\"', data: '\\\" + data + \\\"'\\\")\\n          }\\n          var tiddlerFields = await dataType.toTiddlerFieldsArray(data, fallbackTitle)\\n          if (tiddlerFields && tiddlerFields.merged === undefined) {\\n            const merged = new Map()\\n            for (var i = 0; i < tiddlerFields.length; i++) {\\n              merged.set(tiddlerFields[i].title, tiddlerFields[i])\\n            }\\n            tiddlerFields = { merged: merged, deleted: new Map() }\\n          }\\n          callback(tiddlerFields)\\n          return\\n        }\\n      }\\n    }\\n  }\\n\\n  var importDataTypes = [\\n    {\\n      type: 'text/vnd.tiddler',\\n      IECompatible: false,\\n      toTiddlerFieldsArray: async function (data, fallbackTitle) {\\n        const imported = await $tw.utils.handleImportURL(fallbackTitle, data)\\n        if (imported !== undefined && imported !== null) {\\n          return imported\\n        }\\n        return parseJSONTiddlers(data, fallbackTitle)\\n      },\\n    },\\n    {\\n      type: 'URL',\\n      IECompatible: true,\\n      toTiddlerFieldsArray: async function (data, fallbackTitle) {\\n        // Check for tiddler data URI\\n        var match = decodeURIComponent(data).match(/^data:text\\\\/vnd\\\\.tiddler,(.*)/i)\\n        if (match) {\\n          return parseJSONTiddlers(match[1], fallbackTitle)\\n        }\\n        var imported = await $tw.utils.handleImportURL(fallbackTitle, data)\\n        if (imported !== undefined && imported !== null) {\\n          return imported\\n        }\\n        // Fallback\\n        return [\\n          {\\n            title: fallbackTitle,\\n            type: 'text/html',\\n            _canonical_uri: data,\\n            _sandbox_tokens: '',\\n            _sandbox_source_uri: 'https://developer.mozilla.org/fr/docs/Web/HTML/Element/iframe',\\n          },\\n        ]\\n      },\\n    },\\n    {\\n      type: 'text/x-moz-url',\\n      IECompatible: false,\\n      toTiddlerFieldsArray: async function (data, fallbackTitle) {\\n        // Check for tiddler data URI\\n        var match = decodeURIComponent(data).match(/^data:text\\\\/vnd\\\\.tiddler,(.*)/i)\\n        if (match) {\\n          return parseJSONTiddlers(match[1], fallbackTitle)\\n        }\\n        var parts = data.split('\\\\n')\\n        var url = parts[0]\\n        fallbackTitle = parts[1]\\n        var imported = await $tw.utils.handleImportURL(fallbackTitle, url)\\n        if (imported) {\\n          return imported\\n        }\\n        // Fallback\\n        return [\\n          {\\n            title: fallbackTitle,\\n            type: 'text/html',\\n            _canonical_uri: data,\\n            _sandbox_tokens: '',\\n            _sandbox_source_uri: 'https://developer.mozilla.org/fr/docs/Web/HTML/Element/iframe',\\n          },\\n        ]\\n      },\\n    },\\n    {\\n      type: 'text/html',\\n      IECompatible: false,\\n      toTiddlerFieldsArray: function (data, fallbackTitle) {\\n        return [{ title: fallbackTitle, text: data }]\\n      },\\n    },\\n    {\\n      type: 'text/plain',\\n      IECompatible: false,\\n      toTiddlerFieldsArray: function (data, fallbackTitle) {\\n        return [{ title: fallbackTitle, text: data }]\\n      },\\n    },\\n    {\\n      type: 'Text',\\n      IECompatible: true,\\n      toTiddlerFieldsArray: function (data, fallbackTitle) {\\n        return [{ title: fallbackTitle, text: data }]\\n      },\\n    },\\n    {\\n      type: 'text/uri-list',\\n      IECompatible: false,\\n      toTiddlerFieldsArray: function (data, fallbackTitle) {\\n        return [{ title: fallbackTitle, text: data }]\\n      },\\n    },\\n  ]\\n\\n  function parseJSONTiddlers (json, fallbackTitle) {\\n    var data = JSON.parse(json)\\n    if (!$tw.utils.isArray(data)) {\\n      data = [data]\\n    }\\n    data.forEach(function (fields) {\\n      fields.title = fields.title || fallbackTitle\\n    })\\n    return data\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/plugins/ipfs/utils/ipfs-default.js\": {\n            \"title\": \"$:/plugins/ipfs/utils/ipfs-default.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/utils/ipfs-default.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nIPFS Default\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n  const ipfsDefaultName = 'ipfs-default'\\n\\n  exports.getEthLinkResolve = function () {\\n    var resolve = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/eth-link/resolve')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        resolve = text\\n      }\\n    }\\n    if (resolve == null) {\\n      resolve = false // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      resolve = resolve === 'yes'\\n    }\\n    return resolve\\n  }\\n\\n  exports.getShortTimeout = function () {\\n    var timeout = null\\n    var defaultTimeout = 4000\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/http/short/timeout')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      timeout = tiddler.fields.timeout\\n      timeout = timeout !== undefined && timeout !== null ? parseInt(timeout) : defaultTimeout\\n    } else {\\n      timeout = defaultTimeout\\n    }\\n    return timeout\\n  }\\n\\n  exports.getLongTimeout = function () {\\n    var timeout = null\\n    var defaultTimeout = 4 * 60 * $tw.utils.getShortTimeout()\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/http/long/timeout')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      timeout = tiddler.fields.timeout\\n      timeout = timeout !== undefined && timeout !== null ? parseInt(timeout) : defaultTimeout\\n    } else {\\n      timeout = defaultTimeout\\n    }\\n    return timeout\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver export protocol with default value if applicable\\n   */\\n  exports.getIpfsExport = function () {\\n    var output = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/export')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        output = text\\n      }\\n    }\\n    if (output == null) {\\n      output = $tw.utils.getIpfsDefaultExport()\\n    }\\n    return output\\n  }\\n\\n  /*\\n   * Default Export\\n   */\\n  exports.getIpfsDefaultExport = function () {\\n    return 'json'\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver protocol with default value if applicable\\n   */\\n  exports.getIpfsProtocol = function () {\\n    var protocol = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/protocol')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        protocol = text\\n      }\\n    }\\n    if (protocol == null) {\\n      protocol = $tw.utils.getIpfsDefaultProtocol()\\n    }\\n    return protocol\\n  }\\n\\n  /*\\n   * Default Protocol\\n   */\\n  exports.getIpfsDefaultProtocol = function () {\\n    return 'ipfs'\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver api url with default value if applicable\\n   */\\n  exports.getIpfsSaverApiUrl = function () {\\n    var api = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/api')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        api = text\\n      }\\n    }\\n    if (api !== null) {\\n      tiddler = $tw.wiki.getTiddler(api)\\n      if (tiddler !== undefined && tiddler !== null) {\\n        var text = tiddler.fields.text\\n        text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n        if (text !== null) {\\n          api = text\\n        }\\n      }\\n    }\\n    if (api == null) {\\n      api = $tw.ipfs.getIpfsDefaultApi()\\n    }\\n    return api\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver gateway url with default value if applicable\\n   */\\n  exports.getIpfsSaverGatewayUrl = function () {\\n    var gateway = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/gateway')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        gateway = text\\n      }\\n    }\\n    if (gateway !== null) {\\n      tiddler = $tw.wiki.getTiddler(gateway)\\n      if (tiddler !== undefined && tiddler !== null) {\\n        var text = tiddler.fields.text\\n        text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n        if (text !== null) {\\n          gateway = text\\n        }\\n      }\\n    }\\n    if (gateway == null) {\\n      gateway = $tw.ipfs.getIpfsDefaultGateway()\\n    }\\n    return gateway\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver ens domain with default value if applicable\\n   */\\n  exports.getIpfsEnsDomain = function () {\\n    var ensDomain = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ens/domain')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        ensDomain = text\\n      }\\n    }\\n    return ensDomain\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver ipns key with default value if applicable\\n   */\\n  exports.getIpnsKey = function () {\\n    var ipnsKey = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/key')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        ipnsKey = text\\n      }\\n    }\\n    return ipnsKey\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver ipns key with default value if applicable\\n   */\\n  exports.getIpnsCid = function () {\\n    var ipnsCid = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/cid')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        ipnsCid = text\\n      }\\n    }\\n    return ipnsCid\\n  }\\n\\n  /*\\n   * Retrieve ipfs verbose preference with default value if applicable\\n   */\\n  exports.getIpfsVerbose = function () {\\n    var verbose = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/verbose')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        verbose = text\\n      }\\n    }\\n    if (verbose == null) {\\n      verbose = true // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      verbose = verbose === 'yes'\\n    }\\n    return verbose\\n  }\\n\\n  /*\\n   * Retrieve ipfs pin preference with default value if applicable\\n   */\\n  exports.getIpfsPin = function () {\\n    var pin = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/pin')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        pin = text\\n      }\\n    }\\n    if (pin == null) {\\n      pin = true // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      pin = pin === 'yes'\\n    }\\n    return pin\\n  }\\n\\n  /*\\n   * Retrieve ipfs unpin preference with default value if applicable\\n   */\\n  exports.getIpfsUnpin = function () {\\n    var unpin = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/unpin')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        unpin = text\\n      }\\n    }\\n    if (unpin == null) {\\n      unpin = false // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      unpin = unpin === 'yes'\\n    }\\n    return unpin\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver url policy with default value if applicable\\n   */\\n  exports.getIpfsUrlPolicy = function () {\\n    var policy = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/policy')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        policy = text\\n      }\\n    }\\n    if (policy == null) {\\n      policy = $tw.utils.getIpfsDefaultPolicy()\\n    }\\n    return policy\\n  }\\n\\n  /*\\n   * Default Policy\\n   */\\n  exports.getIpfsDefaultPolicy = function () {\\n    return 'gateway'\\n  }\\n\\n  /*\\n   * Retrieve ipfs saver provider with default value if applicable\\n   */\\n  exports.getIpfsProvider = function () {\\n    var provider = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/provider')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        provider = text\\n      }\\n    }\\n    if (provider == null) {\\n      provider = $tw.utils.getIpfsDefaultProvider()\\n    }\\n    return provider\\n  }\\n\\n  /*\\n   * Default Provider\\n   */\\n  exports.getIpfsDefaultProvider = function () {\\n    return 'http'\\n  }\\n\\n  exports.getIpnsResolve = function () {\\n    var resolve = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/ipns/resolve')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        resolve = text\\n      }\\n    }\\n    if (resolve == null) {\\n      resolve = false // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      resolve = resolve === 'yes'\\n    }\\n    return resolve\\n  }\\n\\n  exports.getWrappedDirectory = function () {\\n    var wrapped = null\\n    var tiddler = $tw.wiki.getTiddler('$:/ipfs/saver/directory/wrapped')\\n    if (tiddler !== undefined && tiddler !== null) {\\n      var text = tiddler.fields.text\\n      text = text !== undefined && text !== null && text.trim() !== '' ? text.trim() : null\\n      if (text !== null) {\\n        wrapped = text\\n      }\\n    }\\n    if (wrapped == null) {\\n      wrapped = true // default, see $:/core/ui/ControlPanel/Ipfs/Saver\\n    } else {\\n      wrapped = wrapped === 'yes'\\n    }\\n    return wrapped\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/plugins/ipfs/utils/ipfs-utils.js\": {\n            \"title\": \"$:/plugins/ipfs/utils/ipfs-utils.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/utils/ipfs-utils.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nIPFS utils\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*eslint no-unused-vars:\\\"off\\\"*/\\n  const ipfsUtilsName = 'ipfs-utils'\\n  const ipfsKeyword = 'ipfs'\\n  const ipnsKeyword = 'ipns'\\n\\n  /*\\n   * https://tiddlywiki.com/#TiddlerFields\\n   * $:/core/modules/server/routes/get-tiddler.js\\n   * TODO: expose it as Tiddler ??\\n   */\\n  const reservedFields = [\\n    'bag',\\n    'caption',\\n    'class',\\n    'color',\\n    'description',\\n    'created',\\n    'creator',\\n    'fields',\\n    'footer',\\n    'hide-body',\\n    'icon',\\n    '_is_skinny',\\n    'library',\\n    'list',\\n    'list-after',\\n    'list-before',\\n    'modified',\\n    'modifier',\\n    'name',\\n    'plugin-priority',\\n    'plugin-type',\\n    'permissions',\\n    'recipe',\\n    'revision',\\n    // \\\"source\\\",\\n    'subtitle',\\n    'tags',\\n    'text',\\n    // \\\"url\\\",\\n    'throttle.refresh',\\n    'toc-link',\\n    'title',\\n    'type',\\n  ]\\n\\n  exports.isTiddlyWikiReservedWord = function (value) {\\n    return reservedFields.indexOf(value) !== -1\\n  }\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  const ipfsReservedFields = [\\n    '_canonical_uri',\\n    '_alt_canonical_uri',\\n    '_canonical_uri_ipfs',\\n    '_alt_canonical_uri_ipfs',\\n    '_compress',\\n    '_encryption_public_key',\\n    '_export_uri',\\n    '_export_uri_ipfs',\\n    '_import_uri',\\n    '_alt_import_uri',\\n    '_import_uri_ipfs',\\n    '_alt_import_uri_ipfs',\\n    '_password',\\n    '_sandbox_tokens',\\n    '_sign',\\n  ]\\n\\n  exports.isIpfsReservedWord = function (value) {\\n    return ipfsReservedFields.indexOf(value) !== -1\\n  }\\n\\n  /**\\n   * $:/core/modules/utils/logger.js\\n   *\\n   * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n   *\\n   * Copyright (c) 2004-2007, Jeremy Ruston\\n   * Copyright (c) 2007-2018, UnaMesa Association\\n   * Copyright (c) 2019-2020, Blue Light\\n   * All rights reserved.\\n   *\\n   * Redistribution and use in source and binary forms, with or without\\n   * modification, are permitted provided that the following conditions are met:\\n   *\\n   * * Redistributions of source code must retain the above copyright notice, this\\n   *   list of conditions and the following disclaimer.\\n   *\\n   * * Redistributions in binary form must reproduce the above copyright notice,\\n   *   this list of conditions and the following disclaimer in the documentation\\n   *   and/or other materials provided with the distribution.\\n   *\\n   * * Neither the name of the copyright holder nor the names of its\\n   *   contributors may be used to endorse or promote products derived from\\n   *   this software without specific prior written permission.\\n   *\\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n   */\\n\\n  /*\\n   * from $:/core/modules/utils/logger.js\\n   **/\\n  exports.alert = function (callee, text) {\\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\\n      return\\n    }\\n    const ALERT_TAG = '$:/tags/Alert'\\n    // Prepare the text of the alert\\n    // var text = Array.prototype.join.call(arguments,\\\" \\\");\\n    // Check if there is an existing alert with the same text and the same component\\n    var existingAlerts = $tw.wiki.getTiddlersWithTag(ALERT_TAG)\\n    var alertFields\\n    var existingCount\\n    $tw.utils.each(existingAlerts, function (title) {\\n      var tiddler = $tw.wiki.getTiddler(title)\\n      if (tiddler.fields.text === text && tiddler.fields.component === callee && tiddler.fields.modified && (!alertFields || tiddler.fields.modified < alertFields.modified)) {\\n        alertFields = $tw.utils.extend({}, tiddler.fields)\\n      }\\n    })\\n    if (alertFields) {\\n      existingCount = alertFields.count || 1\\n    } else {\\n      alertFields = {\\n        title: $tw.wiki.generateNewTitle('$:/temp/alerts/alert', {\\n          prefix: '',\\n        }),\\n        text: text,\\n        tags: [ALERT_TAG],\\n        component: callee,\\n      }\\n      existingCount = 0\\n    }\\n    alertFields.modified = new Date()\\n    if (++existingCount > 1) {\\n      alertFields.count = existingCount\\n    } else {\\n      alertFields.count = undefined\\n    }\\n    $tw.wiki.addTiddler(new $tw.Tiddler(alertFields))\\n  }\\n\\n  // Edition build\\n  exports.getIpfsEditionBuild = function () {\\n    if (globalThis.document) {\\n      var metatags = globalThis.document.getElementsByTagName('meta')\\n      for (var t = 0; t < metatags.length; t++) {\\n        var m = metatags[t]\\n        if (m.name === 'ipfs-edition-build') {\\n          return m.content\\n        }\\n      }\\n    }\\n    return ''\\n  }\\n\\n  // Edition version\\n  exports.getIpfsEditionVersion = function () {\\n    if (globalThis.document) {\\n      var metatags = globalThis.document.getElementsByTagName('meta')\\n      for (var t = 0; t < metatags.length; t++) {\\n        var m = metatags[t]\\n        if (m.name === 'ipfs-edition-version') {\\n          return m.content\\n        }\\n      }\\n    }\\n    return ''\\n  }\\n\\n  exports.getChangedTiddler = function (object) {\\n    // Holder\\n    const changedTiddler = Object.create(null)\\n    // Check\\n    if (object === undefined || object == null) {\\n      return changedTiddler\\n    }\\n    if (object instanceof $tw.Tiddler === false && typeof object !== 'string') {\\n      return changedTiddler\\n    }\\n    // Retrieve title\\n    var title = null\\n    if (typeof object === 'string') {\\n      title = object\\n    }\\n    if (object instanceof $tw.Tiddler) {\\n      title = object.fields.title\\n    }\\n    // Check\\n    if (title === undefined || title == null) {\\n      return changedTiddler\\n    }\\n    // Process title\\n    changedTiddler[title] = Object.create(null)\\n    // Done\\n    return changedTiddler\\n  }\\n\\n  exports.updateTiddler = function (updates) {\\n    // Is there anything to do\\n    if (updates === undefined || updates == null || updates.tiddler === undefined || updates.tiddler == null) {\\n      return null\\n    }\\n    // Prepare updates\\n    const fields = $tw.wiki.getModificationFields()\\n    // Tags\\n    fields.tags = (updates.tiddler.fields.tags || []).slice(0)\\n    // Process add tags\\n    if (updates.addTags !== undefined && updates.addTags !== null && Array.isArray(updates.addTags)) {\\n      for (var i = 0; i < updates.addTags.length; i++) {\\n        const tag = updates.addTags[i]\\n        if (fields.tags.indexOf(tag) === -1) {\\n          $tw.utils.pushTop(fields.tags, tag)\\n        }\\n      }\\n    }\\n    // Process remove tags\\n    if (updates.removeTags !== undefined && updates.removeTags !== null && Array.isArray(updates.removeTags)) {\\n      for (var i = 0; i < updates.removeTags.length; i++) {\\n        const tag = updates.removeTags[i]\\n        const index = fields.tags.indexOf(tag)\\n        if (index !== -1) {\\n          fields.tags.splice(index, 1)\\n        }\\n      }\\n    }\\n    // Process fields\\n    if (updates.fields !== undefined && updates.fields !== null && Array.isArray(updates.fields)) {\\n      for (var i = 0; i < updates.fields.length; i++) {\\n        const field = updates.fields[i]\\n        if (field.key !== undefined && field.key !== null) {\\n          fields[field.key] = field.value\\n        }\\n      }\\n    }\\n    // Update tiddler\\n    return new $tw.Tiddler(updates.tiddler, fields)\\n  }\\n\\n  exports.getContentType = function (tiddler) {\\n    tiddler = tiddler !== undefined && tiddler !== null ? tiddler : null\\n    if (tiddler == null) {\\n      throw new Error('Undefined Tiddler...')\\n    }\\n    var type = tiddler.fields.type !== undefined && tiddler.fields.type !== null && tiddler.fields.type.trim() !== '' ? tiddler.fields.type.trim() : null\\n    if (type == null) {\\n      type = 'text/vnd.tiddlywiki'\\n    }\\n    var info = $tw.config.contentTypeInfo[type]\\n    if (info === undefined || info == null) {\\n      throw new Error(`Unknown Content-Type: \\\"${type}\\\" from Tidler: \\\"${tiddler.fields.title}\\\"`)\\n    }\\n    return {\\n      type: type,\\n      info: info,\\n    }\\n  }\\n\\n  exports.loadTiddlers = function (text) {\\n    if (text) {\\n      var json = JSON.parse(text)\\n      var tiddlers = []\\n      for (var title in json) {\\n        if (title !== '$:/isEncrypted' && title !== '$:/isCompressed') {\\n          tiddlers.push(json[title])\\n        }\\n      }\\n      return tiddlers\\n    }\\n    return null\\n  }\\n\\n  exports.processUpdatedTiddler = async function (tiddler, oldTiddler, updatedTiddler) {\\n    var canonicalUri = null\\n    var exportUri = null\\n    var importUri = null\\n    var isIpfs = false\\n    var updatedTiddler = updatedTiddler === undefined || updatedTiddler == null ? new $tw.Tiddler(tiddler) : updatedTiddler\\n    const { type, info } = $tw.utils.getContentType(tiddler)\\n    // Process fields\\n    for (var field in tiddler.fields) {\\n      const value = tiddler.getFieldString(field)\\n      // Resolve value\\n      var ipfsCid = null\\n      var ipnsCid = null\\n      var resolvedUrl = null\\n      try {\\n        var { ipfsCid, ipnsCid, resolvedUrl } = await $tw.ipfs.resolveUrl(value, false, false, true)\\n      } catch (error) {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(ipfsUtilsName, error.message)\\n        continue\\n      }\\n      // isIpfs\\n      if (ipfsCid !== null || ipnsCid !== null) {\\n        isIpfs = true\\n      }\\n      // Store special fields\\n      resolvedUrl = resolvedUrl !== undefined && resolvedUrl !== null && resolvedUrl.toString().trim() !== '' ? resolvedUrl.toString().trim() : null\\n      if (field === '_canonical_uri') {\\n        canonicalUri = resolvedUrl\\n      }\\n      if (field === '_import_uri') {\\n        importUri = resolvedUrl\\n      }\\n      if (field === '_export_uri') {\\n        exportUri = resolvedUrl\\n      }\\n      if (oldTiddler !== undefined && oldTiddler !== null) {\\n        if (value === oldTiddler.getFieldString(field)) {\\n          continue\\n        }\\n        var oldResolvedUrl = null\\n        try {\\n          var { resolvedUrl: oldResolvedUrl } = await $tw.ipfs.resolveUrl(oldTiddler.getFieldString(field), false, false, true)\\n        } catch (error) {\\n          // We cannot resolve the previous value\\n          $tw.ipfs.getLogger().error(error)\\n          $tw.utils.alert(ipfsUtilsName, error.message)\\n        }\\n        $tw.ipfs.addToPin(resolvedUrl !== null ? resolvedUrl.pathname : null)\\n        $tw.ipfs.addToUnpin(oldResolvedUrl !== null ? oldResolvedUrl.pathname : null)\\n      }\\n    }\\n    // Tag management\\n    var addTags = []\\n    var removeTags = []\\n    if (canonicalUri == null && exportUri == null && importUri == null) {\\n      removeTags.push('$:/isExported', '$:/isImported', '$:/isIpfs')\\n    }\\n    if (isIpfs) {\\n      addTags.push('$:/isIpfs')\\n    } else {\\n      if (removeTags.indexOf('$:/isIpfs') === -1) {\\n        removeTags.push('$:/isIpfs')\\n      }\\n    }\\n    if (canonicalUri !== null) {\\n      // Attachment\\n      if (info.encoding === 'base64' || type === 'image/svg+xml') {\\n        if (addTags.indexOf('$:/isAttachment') === -1) {\\n          addTags.push('$:/isAttachment')\\n        }\\n        if (removeTags.indexOf('$:/isEmbedded') === -1) {\\n          removeTags.push('$:/isEmbedded')\\n        }\\n        if (importUri !== null) {\\n          if (addTags.indexOf('$:/isImported') === -1) {\\n            addTags.push('$:/isImported')\\n          }\\n        } else {\\n          if (removeTags.indexOf('$:/isImported') === -1) {\\n            removeTags.push('$:/isImported')\\n          }\\n        }\\n        // Others\\n      } else {\\n        if (removeTags.indexOf('$:/isAttachment') === -1) {\\n          removeTags.push('$:/isAttachment')\\n        }\\n        if (removeTags.indexOf('$:/isEmbedded') === -1) {\\n          removeTags.push('$:/isEmbedded')\\n        }\\n        if (addTags.indexOf('$:/isImported') === -1) {\\n          addTags.push('$:/isImported')\\n        }\\n      }\\n    } else {\\n      // Attachment\\n      if (info.encoding === 'base64' || type === 'image/svg+xml') {\\n        if (addTags.indexOf('$:/isAttachment') === -1) {\\n          addTags.push('$:/isAttachment')\\n        }\\n        if (addTags.indexOf('$:/isEmbedded') === -1) {\\n          addTags.push('$:/isEmbedded')\\n        }\\n        // Others\\n      } else {\\n        if (removeTags.indexOf('$:/isAttachment') === -1) {\\n          removeTags.push('$:/isAttachment')\\n        }\\n        if (removeTags.indexOf('$:/isEmbedded') === -1) {\\n          removeTags.push('$:/isEmbedded')\\n        }\\n      }\\n      if (importUri !== null) {\\n        if (addTags.indexOf('$:/isImported') === -1) {\\n          addTags.push('$:/isImported')\\n        }\\n      } else {\\n        if (removeTags.indexOf('$:/isImported') === -1) {\\n          removeTags.push('$:/isImported')\\n        }\\n      }\\n    }\\n    if (exportUri !== null) {\\n      if (addTags.indexOf('$:/isExported') === -1) {\\n        addTags.push('$:/isExported')\\n      }\\n    } else {\\n      if (removeTags.indexOf('$:/isExported') === -1) {\\n        removeTags.push('$:/isExported')\\n      }\\n    }\\n    if (addTags.length > 0 || removeTags.length > 0) {\\n      updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: updatedTiddler,\\n        addTags: addTags,\\n        removeTags: removeTags,\\n      })\\n    }\\n    return updatedTiddler\\n  }\\n\\n  exports.exportToIpfs = async function (tiddler, content, fields, field, ipfsPath, incomingName) {\\n    // Check\\n    if (tiddler === undefined || tiddler == null) {\\n      return false\\n    }\\n    if (content === undefined || content == null) {\\n      return false\\n    }\\n    fields = fields !== undefined && fields !== null ? fields : []\\n    ipfsPath = ipfsPath !== undefined && ipfsPath !== null && ipfsPath.trim() !== '' ? ipfsPath.trim() : '/'\\n    incomingName = incomingName !== undefined && incomingName !== null && incomingName.trim() !== '' ? incomingName.trim() : ''\\n    if (tiddler.fields[field] !== undefined && tiddler.fields[field].endsWith('/')) {\\n      incomingName = `${tiddler.fields[field]}${incomingName}`\\n    } else if (tiddler.fields[field] !== undefined) {\\n      incomingName = `${tiddler.fields[field]}/${incomingName}`\\n    } else {\\n      incomingName = `/${incomingName}`\\n    }\\n    var account = null\\n    var addedCid = null\\n    var addedPath = ''\\n    var addedUri = null\\n    var ipfsCid = null\\n    var ipnsCid = null\\n    var ipnsKey = null\\n    var normalizedUrl = null\\n    var web3 = null\\n    try {\\n      var { ipfsCid, ipnsCid, ipnsKey, normalizedUrl } = await $tw.ipfs.resolveUrl(tiddler.fields[field], true, true, true)\\n      if (ipnsCid == null && normalizedUrl !== null && (normalizedUrl.hostname.endsWith('.eth') || normalizedUrl.hostname.endsWith('.eth.link'))) {\\n        var ensDomain = normalizedUrl.hostname\\n        if (normalizedUrl.hostname.endsWith('.eth.link')) {\\n          ensDomain = normalizedUrl.hostname.substring(0, normalizedUrl.hostname.indexOf('.link'))\\n        }\\n        var { account, web3 } = await $tw.ipfs.getEnabledWeb3Provider()\\n        const isOwner = await $tw.ipfs.isEnsOwner(ensDomain, web3, account)\\n        if (isOwner === false) {\\n          const err = new Error('Unauthorized Account...')\\n          err.name = 'OwnerError'\\n          throw err\\n        }\\n      }\\n    } catch (error) {\\n      if (error.name !== 'OwnerError') {\\n        $tw.ipfs.getLogger().error(error)\\n      }\\n      $tw.utils.alert(ipfsUtilsName, error.message)\\n      return false\\n    }\\n    $tw.ipfs.getLogger().info(`Uploading: ${content.length}\\n path: ${ipfsPath}`)\\n    try {\\n      var { cid: addedCid, path: addedPath, uri: addedUri } = await $tw.ipfs.addContentToIpfs(content, ipfsPath)\\n    } catch (error) {\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(ipfsUtilsName, error.message)\\n      return false\\n    }\\n    if (ipnsCid !== null) {\\n      if (ipnsKey !== null) {\\n        $tw.utils.alert(ipfsUtilsName, `Publishing IPNS key: ${ipnsKey}`)\\n        $tw.ipfs\\n          .pinToIpfs(addedPath)\\n          .then(pin => {\\n            $tw.ipfs\\n              .publishIpnsKey(addedCid, ipnsCid, ipnsKey)\\n              .then(dummy => {\\n                $tw.utils.alert(ipfsUtilsName, `Published IPNS key: ${ipnsKey}`)\\n                if ($tw.utils.getIpfsUnpin()) {\\n                  $tw.ipfs\\n                    .unpinFromIpfs(`/${ipfsKeyword}/${ipfsCid}`)\\n                    .then(unpin => {\\n                      if (unpin !== undefined && unpin !== null) {\\n                        $tw.ipfs.removeFromPinUnpin(`/${ipfsKeyword}/${ipfsCid}`)\\n                      }\\n                    })\\n                    .catch(error => {\\n                      $tw.ipfs.getLogger().error(error)\\n                      $tw.utils.alert(ipfsUtilsName, error.message)\\n                    })\\n                }\\n                // Update tiddler\\n                fields.push({ key: field, value: incomingName })\\n                const updatedTiddler = $tw.utils.updateTiddler({\\n                  tiddler: tiddler,\\n                  fields: fields,\\n                })\\n                $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n                  $tw.wiki.addTiddler(updatedTiddler)\\n                })\\n              })\\n              .catch(error => {\\n                $tw.ipfs.getLogger().error(error)\\n                $tw.utils.alert(ipfsUtilsName, error.message)\\n                $tw.ipfs.addToUnpin(addedPath)\\n                // Update tiddler\\n                fields.push({ key: field, value: incomingName })\\n                fields.push({ key: `${field}_ipfs`, value: addedUri })\\n                const updatedTiddler = $tw.utils.updateTiddler({\\n                  tiddler: tiddler,\\n                  fields: fields,\\n                })\\n                $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n                  $tw.wiki.addTiddler(updatedTiddler)\\n                })\\n              })\\n          })\\n          .catch(error => {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(ipfsUtilsName, error.message)\\n            // Update tiddler\\n            fields.push({ key: field, value: incomingName })\\n            fields.push({ key: `${field}_ipfs`, value: addedUri })\\n            const updatedTiddler = $tw.utils.updateTiddler({\\n              tiddler: tiddler,\\n              fields: fields,\\n            })\\n            $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n              $tw.wiki.addTiddler(updatedTiddler)\\n            })\\n          })\\n      }\\n    } else if (normalizedUrl !== null && normalizedUrl.hostname.endsWith('.eth.link')) {\\n      $tw.ipfs\\n        .pinToIpfs(addedPath)\\n        .then(pin => {\\n          $tw.ipfs\\n            .setContentHash(normalizedUrl.hostname, `/${ipfsKeyword}/${addedCid}`, web3, account)\\n            .then(dummy => {\\n              if ($tw.utils.getIpfsUnpin()) {\\n                $tw.ipfs\\n                  .unpinFromIpfs(addedPath)\\n                  .then(unpin => {\\n                    if (unpin !== undefined && unpin !== null) {\\n                      $tw.ipfs.removeFromPinUnpin(addedPath)\\n                    }\\n                  })\\n                  .catch(error => {\\n                    $tw.ipfs.getLogger().error(error)\\n                    $tw.utils.alert(ipfsUtilsName, error.message)\\n                  })\\n              }\\n              // Update tiddler\\n              fields.push({ key: field, value: incomingName })\\n              const updatedTiddler = $tw.utils.updateTiddler({\\n                tiddler: tiddler,\\n                fields: fields,\\n              })\\n              $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n                $tw.wiki.addTiddler(updatedTiddler)\\n              })\\n            })\\n            .catch(error => {\\n              if (error.name !== 'OwnerError' && error.name !== 'RejectedUserRequest' && error.name !== 'UnauthorizedUserAccount') {\\n                $tw.ipfs.getLogger().error(error)\\n              }\\n              $tw.utils.alert(ipfsUtilsName, error.message)\\n              $tw.ipfs.addToUnpin(addedPath)\\n              // Update tiddler\\n              fields.push({ key: field, value: incomingName })\\n              fields.push({ key: `${field}_ipfs`, value: addedUri })\\n              const updatedTiddler = $tw.utils.updateTiddler({\\n                tiddler: tiddler,\\n                fields: fields,\\n              })\\n              $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n                $tw.wiki.addTiddler(updatedTiddler)\\n              })\\n            })\\n        })\\n        .catch(error => {\\n          $tw.ipfs.getLogger().error(error)\\n          $tw.utils.alert(ipfsUtilsName, error.message)\\n          // Update tiddler\\n          fields.push({ key: field, value: incomingName })\\n          fields.push({ key: `${field}_ipfs`, value: addedUri })\\n          var updatedTiddler = $tw.utils.updateTiddler({\\n            tiddler: tiddler,\\n            fields: fields,\\n          })\\n          $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n            $tw.wiki.addTiddler(updatedTiddler)\\n          })\\n        })\\n    } else {\\n      if (field === '_canonical_uri' && tiddler.fields._canonical_uri !== undefined && tiddler.fields._canonical_uri !== null && tiddler.fields._canonical_uri.trim() !== '') {\\n        fields.push({ key: field, value: incomingName })\\n      } else {\\n        fields.push({ key: field, value: addedUri })\\n      }\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: fields,\\n      })\\n      $tw.utils.processUpdatedTiddler(updatedTiddler).then(updatedTiddler => {\\n        $tw.wiki.addTiddler(updatedTiddler)\\n      })\\n    }\\n    return true\\n  }\\n\\n  exports.locateNavigatorWidget = function (element) {\\n    if (element.parseTreeNode.type === 'navigator') {\\n      return element\\n    }\\n    if (element.children) {\\n      for (var i = 0; i < element.children.length; i++) {\\n        const found = $tw.utils.locateNavigatorWidget(element.children[i])\\n        if (found) {\\n          return found\\n        }\\n      }\\n    }\\n    return null\\n  }\\n\\n  exports.exportTiddlersAsJson = async function (tiddlers, exportUri, spaces) {\\n    var json\\n    var data = []\\n    var spaces = spaces !== undefined && spaces !== null ? spaces : $tw.config.preferences.jsonSpaces\\n    // Process Tiddlers\\n    if (tiddlers) {\\n      for (var t = 0; t < tiddlers.length; t++) {\\n        // Load Tiddler\\n        var current = $tw.wiki.getTiddler(tiddlers[t])\\n        // Process\\n        var fields = {}\\n        // Process fields\\n        for (var field in current.fields) {\\n          // Discard\\n          if (field === 'tags' || field === '_export_uri') {\\n            continue\\n          }\\n          var ipfsCid = null\\n          var ipnsIdentifier = null\\n          var ipfsPath = null\\n          var fieldValue = current.getFieldString(field)\\n          if (field === '_canonical_uri' && fieldValue === exportUri) {\\n            continue\\n          }\\n          if (field === '_import_uri' && fieldValue === exportUri) {\\n            continue\\n          }\\n          try {\\n            var { ipfsCid, ipnsIdentifier, ipfsPath } = $tw.ipfs.getIpfsIdentifier(fieldValue)\\n          } catch (error) {\\n            $tw.ipfs.getLogger().error(error)\\n            $tw.utils.alert(ipfsUtilsName, error.message)\\n            return null\\n          }\\n          if (ipnsIdentifier !== null) {\\n            fieldValue = `ipns://${ipnsIdentifier}${ipfsPath}`\\n          } else if (ipfsCid !== null) {\\n            fieldValue = `ipfs://${ipfsCid}${ipfsPath}`\\n          }\\n          // Store field\\n          fields[field] = fieldValue\\n        }\\n        // Process tags\\n        var tags = current.fields.tags\\n        if (tags !== undefined && tags !== null) {\\n          var tagValues = ''\\n          for (var i = 0; i < tags.length; i++) {\\n            const tag = tags[i]\\n            // Discard\\n            if (tag === '$:/isExported' || tag === '$:/isImported') {\\n              continue\\n            }\\n            tagValues = (tagValues.length === 0 ? '[[' : `${tagValues} [[`) + `${tag}]]`\\n          }\\n          // Store tags\\n          fields.tags = tagValues\\n        }\\n        // Store\\n        data.push(fields)\\n      }\\n      json = JSON.stringify(data, null, spaces)\\n    }\\n    return json\\n  }\\n\\n  exports.exportTiddler = async function (tiddler, child) {\\n    // Check\\n    if (tiddler === undefined || tiddler == null) {\\n      const error = new Error('Unknown Tiddler...')\\n      $tw.ipfs.getLogger().error(error)\\n      $tw.utils.alert(ipfsUtilsName, error.message)\\n      return {\\n        content: null,\\n        extension: null,\\n      }\\n    }\\n    const title = tiddler.fields.title\\n    // Filter\\n    var exportFilter = `[[${tiddler.fields.title}]]`\\n    // Child filters\\n    if (child) {\\n      // Links\\n      const linked = $tw.wiki.getTiddlerLinks(title)\\n      $tw.ipfs.getLogger().info(`Found ${linked.length} Tiddler link(s)...`)\\n      // Transcluded\\n      const transcluded = $tw.utils.transcludeContent(title)\\n      $tw.ipfs.getLogger().info(`Found ${transcluded.length} transcluded Tiddler reference(s)...`)\\n      const filtered = linked.concat(transcluded)\\n      // Process filtered content\\n      for (var i = 0; i < filtered.length; i++) {\\n        if (exportFilter.includes(`[[${filtered[i]}]]`) === false) {\\n          exportFilter = `${exportFilter} [[${filtered[i]}]]`\\n        }\\n      }\\n    }\\n    var content = null\\n    var extension = null\\n    var type = null\\n    if (child || $tw.utils.getIpfsExport() === 'json') {\\n      content = await $tw.utils.exportTiddlersAsJson($tw.wiki.filterTiddlers(exportFilter), tiddler.fields._export_uri)\\n      if (content !== null) {\\n        const navigator = $tw.utils.locateNavigatorWidget($tw.pageWidgetNode)\\n        if (navigator) {\\n          navigator.dispatchEvent({\\n            target: tiddler.fields.title,\\n            type: 'tm-ipfs-export-tiddlers',\\n            param: content,\\n          })\\n          return {\\n            content: null,\\n            extension: null,\\n          }\\n        }\\n      }\\n    } else if ($tw.utils.getIpfsExport() === 'static') {\\n      extension = '.html'\\n      type = 'text/html'\\n      const options = {\\n        downloadType: 'text/plain',\\n        method: 'download',\\n        template: '$:/core/templates/exporters/StaticRiver',\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      }\\n      content = $tw.wiki.renderTiddler('text/plain', '$:/core/templates/exporters/StaticRiver', options)\\n    } else {\\n      extension = '.tid'\\n      const options = {\\n        downloadType: 'text/plain',\\n        method: 'download',\\n        template: '$:/core/templates/exporters/TidFile',\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      }\\n      content = $tw.wiki.renderTiddler('text/plain', '$:/core/templates/exporters/TidFile', options)\\n    }\\n    if (content !== undefined && content !== null) {\\n      return {\\n        content: await $tw.ipfs.processContent(tiddler, content, 'utf8', type != null ? type : 'text/plain'),\\n        extension: extension,\\n      }\\n    }\\n    return {\\n      content: null,\\n      extension: null,\\n    }\\n  }\\n\\n  exports.transcludeContent = function (title) {\\n    var tiddlers = []\\n    // Build a transclude widget\\n    var transclude = $tw.wiki.makeTranscludeWidget(title)\\n    // Build a fake document element\\n    const container = $tw.fakeDocument.createElement('div')\\n    // Transclude\\n    transclude.render(container, null)\\n    // Process children\\n    $tw.utils.locateTiddlers(transclude, tiddlers)\\n    // Return\\n    return tiddlers\\n  }\\n\\n  exports.locateTiddlers = function (transclude, tiddlers) {\\n    // Children lookup\\n    for (var i = 0; i < transclude.children.length; i++) {\\n      // Current child\\n      const child = transclude.children[i]\\n      if (child.variables !== undefined && child.variables !== null) {\\n        // Locate Tiddler\\n        const currentTiddler = 'currentTiddler'\\n        const current = child.variables[currentTiddler]\\n        if (current !== undefined && current !== null && current.value !== undefined && current.value !== null) {\\n          if (tiddlers.indexOf(current.value) === -1) {\\n            tiddlers.push(current.value)\\n          }\\n        }\\n      }\\n      // Process children\\n      $tw.utils.locateTiddlers(child, tiddlers)\\n    }\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/core/modules/widgets/button.js\": {\n            \"title\": \"$:/core/modules/widgets/button.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/button.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nButton widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var ButtonWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\n   * Inherit from the base widget class\\n   */\\n  ButtonWidget.prototype = new Widget()\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  ButtonWidget.prototype.render = function (parent, nextSibling) {\\n    var self = this\\n    var tag = 'button'\\n    var domNode\\n    // Remember parent\\n    this.parentDomNode = parent\\n    // Compute attributes and execute state\\n    this.computeAttributes()\\n    this.execute()\\n    // Create element\\n    if (this.buttonTag && $tw.config.htmlUnsafeElements.indexOf(this.buttonTag) === -1) {\\n      tag = this.buttonTag\\n    }\\n    domNode = this.document.createElement(tag)\\n    this.domNode = domNode\\n    // Assign classes\\n    var classes = this.class.split(' ') || []\\n    var isPoppedUp = (this.popup || this.popupTitle) && this.isPoppedUp()\\n    if (this.selectedClass) {\\n      if ((this.set || this.setTitle) && this.setTo && this.isSelected()) {\\n        $tw.utils.pushTop(classes, this.selectedClass.split(' '))\\n      }\\n      if (isPoppedUp) {\\n        $tw.utils.pushTop(classes, this.selectedClass.split(' '))\\n      }\\n    }\\n    if (isPoppedUp) {\\n      $tw.utils.pushTop(classes, 'tc-popup-handle')\\n    }\\n    domNode.className = classes.join(' ')\\n    // Assign other attributes\\n    if (this.style) {\\n      domNode.setAttribute('style', this.style)\\n    }\\n    if (this.tooltip) {\\n      domNode.setAttribute('title', this.tooltip)\\n    }\\n    if (this['aria-label']) {\\n      domNode.setAttribute('aria-label', this['aria-label'])\\n    }\\n    if (this.popup || this.popupTitle) {\\n      domNode.setAttribute('aria-expanded', isPoppedUp ? 'true' : 'false')\\n    }\\n    // Set the tabindex\\n    if (this.tabIndex) {\\n      domNode.setAttribute('tabindex', this.tabIndex)\\n    }\\n    if (this.isDisabled === 'yes') {\\n      domNode.setAttribute('disabled', true)\\n    }\\n    // Add a click event handler\\n    domNode.addEventListener(\\n      'click',\\n      function (event) {\\n        var handled = false\\n        if (self.invokeActions(self, event)) {\\n          handled = true\\n        }\\n        if (self.to) {\\n          self.navigateTo(event)\\n          handled = true\\n        }\\n        if (self.message) {\\n          self.dispatchMessage(event)\\n          handled = true\\n        }\\n        if (self.popup || self.popupTitle) {\\n          self.triggerPopup(event)\\n          handled = true\\n        }\\n        if (self.set || self.setTitle) {\\n          self.setTiddler()\\n          handled = true\\n        }\\n        if (self.actions) {\\n          var modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event)\\n          self.invokeActionString(self.actions, self, event, { modifier: modifierKey })\\n        }\\n        if (handled) {\\n          event.preventDefault()\\n          event.stopPropagation()\\n        }\\n        return handled\\n      },\\n      false\\n    )\\n    // Make it draggable if required\\n    if (this.dragTiddler || this.dragFilter) {\\n      $tw.utils.makeDraggable({\\n        domNode: domNode,\\n        dragTiddlerFn: function () {\\n          return self.dragTiddler\\n        },\\n        dragFilterFn: function () {\\n          return self.dragFilter\\n        },\\n        widget: this,\\n      })\\n    }\\n    // Insert element\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n  }\\n\\n  /*\\n   * We don't allow actions to propagate because we trigger actions ourselves\\n   */\\n  ButtonWidget.prototype.allowActionPropagation = function () {\\n    return false\\n  }\\n\\n  ButtonWidget.prototype.getBoundingClientRect = function () {\\n    return this.domNodes[0].getBoundingClientRect()\\n  }\\n\\n  ButtonWidget.prototype.isSelected = function () {\\n    return this.setTitle\\n      ? (this.setField\\n          ? this.wiki.getTiddler(this.setTitle).getFieldString(this.setField) === this.setTo\\n          : this.setIndex\\n          ? this.wiki.extractTiddlerDataItem(this.setTitle, this.setIndex) === this.setTo\\n          : this.wiki.getTiddlerText(this.setTitle)) ||\\n          this.defaultSetValue ||\\n          this.getVariable('currentTiddler')\\n      : this.wiki.getTextReference(this.set, this.defaultSetValue, this.getVariable('currentTiddler')) === this.setTo\\n  }\\n\\n  ButtonWidget.prototype.isPoppedUp = function () {\\n    var tiddler = this.popupTitle ? this.wiki.getTiddler(this.popupTitle) : this.wiki.getTiddler(this.popup)\\n    var result = tiddler && tiddler.fields.text ? $tw.popup.readPopupState(tiddler.fields.text) : false\\n    return result\\n  }\\n\\n  ButtonWidget.prototype.navigateTo = function (event) {\\n    var bounds = this.getBoundingClientRect()\\n    this.dispatchEvent({\\n      type: 'tm-navigate',\\n      navigateTo: this.to,\\n      navigateFromTitle: this.getVariable('storyTiddler'),\\n      navigateFromNode: this,\\n      navigateFromClientRect: {\\n        top: bounds.top,\\n        left: bounds.left,\\n        width: bounds.width,\\n        right: bounds.right,\\n        bottom: bounds.bottom,\\n        height: bounds.height,\\n      },\\n      navigateSuppressNavigation: event.metaKey || event.ctrlKey || event.button === 1,\\n      event: event,\\n    })\\n  }\\n\\n  ButtonWidget.prototype.dispatchMessage = function (event) {\\n    this.dispatchEvent({\\n      type: this.message,\\n      param: this.param,\\n      tiddlerTitle: this.getVariable('currentTiddler'),\\n      event: event,\\n    })\\n  }\\n\\n  ButtonWidget.prototype.triggerPopup = function (event) {\\n    if (this.popupTitle) {\\n      $tw.popup.triggerPopup({\\n        domNode: this.domNodes[0],\\n        title: this.popupTitle,\\n        wiki: this.wiki,\\n        noStateReference: true,\\n      })\\n    } else {\\n      $tw.popup.triggerPopup({\\n        domNode: this.domNodes[0],\\n        title: this.popup,\\n        wiki: this.wiki,\\n      })\\n    }\\n  }\\n\\n  ButtonWidget.prototype.setTiddler = function () {\\n    if (this.setTitle) {\\n      this.setField\\n        ? this.wiki.setText(this.setTitle, this.setField, undefined, this.setTo)\\n        : this.setIndex\\n        ? this.wiki.setText(this.setTitle, undefined, this.setIndex, this.setTo)\\n        : this.wiki.setText(this.setTitle, 'text', undefined, this.setTo)\\n    } else {\\n      this.wiki.setTextReference(this.set, this.setTo, this.getVariable('currentTiddler'))\\n    }\\n  }\\n\\n  /*\\n   * Compute the internal state of the widget\\n   */\\n  ButtonWidget.prototype.execute = function () {\\n    // Get attributes\\n    this.actions = this.getAttribute('actions')\\n    this.to = this.getAttribute('to')\\n    this.message = this.getAttribute('message')\\n    this.param = this.getAttribute('param')\\n    this.set = this.getAttribute('set')\\n    this.setTo = this.getAttribute('setTo')\\n    this.popup = this.getAttribute('popup')\\n    this.hover = this.getAttribute('hover')\\n    this['aria-label'] = this.getAttribute('aria-label')\\n    this.tooltip = this.getAttribute('tooltip')\\n    this.style = this.getAttribute('style')\\n    this.class = this.getAttribute('class', '')\\n    this.selectedClass = this.getAttribute('selectedClass')\\n    this.defaultSetValue = this.getAttribute('default', '')\\n    this.buttonTag = this.getAttribute('tag')\\n    this.dragTiddler = this.getAttribute('dragTiddler')\\n    this.dragFilter = this.getAttribute('dragFilter')\\n    this.setTitle = this.getAttribute('setTitle')\\n    this.setField = this.getAttribute('setField')\\n    this.setIndex = this.getAttribute('setIndex')\\n    this.popupTitle = this.getAttribute('popupTitle')\\n    this.tabIndex = this.getAttribute('tabindex')\\n    this.isDisabled = this.getAttribute('disabled', 'no')\\n    // Make child widgets\\n    this.makeChildWidgets()\\n  }\\n\\n  ButtonWidget.prototype.updateDomNodeClasses = function () {\\n    var domNodeClasses = this.domNode.className.split(' ')\\n    var oldClasses = this.class.split(' ')\\n    var newClasses\\n    this.class = this.getAttribute('class', '')\\n    newClasses = this.class.split(' ')\\n    //Remove classes assigned from the old value of class attribute\\n    $tw.utils.each(oldClasses, function (oldClass) {\\n      var i = domNodeClasses.indexOf(oldClass)\\n      if (i !== -1) {\\n        domNodeClasses.splice(i, 1)\\n      }\\n    })\\n    //Add new classes from updated class attribute.\\n    $tw.utils.pushTop(domNodeClasses, newClasses)\\n    this.domNode.className = domNodeClasses.join(' ')\\n  }\\n\\n  /*\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  ButtonWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if (\\n      changedAttributes.tooltip ||\\n      changedAttributes.actions ||\\n      changedAttributes.to ||\\n      changedAttributes.message ||\\n      changedAttributes.param ||\\n      changedAttributes.set ||\\n      changedAttributes.setTo ||\\n      changedAttributes.popup ||\\n      changedAttributes.hover ||\\n      changedAttributes.selectedClass ||\\n      changedAttributes.style ||\\n      changedAttributes.dragFilter ||\\n      changedAttributes.dragTiddler ||\\n      (this.set && changedTiddlers[this.set]) ||\\n      (this.popup && changedTiddlers[this.popup]) ||\\n      (this.popupTitle && changedTiddlers[this.popupTitle]) ||\\n      changedAttributes.setTitle ||\\n      changedAttributes.setField ||\\n      changedAttributes.setIndex ||\\n      changedAttributes.popupTitle ||\\n      changedAttributes.disabled\\n    ) {\\n      this.refreshSelf()\\n      return true\\n    } else if (changedAttributes.class) {\\n      this.updateDomNodeClasses()\\n    }\\n    return this.refreshChildren(changedTiddlers)\\n  }\\n\\n  exports.button = ButtonWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/checkbox.js\": {\n            \"title\": \"$:/core/modules/widgets/checkbox.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/checkbox.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nCheckbox widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var CheckboxWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\nInherit from the base widget class\\n*/\\n  CheckboxWidget.prototype = new Widget()\\n\\n  /*\\nRender this widget into the DOM\\n*/\\n  CheckboxWidget.prototype.render = function (parent, nextSibling) {\\n    // Save the parent dom node\\n    this.parentDomNode = parent\\n    // Compute our attributes\\n    this.computeAttributes()\\n    // Execute our logic\\n    this.execute()\\n    // Create our elements\\n    this.labelDomNode = this.document.createElement('label')\\n    this.labelDomNode.setAttribute('class', this.checkboxClass)\\n    this.inputDomNode = this.document.createElement('input')\\n    this.inputDomNode.setAttribute('type', 'checkbox')\\n    if (this.getValue()) {\\n      this.inputDomNode.setAttribute('checked', 'true')\\n    }\\n    if (this.isDisabled === 'yes') {\\n      this.inputDomNode.setAttribute('disabled', true)\\n    }\\n    this.inputDomNode.setAttribute('title', this.checkboxTooltip)\\n    this.labelDomNode.appendChild(this.inputDomNode)\\n    this.spanDomNode = this.document.createElement('span')\\n    this.labelDomNode.appendChild(this.spanDomNode)\\n    // Add a click event handler\\n    $tw.utils.addEventListeners(this.inputDomNode, [\\n      {\\n        name: 'change',\\n        handlerObject: this,\\n        handlerMethod: 'handleChangeEvent',\\n      },\\n    ])\\n    // Insert the label into the DOM and render any children\\n    parent.insertBefore(this.labelDomNode, nextSibling)\\n    this.renderChildren(this.spanDomNode, null)\\n    this.domNodes.push(this.labelDomNode)\\n  }\\n\\n  CheckboxWidget.prototype.getValue = function () {\\n    var tiddler = this.wiki.getTiddler(this.checkboxTitle)\\n    if (tiddler) {\\n      if (this.checkboxTag) {\\n        if (this.checkboxInvertTag) {\\n          return !tiddler.hasTag(this.checkboxTag)\\n        } else {\\n          return tiddler.hasTag(this.checkboxTag)\\n        }\\n      }\\n      if (this.checkboxField) {\\n        var value\\n        if ($tw.utils.hop(tiddler.fields, this.checkboxField)) {\\n          value = tiddler.fields[this.checkboxField] || ''\\n        } else {\\n          value = this.checkboxDefault || ''\\n        }\\n        if (value === this.checkboxChecked) {\\n          return true\\n        }\\n        if (value === this.checkboxUnchecked) {\\n          return false\\n        }\\n      }\\n      if (this.checkboxIndex) {\\n        var value = this.wiki.extractTiddlerDataItem(tiddler, this.checkboxIndex, this.checkboxDefault || '')\\n        if (value === this.checkboxChecked) {\\n          return true\\n        }\\n        if (value === this.checkboxUnchecked) {\\n          return false\\n        }\\n      }\\n    } else {\\n      if (this.checkboxTag) {\\n        return false\\n      }\\n      if (this.checkboxField) {\\n        if (this.checkboxDefault === this.checkboxChecked) {\\n          return true\\n        }\\n        if (this.checkboxDefault === this.checkboxUnchecked) {\\n          return false\\n        }\\n      }\\n    }\\n    return false\\n  }\\n\\n  CheckboxWidget.prototype.handleChangeEvent = function (event) {\\n    var checked = this.inputDomNode.checked\\n    var tiddler = this.wiki.getTiddler(this.checkboxTitle)\\n    var fallbackFields = { text: '' }\\n    var newFields = { title: this.checkboxTitle }\\n    var hasChanged = false\\n    var tagCheck = false\\n    var hasTag = tiddler && tiddler.hasTag(this.checkboxTag)\\n    var value = checked ? this.checkboxChecked : this.checkboxUnchecked\\n    if (this.checkboxTag && this.checkboxInvertTag === 'yes') {\\n      tagCheck = hasTag === checked\\n    } else {\\n      tagCheck = hasTag !== checked\\n    }\\n    // Set the tag if specified\\n    if (this.checkboxTag && (!tiddler || tagCheck)) {\\n      newFields.tags = tiddler ? (tiddler.fields.tags || []).slice(0) : []\\n      var pos = newFields.tags.indexOf(this.checkboxTag)\\n      if (pos !== -1) {\\n        newFields.tags.splice(pos, 1)\\n      }\\n      if (this.checkboxInvertTag === 'yes' && !checked) {\\n        newFields.tags.push(this.checkboxTag)\\n      } else if (this.checkboxInvertTag !== 'yes' && checked) {\\n        newFields.tags.push(this.checkboxTag)\\n      }\\n      hasChanged = true\\n    }\\n    // Set the field if specified\\n    if (this.checkboxField) {\\n      if (!tiddler || tiddler.fields[this.checkboxField] !== value) {\\n        newFields[this.checkboxField] = value\\n        hasChanged = true\\n      }\\n    }\\n    // Set the index if specified\\n    if (this.checkboxIndex) {\\n      var indexValue = this.wiki.extractTiddlerDataItem(this.checkboxTitle, this.checkboxIndex)\\n      if (!tiddler || indexValue !== value) {\\n        hasChanged = true\\n      }\\n    }\\n    if (hasChanged) {\\n      if (this.checkboxIndex) {\\n        this.wiki.setText(this.checkboxTitle, '', this.checkboxIndex, value)\\n      } else {\\n        this.wiki.addTiddler(new $tw.Tiddler(this.wiki.getCreationFields(), fallbackFields, tiddler, newFields, this.wiki.getModificationFields()))\\n      }\\n    }\\n    // Trigger actions\\n    if (this.checkboxActions) {\\n      this.invokeActionString(this.checkboxActions, this, event)\\n    }\\n    if (this.checkboxCheckActions && checked) {\\n      this.invokeActionString(this.checkboxCheckActions, this, event)\\n    }\\n    if (this.checkboxUncheckActions && !checked) {\\n      this.invokeActionString(this.checkboxUncheckActions, this, event)\\n    }\\n  }\\n\\n  /**\\n   * Compute the internal state of the widget\\n   */\\n  CheckboxWidget.prototype.execute = function () {\\n    // Get the parameters from the attributes\\n    this.checkboxActions = this.getAttribute('actions')\\n    this.checkboxCheckActions = this.getAttribute('checkactions')\\n    this.checkboxUncheckActions = this.getAttribute('uncheckactions')\\n    this.checkboxTooltip = this.getAttribute('title')\\n    this.checkboxTitle = this.getAttribute('tiddler', this.getVariable('currentTiddler'))\\n    this.checkboxTag = this.getAttribute('tag')\\n    this.checkboxField = this.getAttribute('field')\\n    this.checkboxIndex = this.getAttribute('index')\\n    this.checkboxChecked = this.getAttribute('checked')\\n    this.checkboxUnchecked = this.getAttribute('unchecked')\\n    this.checkboxDefault = this.getAttribute('default')\\n    this.checkboxClass = this.getAttribute('class', '')\\n    this.checkboxInvertTag = this.getAttribute('invertTag', '')\\n    this.isDisabled = this.getAttribute('disabled', 'no')\\n    // Make the child widgets\\n    this.makeChildWidgets()\\n  }\\n\\n  /**\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  CheckboxWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if (\\n      changedAttributes.title ||\\n      changedAttributes.tiddler ||\\n      changedAttributes.tag ||\\n      changedAttributes.invertTag ||\\n      changedAttributes.field ||\\n      changedAttributes.index ||\\n      changedAttributes.checked ||\\n      changedAttributes.unchecked ||\\n      changedAttributes.default ||\\n      changedAttributes.class ||\\n      changedAttributes.disabled\\n    ) {\\n      this.refreshSelf()\\n      return true\\n    } else {\\n      var refreshed = false\\n      if (changedTiddlers[this.checkboxTitle]) {\\n        this.inputDomNode.checked = this.getValue()\\n        refreshed = true\\n      }\\n      return this.refreshChildren(changedTiddlers) || refreshed\\n    }\\n  }\\n\\n  exports.checkbox = CheckboxWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/compress.js\": {\n            \"title\": \"$:/core/modules/widgets/compress.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/compress.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nCompress widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var CompressWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\n   * Inherit from the base widget class\\n   */\\n  CompressWidget.prototype = new Widget()\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  CompressWidget.prototype.render = function (parent, nextSibling) {\\n    this.parentDomNode = parent\\n    this.computeAttributes()\\n    this.execute()\\n    var textNode = this.document.createTextNode(this.encryptedText)\\n    if ($tw.crypto.hasEncryptionPublicKey()) {\\n      var sign = $tw.wiki.getTiddler('$:/isSigned')\\n      sign = sign !== undefined ? sign.fields.text === 'yes' : false\\n      if (sign) {\\n        textNode.sign = true\\n      }\\n    }\\n    parent.insertBefore(textNode, nextSibling)\\n    this.domNodes.push(textNode)\\n  }\\n\\n  /*\\n   * Compute the internal state of the widget\\n   */\\n  CompressWidget.prototype.execute = function () {\\n    // Get parameters from our attributes\\n    this.filter = this.getAttribute('filter', '[!is[system]]')\\n    // Compress the filtered tiddlers\\n    var tiddlers = this.wiki.filterTiddlers(this.filter)\\n    var json = {}\\n    var self = this\\n    $tw.utils.each(tiddlers, function (title) {\\n      var tiddler = self.wiki.getTiddler(title)\\n      var jsonTiddler = {}\\n      for (var f in tiddler.fields) {\\n        jsonTiddler[f] = tiddler.getFieldString(f)\\n      }\\n      json[title] = jsonTiddler\\n    })\\n    var content = { compressed: $tw.compress.deflate(JSON.stringify(json)) }\\n    var encrypt = $tw.wiki.getTiddler('$:/isEncrypted')\\n    encrypt = encrypt !== undefined ? encrypt.fields.text === 'yes' : false\\n    if (encrypt) {\\n      content.compressed = $tw.crypto.encrypt(content.compressed)\\n      if ($tw.crypto.hasEncryptionPublicKey()) {\\n        content.keccak256 = $tw.crypto.keccak256(content.compressed)\\n      }\\n    }\\n    content = JSON.stringify(content)\\n    this.encryptedText = $tw.utils.htmlEncode(content)\\n  }\\n\\n  /*\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  CompressWidget.prototype.refresh = function (changedTiddlers) {\\n    // We don't need to worry about refreshing because the compress widget isn't for interactive use\\n    return false\\n  }\\n\\n  exports.compress = CompressWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/droppable.js\": {\n            \"title\": \"$:/core/modules/widgets/droppable.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/droppable.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDroppable widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var DroppableWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\nInherit from the base widget class\\n*/\\n  DroppableWidget.prototype = new Widget()\\n\\n  /*\\nRender this widget into the DOM\\n*/\\n  DroppableWidget.prototype.render = function (parent, nextSibling) {\\n    var domNode\\n    var tag = this.parseTreeNode.isBlock ? 'div' : 'span'\\n    // Remember parent\\n    this.parentDomNode = parent\\n    // Compute attributes and execute state\\n    this.computeAttributes()\\n    this.execute()\\n    if (this.droppableTag && $tw.config.htmlUnsafeElements.indexOf(this.droppableTag) === -1) {\\n      tag = this.droppableTag\\n    }\\n    // Create element and assign classes\\n    domNode = this.document.createElement(tag)\\n    this.domNode = domNode\\n    this.assignDomNodeClasses()\\n    // Add event handlers\\n    if (this.droppableEnable) {\\n      $tw.utils.addEventListeners(domNode, [\\n        { name: 'dragenter', handlerObject: this, handlerMethod: 'handleDragEnterEvent' },\\n        { name: 'dragover', handlerObject: this, handlerMethod: 'handleDragOverEvent' },\\n        { name: 'dragleave', handlerObject: this, handlerMethod: 'handleDragLeaveEvent' },\\n        { name: 'drop', handlerObject: this, handlerMethod: 'handleDropEvent' },\\n      ])\\n    } else {\\n      $tw.utils.addClass(this.domNode, this.disabledClass)\\n    }\\n    // Insert element\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n    // Stack of outstanding enter/leave events\\n    this.currentlyEntered = []\\n  }\\n\\n  DroppableWidget.prototype.enterDrag = function (event) {\\n    if (this.currentlyEntered.indexOf(event.target) === -1) {\\n      this.currentlyEntered.push(event.target)\\n    }\\n    // If we're entering for the first time we need to apply highlighting\\n    $tw.utils.addClass(this.domNodes[0], 'tc-dragover')\\n  }\\n\\n  DroppableWidget.prototype.leaveDrag = function (event) {\\n    var pos = this.currentlyEntered.indexOf(event.target)\\n    if (pos !== -1) {\\n      this.currentlyEntered.splice(pos, 1)\\n    }\\n    // Remove highlighting if we're leaving externally.\\n    // The hacky second condition is to resolve a problem with Firefox whereby there is an erroneous\\n    // dragenter event if the node being dragged is within the dropzone\\n    if (this.currentlyEntered.length === 0 || (this.currentlyEntered.length === 1 && this.currentlyEntered[0] === $tw.dragInProgress)) {\\n      this.currentlyEntered = []\\n      if (this.domNodes[0]) {\\n        $tw.utils.removeClass(this.domNodes[0], 'tc-dragover')\\n      }\\n    }\\n  }\\n\\n  DroppableWidget.prototype.handleDragEnterEvent = function (event) {\\n    this.enterDrag(event)\\n    // Tell the browser that we're ready to handle the drop\\n    event.preventDefault()\\n    // Tell the browser not to ripple the drag up to any parent drop handlers\\n    event.stopPropagation()\\n    return false\\n  }\\n\\n  DroppableWidget.prototype.handleDragOverEvent = function (event) {\\n    // Check for being over a TEXTAREA or INPUT\\n    if (['TEXTAREA', 'INPUT'].indexOf(event.target.tagName) !== -1) {\\n      return false\\n    }\\n    // Tell the browser that we're still interested in the drop\\n    event.preventDefault()\\n    // Set the drop effect\\n    event.dataTransfer.dropEffect = this.droppableEffect\\n    return false\\n  }\\n\\n  DroppableWidget.prototype.handleDragLeaveEvent = function (event) {\\n    this.leaveDrag(event)\\n    return false\\n  }\\n\\n  DroppableWidget.prototype.handleDropEvent = function (event) {\\n    var self = this\\n    this.leaveDrag(event)\\n    // Check for being over a TEXTAREA or INPUT\\n    if (['TEXTAREA', 'INPUT'].indexOf(event.target.tagName) !== -1) {\\n      return false\\n    }\\n    var dataTransfer = event.dataTransfer\\n    // Remove highlighting\\n    $tw.utils.removeClass(this.domNodes[0], 'tc-dragover')\\n    // Try to import the various data types we understand\\n    $tw.utils.importDataTransfer(dataTransfer, null, function (fieldsArray) {\\n      fieldsArray = fieldsArray.merged ? fieldsArray.merged : fieldsArray\\n      fieldsArray.forEach(function (fields) {\\n        self.performActions(fields.title || fields.text, event)\\n      })\\n    })\\n    // Tell the browser that we handled the drop\\n    event.preventDefault()\\n    // Stop the drop ripple up to any parent handlers\\n    event.stopPropagation()\\n    return false\\n  }\\n\\n  DroppableWidget.prototype.performActions = function (title, event) {\\n    if (this.droppableActions) {\\n      var modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event)\\n      this.invokeActionString(this.droppableActions, this, event, { actionTiddler: title, modifier: modifierKey })\\n    }\\n  }\\n\\n  /*\\nCompute the internal state of the widget\\n*/\\n  DroppableWidget.prototype.execute = function () {\\n    this.droppableActions = this.getAttribute('actions')\\n    this.droppableEffect = this.getAttribute('effect', 'copy')\\n    this.droppableTag = this.getAttribute('tag')\\n    this.droppableEnable = (this.getAttribute('enable') || 'yes') === 'yes'\\n    this.disabledClass = this.getAttribute('disabledClass', '')\\n    // Make child widgets\\n    this.makeChildWidgets()\\n  }\\n\\n  DroppableWidget.prototype.assignDomNodeClasses = function () {\\n    var classes = this.getAttribute('class', '').split(' ')\\n    classes.push('tc-droppable')\\n    this.domNode.className = classes.join(' ')\\n  }\\n\\n  /*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\n  DroppableWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if (changedAttributes.tag || changedAttributes.enable || changedAttributes.disabledClass || changedAttributes.actions || changedAttributes.effect) {\\n      this.refreshSelf()\\n      return true\\n    } else if (changedAttributes.class) {\\n      this.assignDomNodeClasses()\\n    }\\n    return this.refreshChildren(changedTiddlers)\\n  }\\n\\n  exports.droppable = DroppableWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/dropzone.js\": {\n            \"title\": \"$:/core/modules/widgets/dropzone.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/dropzone.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDropzone widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var IPFS_IMPORT_TITLE = '$:/IpfsImport'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var DropZoneWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /**\\n   * Inherit from the base widget class\\n   */\\n  DropZoneWidget.prototype = new Widget()\\n\\n  /**\\n   * Render this widget into the DOM\\n   */\\n  DropZoneWidget.prototype.render = function (parent, nextSibling) {\\n    // Remember parent\\n    this.parentDomNode = parent\\n    // Compute attributes and execute state\\n    this.computeAttributes()\\n    this.execute()\\n    // Create element\\n    var domNode = this.document.createElement('div')\\n    domNode.className = this.dropzoneClass || 'tc-dropzone'\\n    // Add event handlers\\n    if (this.dropzoneEnable) {\\n      $tw.utils.addEventListeners(domNode, [\\n        { name: 'dragenter', handlerObject: this, handlerMethod: 'handleDragEnterEvent' },\\n        { name: 'dragover', handlerObject: this, handlerMethod: 'handleDragOverEvent' },\\n        { name: 'dragleave', handlerObject: this, handlerMethod: 'handleDragLeaveEvent' },\\n        { name: 'drop', handlerObject: this, handlerMethod: 'handleDropEvent' },\\n        { name: 'paste', handlerObject: this, handlerMethod: 'handlePasteEvent' },\\n        { name: 'dragend', handlerObject: this, handlerMethod: 'handleDragEndEvent' },\\n      ])\\n    }\\n    domNode.addEventListener('click', function (event) {}, false)\\n    // Insert element\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n    // Stack of outstanding enter/leave events\\n    this.currentlyEntered = []\\n  }\\n\\n  DropZoneWidget.prototype.enterDrag = function (event) {\\n    if (this.currentlyEntered.indexOf(event.target) === -1) {\\n      this.currentlyEntered.push(event.target)\\n    }\\n    // If we're entering for the first time we need to apply highlighting\\n    $tw.utils.addClass(this.domNodes[0], 'tc-dragover')\\n  }\\n\\n  DropZoneWidget.prototype.leaveDrag = function (event) {\\n    var pos = this.currentlyEntered.indexOf(event.target)\\n    if (pos !== -1) {\\n      this.currentlyEntered.splice(pos, 1)\\n    }\\n    // Remove highlighting if we're leaving externally\\n    if (this.currentlyEntered.length === 0) {\\n      $tw.utils.removeClass(this.domNodes[0], 'tc-dragover')\\n    }\\n  }\\n\\n  DropZoneWidget.prototype.handleDragEnterEvent = function (event) {\\n    // Check for this window being the source of the drag\\n    if ($tw.dragInProgress) {\\n      return false\\n    }\\n    this.enterDrag(event)\\n    // Tell the browser that we're ready to handle the drop\\n    event.preventDefault()\\n    // Tell the browser not to ripple the drag up to any parent drop handlers\\n    event.stopPropagation()\\n  }\\n\\n  DropZoneWidget.prototype.handleDragOverEvent = function (event) {\\n    // Check for being over a TEXTAREA or INPUT\\n    if (['TEXTAREA', 'INPUT'].indexOf(event.target.tagName) !== -1) {\\n      return false\\n    }\\n    // Check for this window being the source of the drag\\n    if ($tw.dragInProgress) {\\n      return false\\n    }\\n    // Tell the browser that we're still interested in the drop\\n    event.preventDefault()\\n    event.dataTransfer.dropEffect = 'copy' // Explicitly show this is a copy\\n  }\\n\\n  DropZoneWidget.prototype.handleDragLeaveEvent = function (event) {\\n    this.leaveDrag(event)\\n  }\\n\\n  DropZoneWidget.prototype.handleDragEndEvent = function (event) {\\n    $tw.utils.removeClass(this.domNodes[0], 'tc-dragover')\\n  }\\n\\n  DropZoneWidget.prototype.filterByContentTypes = function (tiddlerFieldsArray) {\\n    var filteredTypes\\n    var filtered = []\\n    var types = []\\n    $tw.utils.each(tiddlerFieldsArray, function (tiddlerFields) {\\n      types.push(tiddlerFields.type)\\n    })\\n    filteredTypes = this.wiki.filterTiddlers(this.contentTypesFilter, this, this.wiki.makeTiddlerIterator(types))\\n    $tw.utils.each(tiddlerFieldsArray, function (tiddlerFields) {\\n      if (filteredTypes.indexOf(tiddlerFields.type) !== -1) {\\n        filtered.push(tiddlerFields)\\n      }\\n    })\\n    return filtered\\n  }\\n\\n  DropZoneWidget.prototype.readFileCallback = function (event, tiddlerFieldsArray) {\\n    if (this.contentTypesFilter) {\\n      tiddlerFieldsArray = this.filterByContentTypes(tiddlerFieldsArray)\\n    }\\n    if (tiddlerFieldsArray.merged) {\\n      this.dispatchEvent({\\n        type: 'tm-ipfs-import-tiddlers',\\n        param: tiddlerFieldsArray,\\n        autoOpenOnImport: this.autoOpenOnImport,\\n        importTitle: this.importTitle,\\n      })\\n      if (this.actions) {\\n        this.invokeActionString(this.actions, this, event, { importTitle: this.importTitle })\\n      }\\n    } else if (tiddlerFieldsArray.length) {\\n      this.dispatchEvent({\\n        type: 'tm-import-tiddlers',\\n        param: JSON.stringify(tiddlerFieldsArray),\\n        autoOpenOnImport: this.autoOpenOnImport,\\n        importTitle: this.importTitle,\\n      })\\n      if (this.actions) {\\n        this.invokeActionString(this.actions, this, event, { importTitle: this.importTitle })\\n      }\\n    }\\n  }\\n\\n  DropZoneWidget.prototype.handleDropEvent = async function (event) {\\n    var self = this\\n    var readFileCallback = function (tiddlerFieldsArray) {\\n      self.readFileCallback(event, tiddlerFieldsArray)\\n    }\\n    this.leaveDrag(event)\\n    // Check for being over a TEXTAREA or INPUT\\n    if (['TEXTAREA', 'INPUT'].indexOf(event.target.tagName) !== -1) {\\n      return false\\n    }\\n    // Check for this window being the source of the drag\\n    if ($tw.dragInProgress) {\\n      return false\\n    }\\n    var dataTransfer = event.dataTransfer\\n    // Remove highlighting\\n    $tw.utils.removeClass(this.domNodes[0], 'tc-dragover')\\n    // Import any files in the drop\\n    var numFiles = 0\\n    if (dataTransfer.files) {\\n      numFiles = await this.wiki.readFiles(dataTransfer.files, {\\n        callback: readFileCallback,\\n        deserializer: this.dropzoneDeserializer,\\n      })\\n    }\\n    // Try to import the various data types we understand\\n    if (numFiles === 0) {\\n      var fallbackTitle = self.wiki.generateNewTitle('Untitled')\\n      //Use the deserializer specified if any\\n      if (this.dropzoneDeserializer) {\\n        for (var t = 0; t < dataTransfer.items.length; t++) {\\n          var item = dataTransfer.items[t]\\n          if (item.kind === 'string') {\\n            item.getAsString(function (str) {\\n              var tiddlerFields = self.wiki.deserializeTiddlers(null, str, { title: fallbackTitle }, { deserializer: self.dropzoneDeserializer })\\n              if (tiddlerFields && tiddlerFields.length) {\\n                readFileCallback(tiddlerFields)\\n              }\\n            })\\n          }\\n        }\\n      } else {\\n        $tw.utils.importDataTransfer(dataTransfer, fallbackTitle, readFileCallback)\\n      }\\n    }\\n    // Tell the browser that we handled the drop\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n\\n  DropZoneWidget.prototype.handlePasteEvent = function (event) {\\n    var self = this\\n    var readFileCallback = function (tiddlerFieldsArray) {\\n      self.readFileCallback(tiddlerFieldsArray)\\n    }\\n    // Let the browser handle it if we're in a textarea or input box\\n    if (['TEXTAREA', 'INPUT'].indexOf(event.target.tagName) === -1 && !event.target.isContentEditable) {\\n      var self = this\\n      var items = event.clipboardData.items\\n      // Enumerate the clipboard items\\n      for (var t = 0; t < items.length; t++) {\\n        var item = items[t]\\n        if (item.kind === 'file') {\\n          // Import any files\\n          this.wiki.readFile(item.getAsFile(), {\\n            callback: readFileCallback,\\n            deserializer: this.dropzoneDeserializer,\\n          })\\n        } else if (item.kind === 'string') {\\n          // Create tiddlers from string items\\n          var tiddlerFields\\n          var type = item.type\\n          item.getAsString(function (str) {\\n            // Use the deserializer specified if any\\n            if (self.dropzoneDeserializer) {\\n              tiddlerFields = self.wiki.deserializeTiddlers(null, str, { title: self.wiki.generateNewTitle('Untitled') }, { deserializer: self.dropzoneDeserializer })\\n              if (tiddlerFields && tiddlerFields.length) {\\n                readFileCallback(tiddlerFields)\\n              }\\n            } else {\\n              tiddlerFields = {\\n                title: self.wiki.generateNewTitle('Untitled'),\\n                text: str,\\n                type: type,\\n              }\\n              if ($tw.log.IMPORT) {\\n                console.log(\\\"Importing string '\\\" + str + \\\"', type: '\\\" + type + \\\"'\\\")\\n              }\\n              readFileCallback([tiddlerFields])\\n            }\\n          })\\n        }\\n      }\\n      // Tell the browser that we've handled the paste\\n      event.stopPropagation()\\n      event.preventDefault()\\n    }\\n  }\\n\\n  /**\\n   * Compute the internal state of the widget\\n   */\\n  DropZoneWidget.prototype.execute = function () {\\n    this.dropzoneClass = this.getAttribute('class')\\n    this.dropzoneDeserializer = this.getAttribute('deserializer')\\n    this.dropzoneEnable = (this.getAttribute('enable') || 'yes') === 'yes'\\n    this.autoOpenOnImport = this.getAttribute('autoOpenOnImport')\\n    this.importTitle = this.getAttribute('importTitle', IPFS_IMPORT_TITLE)\\n    this.actions = this.getAttribute('actions')\\n    this.contentTypesFilter = this.getAttribute('contentTypesFilter')\\n    // Make child widgets\\n    this.makeChildWidgets()\\n  }\\n\\n  /**\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  DropZoneWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if ($tw.utils.count(changedAttributes) > 0) {\\n      this.refreshSelf()\\n      return true\\n    }\\n    return this.refreshChildren(changedTiddlers)\\n  }\\n\\n  exports.dropzone = DropZoneWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/encrypt.js\": {\n            \"title\": \"$:/core/modules/widgets/encrypt.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/encrypt.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nEncrypt widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var EncryptWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /**\\n   * Inherit from the base widget class\\n   */\\n  EncryptWidget.prototype = new Widget()\\n\\n  /**\\n   * Render this widget into the DOM\\n   */\\n  EncryptWidget.prototype.render = function (parent, nextSibling) {\\n    this.parentDomNode = parent\\n    this.computeAttributes()\\n    this.execute()\\n    var textNode = this.document.createTextNode(this.encryptedText)\\n    if ($tw.crypto.hasEncryptionPublicKey()) {\\n      var sign = $tw.wiki.getTiddler('$:/isSigned')\\n      sign = sign !== undefined ? sign.fields.text === 'yes' : false\\n      if (sign) {\\n        textNode.sign = true\\n      }\\n    }\\n    parent.insertBefore(textNode, nextSibling)\\n    this.domNodes.push(textNode)\\n  }\\n\\n  /**\\n   * Compute the internal state of the widget\\n   */\\n  EncryptWidget.prototype.execute = function () {\\n    // Get parameters from our attributes\\n    this.filter = this.getAttribute('filter', '[!is[system]]')\\n    // Encrypt the filtered tiddlers\\n    var tiddlers = this.wiki.filterTiddlers(this.filter)\\n    var json = {}\\n    var self = this\\n    $tw.utils.each(tiddlers, function (title) {\\n      var tiddler = self.wiki.getTiddler(title)\\n      var jsonTiddler = {}\\n      for (var f in tiddler.fields) {\\n        jsonTiddler[f] = tiddler.getFieldString(f)\\n      }\\n      json[title] = jsonTiddler\\n    })\\n    var content = $tw.crypto.encrypt(JSON.stringify(json))\\n    if ($tw.crypto.hasEncryptionPublicKey()) {\\n      content = JSON.stringify({\\n        encrypted: content,\\n        keccak256: $tw.crypto.keccak256(content),\\n      })\\n    }\\n    this.encryptedText = $tw.utils.htmlEncode(content)\\n  }\\n\\n  /**\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  EncryptWidget.prototype.refresh = function (changedTiddlers) {\\n    // We don't need to worry about refreshing because the encrypt widget isn't for interactive use\\n    return false\\n  }\\n\\n  exports.encrypt = EncryptWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/image.js\": {\n            \"title\": \"$:/core/modules/widgets/image.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/image.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nThe image widget displays an image referenced with an external URI or with a local tiddler title.\\n\\n```\\n<$image src=\\\"TiddlerTitle\\\" width=\\\"320\\\" height=\\\"400\\\" class=\\\"classnames\\\">\\n```\\n\\nThe image source can be the title of an existing tiddler or the URL of an external image.\\n\\nExternal images always generate an HTML `<img>` tag.\\n\\nTiddlers that have a _canonical_uri field generate an HTML `<img>` tag with the src attribute containing the URI.\\n\\nTiddlers that contain image data generate an HTML `<img>` tag with the src attribute containing a base64 representation of the image.\\n\\nTiddlers that contain wikitext could be rendered to a DIV of the usual size of a tiddler, and then transformed to the size requested.\\n\\nThe width and height attributes are interpreted as a number of pixels, and do not need to include the \\\"px\\\" suffix.\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  /*eslint no-unused-vars: \\\"off\\\"*/\\n  var name = 'ipfs-image'\\n\\n  var ImageWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\nInherit from the base widget class\\n*/\\n  ImageWidget.prototype = new Widget()\\n\\n  /*\\nRender this widget into the DOM\\n*/\\n  ImageWidget.prototype.render = function (parent, nextSibling) {\\n    this.parentDomNode = parent\\n    this.computeAttributes()\\n    this.execute()\\n    // Create element\\n    // Determine what type of image it is\\n    var tiddler = this.wiki.getTiddler(this.imageSource)\\n    // Create default element\\n    var domNode = this.document.createElement('img')\\n    if (!tiddler) {\\n      // The source isn't the title of a tiddler, so we'll assume it's a URL\\n      domNode.setAttribute(\\n        'src',\\n        this.getVariable('tv-get-export-image-link', {\\n          params: [{ name: 'src', value: this.imageSource }],\\n          defaultValue: this.imageSource,\\n        })\\n      )\\n    } else {\\n      // Check if it is an image tiddler\\n      if (this.wiki.isImageTiddler(this.imageSource)) {\\n        var type = tiddler.fields.type\\n        var text = tiddler.fields.text\\n        var canonicalUri = tiddler.fields._canonical_uri\\n        canonicalUri = canonicalUri !== undefined && canonicalUri !== null && canonicalUri.toString().trim() !== '' ? canonicalUri.toString().trim() : null\\n        // If the tiddler has body text then it doesn't need to be lazily loaded\\n        if (text) {\\n          // Render the appropriate element for the image type\\n          switch (type) {\\n            case 'application/pdf':\\n              domNode = this.document.createElement('embed')\\n              domNode.setAttribute('src', `data:application/pdf;base64,${text}`)\\n              break\\n            case 'image/svg+xml':\\n              domNode.setAttribute('src', `data:image/svg+xml,${encodeURIComponent(text)}`)\\n              break\\n            default:\\n              domNode.setAttribute('src', `data:${type};base64,${text}`)\\n              break\\n          }\\n        } else if (canonicalUri) {\\n          var password = tiddler.fields._password\\n          password = password !== undefined && password !== null && password.trim() !== '' ? password.trim() : null\\n          $tw.ipfs\\n            .resolveUrl(canonicalUri, false, false, false)\\n            .then(data => {\\n              var { resolvedUrl: url } = data\\n              if (url !== null) {\\n                switch (type) {\\n                  case 'application/pdf':\\n                    domNode = this.document.createElement('embed')\\n                    $tw.ipfs\\n                      .loadToBase64(url, password)\\n                      .then(data => {\\n                        if (data !== undefined && data !== null) {\\n                          domNode.setAttribute('src', `data:application/pdf;base64,${data}`)\\n                        } else {\\n                          domNode.setAttribute('src', '')\\n                        }\\n                      })\\n                      .catch(error => {\\n                        domNode.setAttribute('src', '')\\n                        $tw.ipfs.getLogger().error(error)\\n                        $tw.utils.alert(name, error.message)\\n                      })\\n                    break\\n                  case 'image/svg+xml':\\n                    $tw.ipfs\\n                      .loadToUtf8(url, password)\\n                      .then(data => {\\n                        if (data !== undefined && data !== null) {\\n                          domNode.setAttribute('src', `data:image/svg+xml,${encodeURIComponent(data)}`)\\n                        } else {\\n                          domNode.setAttribute('src', '')\\n                        }\\n                      })\\n                      .catch(error => {\\n                        domNode.setAttribute('src', '')\\n                        $tw.ipfs.getLogger().error(error)\\n                        $tw.utils.alert(name, error.message)\\n                      })\\n                    break\\n                  default:\\n                    $tw.ipfs\\n                      .loadToBase64(url, password)\\n                      .then(data => {\\n                        if (data !== undefined && data !== null) {\\n                          domNode.setAttribute('src', `data:${type};base64,${data}`)\\n                        } else {\\n                          domNode.setAttribute('src', '')\\n                        }\\n                      })\\n                      .catch(error => {\\n                        domNode.setAttribute('src', '')\\n                        $tw.ipfs.getLogger().error(error)\\n                        $tw.utils.alert(name, error.message)\\n                      })\\n                    break\\n                }\\n              }\\n            })\\n            .catch(error => {\\n              domNode.setAttribute('src', '')\\n              $tw.ipfs.getLogger().error(error)\\n            })\\n        } else {\\n          // Just trigger loading of the tiddler\\n          this.wiki.getTiddlerText(this.imageSource)\\n          domNode.setAttribute('src', '')\\n        }\\n      }\\n    }\\n    // Assign the attributes\\n    if (this.imageClass) {\\n      domNode.setAttribute('class', this.imageClass)\\n    }\\n    if (this.imageWidth) {\\n      domNode.setAttribute('width', this.imageWidth)\\n    }\\n    if (this.imageHeight) {\\n      domNode.setAttribute('height', this.imageHeight)\\n    }\\n    if (this.imageTooltip) {\\n      domNode.setAttribute('title', this.imageTooltip)\\n    }\\n    if (this.imageAlt) {\\n      domNode.setAttribute('alt', this.imageAlt)\\n    }\\n    // Insert element\\n    parent.insertBefore(domNode, nextSibling)\\n    this.domNodes.push(domNode)\\n  }\\n\\n  /*\\nCompute the internal state of the widget\\n*/\\n  ImageWidget.prototype.execute = function () {\\n    // Get our parameters\\n    this.imageSource = this.getAttribute('source')\\n    this.imageWidth = this.getAttribute('width')\\n    this.imageHeight = this.getAttribute('height')\\n    this.imageClass = this.getAttribute('class')\\n    this.imageTooltip = this.getAttribute('tooltip')\\n    this.imageAlt = this.getAttribute('alt')\\n  }\\n\\n  /*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\n  ImageWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if (\\n      changedAttributes.source ||\\n      changedAttributes.width ||\\n      changedAttributes.height ||\\n      changedAttributes.class ||\\n      changedAttributes.tooltip ||\\n      changedTiddlers[this.imageSource]\\n    ) {\\n      this.refreshSelf()\\n      return true\\n    } else {\\n      return false\\n    }\\n  }\\n\\n  exports.image = ImageWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/ipfs/modules/widgets/ipfs-link.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/widgets/ipfs-link.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/widgets/ipfs-link.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nIPFS link widget\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  const name = 'ipfs-link'\\n\\n  var IpfsLinkWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\n   * Inherit from the base widget class\\n   */\\n  IpfsLinkWidget.prototype = new Widget()\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.render = function (parent, nextSibling) {\\n    var self = this\\n    // Save the parent dom node\\n    this.parentDomNode = parent\\n    // Compute our attributes\\n    this.computeAttributes()\\n    // Execute our logic\\n    this.execute()\\n    // Tiddler link\\n    var value = this.url !== undefined && this.url !== null ? this.url : this.value\\n    var tiddler = $tw.wiki.getTiddler(value)\\n    if (tiddler) {\\n      this.renderTiddlerLink(parent, nextSibling)\\n    } else {\\n      this.renderText(parent, nextSibling)\\n      $tw.ipfs\\n        .resolveUrl(value, false, false, false)\\n        .then(data => {\\n          var { resolvedUrl } = data\\n          if (resolvedUrl !== null) {\\n            const sibling = self.findNextSiblingDomNode()\\n            self.removeChildDomNodes()\\n            self.renderExternalLink(parent, nextSibling !== null ? nextSibling : sibling, resolvedUrl)\\n          }\\n        })\\n        .catch(error => {\\n          $tw.ipfs.getLogger().error(error)\\n        })\\n    }\\n  }\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderExternalLink = function (parent, nextSibling, url) {\\n    // Sanitise the specified tag\\n    var tag = this.linkTag\\n    if ($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n      tag = 'a'\\n    }\\n    // Create our element\\n    var namespace = this.getVariable('namespace', {\\n      defaultValue: 'http://www.w3.org/1999/xhtml',\\n    })\\n    var domNode = this.document.createElementNS(namespace, tag)\\n    domNode.setAttribute('href', url.toString())\\n    // Add a click event handler\\n    $tw.utils.addEventListeners(domNode, [\\n      {\\n        name: 'click',\\n        handlerObject: this,\\n        handlerMethod: 'handleExternalClickEvent',\\n      },\\n    ])\\n    // Assign classes\\n    var classes = ['tc-tiddlylink-external']\\n    domNode.setAttribute('class', classes.join(' '))\\n    if (this['aria-label']) {\\n      domNode.setAttribute('aria-label', this['aria-label'])\\n    }\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n  }\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderTiddlerLink = function (parent, nextSibling) {\\n    // self\\n    var self = this\\n    // Sanitise the specified tag\\n    var tag = this.linkTag\\n    if ($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n      tag = 'a'\\n    }\\n    var value = this.url !== undefined && this.value !== null ? this.url : this.value\\n    var isMissing = !this.wiki.tiddlerExists(value)\\n    var isShadow = this.wiki.isShadowTiddler(value)\\n    // Create our element\\n    var namespace = this.getVariable('namespace', {\\n      defaultValue: 'http://www.w3.org/1999/xhtml',\\n    })\\n    var domNode = this.document.createElementNS(namespace, tag)\\n    // Assign classes\\n    var classes = []\\n    if (this.overrideClasses === undefined) {\\n      classes.push('tc-tiddlylink')\\n      if (isShadow) {\\n        classes.push('tc-tiddlylink-shadow')\\n      }\\n      if (isMissing && !isShadow) {\\n        classes.push('tc-tiddlylink-missing')\\n      } else {\\n        if (!isMissing) {\\n          classes.push('tc-tiddlylink-resolves')\\n        }\\n      }\\n      if (this.linkClasses) {\\n        classes.push(this.linkClasses)\\n      }\\n    } else if (this.overrideClasses !== '') {\\n      classes.push(this.overrideClasses)\\n    }\\n    if (classes.length > 0) {\\n      domNode.setAttribute('class', classes.join(' '))\\n    }\\n    // Set an href\\n    var wikilinkTransformFilter = this.getVariable('tv-filter-export-link')\\n    var wikiLinkText\\n    if (wikilinkTransformFilter) {\\n      // Use the filter to construct the href\\n      wikiLinkText = this.wiki.filterTiddlers(wikilinkTransformFilter, this, function (iterator) {\\n        iterator(self.wiki.getTiddler(value), value)\\n      })[0]\\n    } else {\\n      // Expand the tv-wikilink-template variable to construct the href\\n      var wikiLinkTemplateMacro = this.getVariable('tv-wikilink-template')\\n      var wikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : '#$uri_encoded$'\\n      wikiLinkText = $tw.utils.replaceString(wikiLinkTemplate, '$uri_encoded$', encodeURIComponent(value))\\n      wikiLinkText = $tw.utils.replaceString(wikiLinkText, '$uri_doubleencoded$', encodeURIComponent(encodeURIComponent(value)))\\n    }\\n    // Override with the value of tv-get-export-link if defined\\n    wikiLinkText = this.getVariable('tv-get-export-link', {\\n      params: [{ name: 'to', value: value }],\\n      defaultValue: wikiLinkText,\\n    })\\n    if (tag === 'a') {\\n      var namespaceHref = namespace === 'http://www.w3.org/2000/svg' ? 'http://www.w3.org/1999/xlink' : undefined\\n      domNode.setAttributeNS(namespaceHref, 'href', wikiLinkText)\\n    }\\n    // Set the tabindex\\n    if (this.tabIndex) {\\n      domNode.setAttribute('tabindex', this.tabIndex)\\n    }\\n    // Set the tooltip\\n    // HACK: Performance issues with re-parsing the tooltip prevent us defaulting the tooltip to \\\"<$transclude field='tooltip'><$transclude field='title'/></$transclude>\\\"\\n    var tooltipWikiText = this.tooltip || this.getVariable('tv-wikilink-tooltip')\\n    if (tooltipWikiText) {\\n      var tooltipText = this.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', tooltipWikiText, {\\n        parseAsInline: true,\\n        variables: {\\n          currentTiddler: value,\\n        },\\n        parentWidget: this,\\n      })\\n      domNode.setAttribute('title', tooltipText)\\n    }\\n    if (this['aria-label']) {\\n      domNode.setAttribute('aria-label', this['aria-label'])\\n    }\\n    // Add a click event handler\\n    $tw.utils.addEventListeners(domNode, [\\n      {\\n        name: 'click',\\n        handlerObject: this,\\n        handlerMethod: 'handleTiddlerClickEvent',\\n      },\\n    ])\\n    // Make the link draggable if required\\n    if (this.draggable === 'yes') {\\n      $tw.utils.makeDraggable({\\n        domNode: domNode,\\n        dragTiddlerFn: function () {\\n          return value\\n        },\\n        widget: this,\\n      })\\n    }\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n  }\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderText = function (parent, nextSibling) {\\n    const domNode = this.document.createElement('span')\\n    parent.insertBefore(domNode, nextSibling)\\n    this.renderChildren(domNode, null)\\n    this.domNodes.push(domNode)\\n  }\\n\\n  IpfsLinkWidget.prototype.handleExternalClickEvent = function (event) {\\n    const value = this.url !== undefined && this.url !== null ? this.url : this.value\\n    $tw.ipfs\\n      .resolveUrl(value, $tw.utils.getIpnsResolve(), false, $tw.utils.getEthLinkResolve())\\n      .then(data => {\\n        const { resolvedUrl } = data\\n        if (resolvedUrl !== null) {\\n          window.open(resolvedUrl.href, '_blank', 'noopener,noreferrer')\\n        }\\n      })\\n      .catch(error => {\\n        $tw.ipfs.getLogger().error(error)\\n        $tw.utils.alert(name, error.message)\\n      })\\n    event.preventDefault()\\n    event.stopPropagation()\\n    return false\\n  }\\n\\n  IpfsLinkWidget.prototype.handleTiddlerClickEvent = function (event) {\\n    // Send the click on its way as a navigate event\\n    const bounds = this.domNodes[0].getBoundingClientRect()\\n    const value = this.url !== undefined && this.url !== null ? this.url : this.value\\n    this.dispatchEvent({\\n      type: 'tm-navigate',\\n      navigateTo: value,\\n      navigateFromTitle: this.getVariable('storyTiddler'),\\n      navigateFromNode: this,\\n      navigateFromClientRect: {\\n        top: bounds.top,\\n        left: bounds.left,\\n        width: bounds.width,\\n        right: bounds.right,\\n        bottom: bounds.bottom,\\n        height: bounds.height,\\n      },\\n      navigateSuppressNavigation: event.metaKey || event.ctrlKey || event.button === 1,\\n      metaKey: event.metaKey,\\n      ctrlKey: event.ctrlKey,\\n      altKey: event.altKey,\\n      shiftKey: event.shiftKey,\\n    })\\n    if (this.domNodes[0].hasAttribute('href')) {\\n      event.preventDefault()\\n    }\\n    event.stopPropagation()\\n    return false\\n  }\\n\\n  /*\\n   * Compute the internal state of the widget\\n   */\\n  IpfsLinkWidget.prototype.execute = function () {\\n    // Pick up our attributes\\n    this.url = undefined\\n    this.tiddler = this.getAttribute('tiddler') ? this.getAttribute('tiddler') : this.getVariable('currentTiddler')\\n    var tiddler\\n    if (this.tiddler) {\\n      tiddler = $tw.wiki.getTiddler(this.tiddler)\\n    }\\n    this.field = this.getAttribute('field')\\n    this.value = this.getAttribute('value')\\n    this.value = this.value ? this.value : tiddler && tiddler.getFieldString(this.field) !== '' ? tiddler.getFieldString(this.field) : this.tiddler\\n    this.text = this.getAttribute('text')\\n    this.text = this.text ? (tiddler && tiddler.getFieldString(this.text) !== '' ? tiddler.getFieldString(this.text) : this.text) : this.value\\n    if (tiddler && this.getAttribute('value') && tiddler.getFieldString(this.getAttribute('value')) !== '') {\\n      this.url = tiddler.getFieldString(this.getAttribute('value'))\\n    }\\n    this.tooltip = this.getAttribute('tooltip')\\n    this['aria-label'] = this.getAttribute('aria-label')\\n    this.linkClasses = this.getAttribute('class')\\n    this.overrideClasses = this.getAttribute('overrideClass')\\n    this.tabIndex = this.getAttribute('tabindex')\\n    this.draggable = this.getAttribute('draggable', 'yes')\\n    this.linkTag = this.getAttribute('tag', 'a')\\n    var templateTree\\n    if (this.parseTreeNode.children && this.parseTreeNode.children.length > 0) {\\n      templateTree = this.parseTreeNode.children\\n    } else {\\n      templateTree = [{ type: 'text', text: this.text }]\\n    }\\n    this.makeChildWidgets(templateTree)\\n  }\\n\\n  /*\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  IpfsLinkWidget.prototype.refresh = function (changedTiddlers) {\\n    const changedAttributes = this.computeAttributes()\\n    const tiddler = $tw.wiki.getTiddler(this.tiddler)\\n    var value = null\\n    if (tiddler && this.field !== undefined && this.field !== null) {\\n      value = tiddler.getFieldString(this.field)\\n    }\\n    if (\\n      changedAttributes.text ||\\n      changedAttributes.field ||\\n      changedTiddlers[this.field] ||\\n      changedAttributes.value ||\\n      changedTiddlers[this.value] ||\\n      changedAttributes.tooltip ||\\n      changedAttributes['aria-label'] ||\\n      changedTiddlers['$:/ipfs/saver/gateway'] ||\\n      changedTiddlers['$:/ipfs/saver/policy'] ||\\n      (value !== null && value !== this.value)\\n    ) {\\n      this.refreshSelf()\\n      return true\\n    }\\n    return this.refreshChildren(changedTiddlers)\\n  }\\n\\n  exports.ipfslink = IpfsLinkWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/core/modules/widgets/navigator.js\": {\n            \"title\": \"$:/core/modules/widgets/navigator.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/navigator.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: widget\\n\\nNavigator widget\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  'use strict'\\n\\n  var IMPORT_TITLE = '$:/Import'\\n  var IPFS_IMPORT_TITLE = '$:/IpfsImport'\\n  var IPFS_EXPORT_TITLE = '$:/IpfsExport'\\n\\n  var Widget = require('$:/core/modules/widgets/widget.js').widget\\n\\n  var NavigatorWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options)\\n  }\\n\\n  /*\\nInherit from the base widget class\\n*/\\n  NavigatorWidget.prototype = new Widget()\\n\\n  /*\\nRender this widget into the DOM\\n*/\\n  NavigatorWidget.prototype.render = function (parent, nextSibling) {\\n    this.addEventListeners([\\n      { type: 'tm-navigate', handler: 'handleNavigateEvent' },\\n      { type: 'tm-edit-tiddler', handler: 'handleEditTiddlerEvent' },\\n      { type: 'tm-delete-tiddler', handler: 'handleDeleteTiddlerEvent' },\\n      { type: 'tm-save-tiddler', handler: 'handleSaveTiddlerEvent' },\\n      { type: 'tm-cancel-tiddler', handler: 'handleCancelTiddlerEvent' },\\n      { type: 'tm-close-tiddler', handler: 'handleCloseTiddlerEvent' },\\n      { type: 'tm-close-all-tiddlers', handler: 'handleCloseAllTiddlersEvent' },\\n      {\\n        type: 'tm-close-other-tiddlers',\\n        handler: 'handleCloseOtherTiddlersEvent',\\n      },\\n      { type: 'tm-new-tiddler', handler: 'handleNewTiddlerEvent' },\\n      {\\n        type: 'tm-ipfs-export-tiddlers',\\n        handler: 'handleIpfsExportTiddlersEvent',\\n      },\\n      { type: 'tm-import-tiddlers', handler: 'handleImportTiddlersEvent' },\\n      {\\n        type: 'tm-ipfs-import-tiddlers',\\n        handler: 'handleIpfsImportTiddlersEvent',\\n      },\\n      {\\n        type: 'tm-perform-ipfs-export',\\n        handler: 'handlePerformIpfsExportEvent',\\n      },\\n      { type: 'tm-perform-import', handler: 'handlePerformImportEvent' },\\n      {\\n        type: 'tm-perform-ipfs-import',\\n        handler: 'handlePerformIpfsImportEvent',\\n      },\\n      { type: 'tm-fold-tiddler', handler: 'handleFoldTiddlerEvent' },\\n      {\\n        type: 'tm-fold-other-tiddlers',\\n        handler: 'handleFoldOtherTiddlersEvent',\\n      },\\n      { type: 'tm-fold-all-tiddlers', handler: 'handleFoldAllTiddlersEvent' },\\n      {\\n        type: 'tm-unfold-all-tiddlers',\\n        handler: 'handleUnfoldAllTiddlersEvent',\\n      },\\n      { type: 'tm-rename-tiddler', handler: 'handleRenameTiddlerEvent' },\\n    ])\\n    this.parentDomNode = parent\\n    this.computeAttributes()\\n    this.execute()\\n    this.renderChildren(parent, nextSibling)\\n  }\\n\\n  /**\\n   * Compute the internal state of the widget\\n   */\\n  NavigatorWidget.prototype.execute = function () {\\n    // Get our parameters\\n    this.storyTitle = this.getAttribute('story')\\n    this.historyTitle = this.getAttribute('history')\\n    this.setVariable('tv-story-list', this.storyTitle)\\n    this.setVariable('tv-history-list', this.historyTitle)\\n    this.story = new $tw.Story({\\n      wiki: this.wiki,\\n      storyTitle: this.storyTitle,\\n      historyTitle: this.historyTitle,\\n    })\\n    // Construct the child widgets\\n    this.makeChildWidgets()\\n  }\\n\\n  /**\\n   * Selectively refreshes the widget if needed.\\n   * Returns true if the widget or any of its children needed re-rendering\\n   */\\n  NavigatorWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes()\\n    if (changedAttributes.story || changedAttributes.history) {\\n      this.refreshSelf()\\n      return true\\n    } else {\\n      return this.refreshChildren(changedTiddlers)\\n    }\\n  }\\n\\n  NavigatorWidget.prototype.getStoryList = function () {\\n    return this.storyTitle ? this.wiki.getTiddlerList(this.storyTitle) : null\\n  }\\n\\n  NavigatorWidget.prototype.saveStoryList = function (storyList) {\\n    if (this.storyTitle) {\\n      var storyTiddler = this.wiki.getTiddler(this.storyTitle)\\n      this.wiki.addTiddler(\\n        new $tw.Tiddler({ title: this.storyTitle }, storyTiddler, {\\n          list: storyList,\\n        })\\n      )\\n    }\\n  }\\n\\n  NavigatorWidget.prototype.removeTitleFromStory = function (storyList, title) {\\n    if (storyList) {\\n      var p = storyList.indexOf(title)\\n      while (p !== -1) {\\n        storyList.splice(p, 1)\\n        p = storyList.indexOf(title)\\n      }\\n    }\\n  }\\n\\n  NavigatorWidget.prototype.replaceFirstTitleInStory = function (storyList, oldTitle, newTitle) {\\n    if (storyList) {\\n      var pos = storyList.indexOf(oldTitle)\\n      if (pos !== -1) {\\n        storyList[pos] = newTitle\\n        do {\\n          pos = storyList.indexOf(oldTitle, pos + 1)\\n          if (pos !== -1) {\\n            storyList.splice(pos, 1)\\n          }\\n        } while (pos !== -1)\\n      } else {\\n        storyList.splice(0, 0, newTitle)\\n      }\\n    }\\n  }\\n\\n  NavigatorWidget.prototype.addToStory = function (title, fromTitle) {\\n    if (this.storyTitle) {\\n      this.story.addToStory(title, fromTitle, {\\n        openLinkFromInsideRiver: this.getAttribute('openLinkFromInsideRiver', 'top'),\\n        openLinkFromOutsideRiver: this.getAttribute('openLinkFromOutsideRiver', 'top'),\\n      })\\n    }\\n  }\\n\\n  /**\\n   * Add a new record to the top of the history stack\\n   * title: a title string or an array of title strings\\n   * fromPageRect: page coordinates of the origin of the navigation\\n   */\\n  NavigatorWidget.prototype.addToHistory = function (title, fromPageRect) {\\n    this.story.addToHistory(title, fromPageRect, this.historyTitle)\\n  }\\n\\n  /**\\n   * Handle a tm-navigate event\\n   */\\n  NavigatorWidget.prototype.handleNavigateEvent = function (event) {\\n    event = $tw.hooks.invokeHook('th-navigating', event)\\n    if (event.navigateTo) {\\n      this.addToStory(event.navigateTo, event.navigateFromTitle)\\n      if (!event.navigateSuppressNavigation) {\\n        this.addToHistory(event.navigateTo, event.navigateFromClientRect)\\n      }\\n    }\\n    return false\\n  }\\n\\n  // Close a specified tiddler\\n  NavigatorWidget.prototype.handleCloseTiddlerEvent = function (event) {\\n    var title = event.param || event.tiddlerTitle\\n    var storyList = this.getStoryList()\\n    // Look for tiddlers with this title to close\\n    this.removeTitleFromStory(storyList, title)\\n    this.saveStoryList(storyList)\\n    return false\\n  }\\n\\n  // Close all tiddlers\\n  NavigatorWidget.prototype.handleCloseAllTiddlersEvent = function (event) {\\n    this.saveStoryList([])\\n    return false\\n  }\\n\\n  // Close other tiddlers\\n  NavigatorWidget.prototype.handleCloseOtherTiddlersEvent = function (event) {\\n    var title = event.param || event.tiddlerTitle\\n    this.saveStoryList([title])\\n    return false\\n  }\\n\\n  // Place a tiddler in edit mode\\n  NavigatorWidget.prototype.handleEditTiddlerEvent = function (event) {\\n    var editTiddler = $tw.hooks.invokeHook('th-editing-tiddler', event)\\n    if (!editTiddler) {\\n      return false\\n    }\\n    var self = this\\n    function isUnmodifiedShadow (title) {\\n      return self.wiki.isShadowTiddler(title) && !self.wiki.tiddlerExists(title)\\n    }\\n    function confirmEditShadow (title) {\\n      return confirm(\\n        $tw.language.getString('ConfirmEditShadowTiddler', {\\n          variables: { title: title },\\n        })\\n      )\\n    }\\n    var title = event.param || event.tiddlerTitle\\n    if (isUnmodifiedShadow(title) && !confirmEditShadow(title)) {\\n      return false\\n    }\\n    // Replace the specified tiddler with a draft in edit mode\\n    var draftTiddler = this.makeDraftTiddler(title)\\n    // Update the story and history if required\\n    if (!event.paramObject || event.paramObject.suppressNavigation !== 'yes') {\\n      var draftTitle = draftTiddler.fields.title\\n      var storyList = this.getStoryList()\\n      this.removeTitleFromStory(storyList, draftTitle)\\n      this.replaceFirstTitleInStory(storyList, title, draftTitle)\\n      this.addToHistory(draftTitle, event.navigateFromClientRect)\\n      this.saveStoryList(storyList)\\n      return false\\n    }\\n  }\\n\\n  // Delete a tiddler\\n  NavigatorWidget.prototype.handleDeleteTiddlerEvent = function (event) {\\n    // Get the tiddler we're deleting\\n    var title = event.param || event.tiddlerTitle\\n    var tiddler = this.wiki.getTiddler(title)\\n    var storyList = this.getStoryList()\\n    var originalTitle = tiddler ? tiddler.fields['draft.of'] : ''\\n    var originalTiddler = originalTitle ? this.wiki.getTiddler(originalTitle) : undefined\\n    var confirmationTitle\\n    if (!tiddler) {\\n      return false\\n    }\\n    // Check if the tiddler we're deleting is in draft mode\\n    if (originalTitle) {\\n      // If so, we'll prompt for confirmation referencing the original tiddler\\n      confirmationTitle = originalTitle\\n    } else {\\n      // If not a draft, then prompt for confirmation referencing the specified tiddler\\n      confirmationTitle = title\\n    }\\n    // Seek confirmation\\n    if (\\n      (this.wiki.getTiddler(originalTitle) || (tiddler.fields.text || '') !== '') &&\\n      !confirm(\\n        $tw.language.getString('ConfirmDeleteTiddler', {\\n          variables: { title: confirmationTitle },\\n        })\\n      )\\n    ) {\\n      return false\\n    }\\n    // Delete the original tiddler\\n    if (originalTitle) {\\n      if (originalTiddler) {\\n        $tw.hooks.invokeHook('th-deleting-tiddler', originalTiddler)\\n      }\\n      this.wiki.deleteTiddler(originalTitle)\\n      this.removeTitleFromStory(storyList, originalTitle)\\n    }\\n    // Invoke the hook function and delete this tiddler\\n    $tw.hooks.invokeHook('th-deleting-tiddler', tiddler)\\n    this.wiki.deleteTiddler(title)\\n    // Remove the closed tiddler from the story\\n    this.removeTitleFromStory(storyList, title)\\n    this.saveStoryList(storyList)\\n    // Trigger an autosave\\n    $tw.rootWidget.dispatchEvent({ type: 'tm-auto-save-wiki' })\\n    return false\\n  }\\n\\n  // Delete a tiddler\\n  NavigatorWidget.prototype.handleIpfsDeleteTiddler = function (event) {\\n    // Get the tiddler we're deleting\\n    var title = event.param || event.tiddlerTitle\\n    var tiddler = this.wiki.getTiddler(title)\\n    var storyList = this.getStoryList()\\n    var originalTitle = tiddler ? tiddler.fields['draft.of'] : ''\\n    var originalTiddler = originalTitle ? this.wiki.getTiddler(originalTitle) : undefined\\n    if (!tiddler) {\\n      return false\\n    }\\n    // Delete the original tiddler\\n    if (originalTitle) {\\n      if (originalTiddler) {\\n        $tw.hooks.invokeHook('th-deleting-tiddler', originalTiddler)\\n      }\\n      this.wiki.deleteTiddler(originalTitle)\\n      this.removeTitleFromStory(storyList, originalTitle)\\n    }\\n    // Invoke the hook function and delete this tiddler\\n    $tw.hooks.invokeHook('th-deleting-tiddler', tiddler)\\n    this.wiki.deleteTiddler(title)\\n    // Remove the closed tiddler from the story\\n    this.removeTitleFromStory(storyList, title)\\n    this.saveStoryList(storyList)\\n    // Trigger an autosave\\n    $tw.rootWidget.dispatchEvent({ type: 'tm-auto-save-wiki' })\\n    return false\\n  }\\n\\n  /**\\n   * Create/reuse the draft tiddler for a given title\\n   */\\n  NavigatorWidget.prototype.makeDraftTiddler = function (targetTitle) {\\n    // See if there is already a draft tiddler for this tiddler\\n    var draftTitle = this.wiki.findDraft(targetTitle)\\n    if (draftTitle) {\\n      return this.wiki.getTiddler(draftTitle)\\n    }\\n    // Get the current value of the tiddler we're editing\\n    var tiddler = this.wiki.getTiddler(targetTitle)\\n    // Save the initial value of the draft tiddler\\n    draftTitle = this.generateDraftTitle(targetTitle)\\n    var draftTiddler = new $tw.Tiddler(\\n      {\\n        text: '',\\n      },\\n      tiddler,\\n      {\\n        title: draftTitle,\\n        'draft.title': targetTitle,\\n        'draft.of': targetTitle,\\n      },\\n      this.wiki.getModificationFields()\\n    )\\n    this.wiki.addTiddler(draftTiddler)\\n    return draftTiddler\\n  }\\n\\n  /**\\n   * Generate a title for the draft of a given tiddler\\n   */\\n  NavigatorWidget.prototype.generateDraftTitle = function (title) {\\n    return this.wiki.generateDraftTitle(title)\\n  }\\n\\n  // Take a tiddler out of edit mode, saving the changes\\n  NavigatorWidget.prototype.handleSaveTiddlerEvent = function (event) {\\n    var title = event.param || event.tiddlerTitle\\n    var tiddler = this.wiki.getTiddler(title)\\n    var storyList = this.getStoryList()\\n    // Replace the original tiddler with the draft\\n    if (tiddler) {\\n      var draftTitle = (tiddler.fields['draft.title'] || '').trim()\\n      var draftOf = (tiddler.fields['draft.of'] || '').trim()\\n      if (draftTitle) {\\n        var isRename = draftOf !== draftTitle\\n        var isConfirmed = true\\n        if (isRename && this.wiki.tiddlerExists(draftTitle)) {\\n          isConfirmed = confirm(\\n            $tw.language.getString('ConfirmOverwriteTiddler', {\\n              variables: { title: draftTitle },\\n            })\\n          )\\n        }\\n        if (isConfirmed) {\\n          // Create the new tiddler and pass it through the th-saving-tiddler hook\\n          var newTiddler = new $tw.Tiddler(\\n            this.wiki.getCreationFields(),\\n            tiddler,\\n            {\\n              title: draftTitle,\\n              'draft.title': undefined,\\n              'draft.of': undefined,\\n            },\\n            this.wiki.getModificationFields()\\n          )\\n          newTiddler = $tw.hooks.invokeHook('th-saving-tiddler', newTiddler, tiddler)\\n          this.wiki.addTiddler(newTiddler)\\n          // If enabled, relink references to renamed tiddler\\n          var shouldRelink =\\n            this.getAttribute('relinkOnRename', 'no')\\n              .toLowerCase()\\n              .trim() === 'yes'\\n          if (isRename && shouldRelink && this.wiki.tiddlerExists(draftOf)) {\\n            this.wiki.relinkTiddler(draftOf, draftTitle)\\n          }\\n          // Remove the draft tiddler\\n          this.wiki.deleteTiddler(title)\\n          // Remove the original tiddler if we're renaming it\\n          if (isRename) {\\n            this.wiki.deleteTiddler(draftOf)\\n          }\\n          // #2381 always remove new title & old\\n          this.removeTitleFromStory(storyList, draftTitle)\\n          this.removeTitleFromStory(storyList, draftOf)\\n          if (!event.paramObject || event.paramObject.suppressNavigation !== 'yes') {\\n            // Replace the draft in the story with the original\\n            this.replaceFirstTitleInStory(storyList, title, draftTitle)\\n            this.addToHistory(draftTitle, event.navigateFromClientRect)\\n            if (draftTitle !== this.storyTitle) {\\n              this.saveStoryList(storyList)\\n            }\\n          }\\n          // Trigger an autosave\\n          $tw.rootWidget.dispatchEvent({ type: 'tm-auto-save-wiki' })\\n        }\\n      }\\n    }\\n    return false\\n  }\\n\\n  // Take a tiddler out of edit mode without saving the changes\\n  NavigatorWidget.prototype.handleCancelTiddlerEvent = function (event) {\\n    event = $tw.hooks.invokeHook('th-cancelling-tiddler', event)\\n    // Flip the specified tiddler from draft back to the original\\n    var draftTitle = event.param || event.tiddlerTitle\\n    var draftTiddler = this.wiki.getTiddler(draftTitle)\\n    var originalTitle = draftTiddler && draftTiddler.fields['draft.of']\\n    if (draftTiddler && originalTitle) {\\n      // Ask for confirmation if the tiddler text has changed\\n      var isConfirmed = true\\n      var originalTiddler = this.wiki.getTiddler(originalTitle)\\n      var storyList = this.getStoryList()\\n      if (this.wiki.isDraftModified(draftTitle)) {\\n        isConfirmed = confirm(\\n          $tw.language.getString('ConfirmCancelTiddler', {\\n            variables: { title: draftTitle },\\n          })\\n        )\\n      }\\n      // Remove the draft tiddler\\n      if (isConfirmed) {\\n        this.wiki.deleteTiddler(draftTitle)\\n        if (!event.paramObject || event.paramObject.suppressNavigation !== 'yes') {\\n          if (originalTiddler) {\\n            this.replaceFirstTitleInStory(storyList, draftTitle, originalTitle)\\n            this.addToHistory(originalTitle, event.navigateFromClientRect)\\n          } else {\\n            this.removeTitleFromStory(storyList, draftTitle)\\n          }\\n          this.saveStoryList(storyList)\\n        }\\n      }\\n    }\\n    return false\\n  }\\n\\n  // Create a new draft tiddler\\n  // event.param can either be the title of a template tiddler, or a hashmap of fields.\\n  //\\n  // The title of the newly created tiddler follows these rules:\\n  // * If a hashmap was used and a title field was specified, use that title\\n  // * If a hashmap was used without a title field, use a default title, if necessary making it unique with a numeric suffix\\n  // * If a template tiddler was used, use the title of the template, if necessary making it unique with a numeric suffix\\n  //\\n  // If a draft of the target tiddler already exists then it is reused\\n  NavigatorWidget.prototype.handleNewTiddlerEvent = function (event) {\\n    event = $tw.hooks.invokeHook('th-new-tiddler', event)\\n    // Get the story details\\n    var storyList = this.getStoryList()\\n    var templateTiddler\\n    var additionalFields\\n    var title\\n    var draftTitle\\n    var existingTiddler\\n    // Get the template tiddler (if any)\\n    if (typeof event.param === 'string') {\\n      // Get the template tiddler\\n      templateTiddler = this.wiki.getTiddler(event.param)\\n      // Generate a new title\\n      title = this.wiki.generateNewTitle(event.param || $tw.language.getString('DefaultNewTiddlerTitle'))\\n    }\\n    // Get the specified additional fields\\n    if (typeof event.paramObject === 'object') {\\n      additionalFields = event.paramObject\\n    }\\n    if (typeof event.param === 'object') {\\n      // Backwards compatibility with 5.1.3\\n      additionalFields = event.param\\n    }\\n    if (additionalFields && additionalFields.title) {\\n      title = additionalFields.title\\n    }\\n    // Make a copy of the additional fields excluding any blank ones\\n    var filteredAdditionalFields = $tw.utils.extend({}, additionalFields)\\n    Object.keys(filteredAdditionalFields).forEach(function (fieldName) {\\n      if (filteredAdditionalFields[fieldName] === '') {\\n        delete filteredAdditionalFields[fieldName]\\n      }\\n    })\\n    // Generate a title if we don't have one\\n    title = title || this.wiki.generateNewTitle($tw.language.getString('DefaultNewTiddlerTitle'))\\n    // Find any existing draft for this tiddler\\n    draftTitle = this.wiki.findDraft(title)\\n    // Pull in any existing tiddler\\n    if (draftTitle) {\\n      existingTiddler = this.wiki.getTiddler(draftTitle)\\n    } else {\\n      draftTitle = this.generateDraftTitle(title)\\n      existingTiddler = this.wiki.getTiddler(title)\\n    }\\n    // Merge the tags\\n    var mergedTags = []\\n    if (existingTiddler && existingTiddler.fields.tags) {\\n      $tw.utils.pushTop(mergedTags, existingTiddler.fields.tags)\\n    }\\n    if (additionalFields && additionalFields.tags) {\\n      // Merge tags\\n      mergedTags = $tw.utils.pushTop(mergedTags, $tw.utils.parseStringArray(additionalFields.tags))\\n    }\\n    if (templateTiddler && templateTiddler.fields.tags) {\\n      // Merge tags\\n      mergedTags = $tw.utils.pushTop(mergedTags, templateTiddler.fields.tags)\\n    }\\n    // Save the draft tiddler\\n    var draftTiddler = new $tw.Tiddler(\\n      {\\n        text: '',\\n        'draft.title': title,\\n      },\\n      templateTiddler,\\n      additionalFields,\\n      this.wiki.getCreationFields(),\\n      existingTiddler,\\n      filteredAdditionalFields,\\n      {\\n        title: draftTitle,\\n        'draft.of': title,\\n        tags: mergedTags,\\n      },\\n      this.wiki.getModificationFields()\\n    )\\n    this.wiki.addTiddler(draftTiddler)\\n    // Update the story to insert the new draft at the top and remove any existing tiddler\\n    if (storyList && storyList.indexOf(draftTitle) === -1) {\\n      var slot = storyList.indexOf(event.navigateFromTitle)\\n      if (slot === -1) {\\n        slot = this.getAttribute('openLinkFromOutsideRiver', 'top') === 'bottom' ? storyList.length - 1 : slot\\n      }\\n      storyList.splice(slot + 1, 0, draftTitle)\\n    }\\n    if (storyList && storyList.indexOf(title) !== -1) {\\n      storyList.splice(storyList.indexOf(title), 1)\\n    }\\n    this.saveStoryList(storyList)\\n    // Add a new record to the top of the history stack\\n    this.addToHistory(draftTitle)\\n    return false\\n  }\\n\\n  // Export JSON tiddlers\\n  NavigatorWidget.prototype.handleIpfsExportTiddlersEvent = function (event) {\\n    // Get the tiddlers\\n    var tiddlers = []\\n    try {\\n      tiddlers = JSON.parse(event.param)\\n    } catch (e) {}\\n    // Get the current $:/Export tiddler\\n    var exportTitle = event.exportTitle ? event.exportTitle : IPFS_EXPORT_TITLE\\n    var exportTiddler = this.wiki.getTiddler(exportTitle)\\n    var exportData = this.wiki.getTiddlerData(exportTitle, {})\\n    var newFields = {\\n      title: exportTitle,\\n      type: 'application/json',\\n      'plugin-type': 'ipfs-export',\\n      status: 'pending',\\n      target: event.target,\\n    }\\n    var outgoingTiddlers = []\\n    // Process each tiddler\\n    exportData.tiddlers = exportData.tiddlers || {}\\n    $tw.utils.each(tiddlers, function (tiddlerFields) {\\n      tiddlerFields.title = $tw.utils.trim(tiddlerFields.title)\\n      var title = tiddlerFields.title\\n      if (title) {\\n        outgoingTiddlers.push(title)\\n        exportData.tiddlers[title] = tiddlerFields\\n      }\\n    })\\n    // Deselect any suppressed tiddlers\\n    $tw.utils.each(exportData.tiddlers, function (tiddler, title) {\\n      if ($tw.utils.count(tiddler) === 0) {\\n        newFields['selection-' + title] = 'unchecked'\\n      }\\n    })\\n    // Save the $:/Export tiddler\\n    newFields.text = JSON.stringify(exportData, null, $tw.config.preferences.jsonSpaces)\\n    this.wiki.addTiddler(new $tw.Tiddler(exportTiddler, newFields))\\n    // Update the story and history details\\n    var storyList = this.getStoryList()\\n    var history = []\\n    // Add it to the story\\n    if (storyList && storyList.indexOf(exportTitle) === -1) {\\n      storyList.unshift(exportTitle)\\n    }\\n    // And to history\\n    history.push(exportTitle)\\n    // Save the updated story and history\\n    this.saveStoryList(storyList)\\n    this.addToHistory(history)\\n    return false\\n  }\\n\\n  NavigatorWidget.prototype.handlePerformIpfsExportEvent = async function (event) {\\n    var exportTiddler = this.wiki.getTiddler(event.param)\\n    var target = this.wiki.getTiddler(exportTiddler.fields.target)\\n    var exportData = this.wiki.getTiddlerDataCached(event.param, {\\n      tiddlers: {},\\n    })\\n    var tiddlers = []\\n    var exportReport = []\\n    exportReport.push($tw.language.getString('Export/Exported/Hint') + '\\\\n')\\n    $tw.utils.each(exportData.tiddlers, function (tiddlerFields) {\\n      var title = tiddlerFields.title\\n      if (title && exportTiddler && exportTiddler.fields['selection-' + title] !== 'unchecked') {\\n        tiddlers.push(tiddlerFields.title)\\n        exportReport.push('# [[' + tiddlerFields.title + ']]')\\n      }\\n    })\\n    const exportUri =\\n      target.fields._export_uri !== undefined && target.fields._export_uri !== null && target.fields._export_uri.trim() !== '' ? target.fields._export_uri.trim() : null\\n    var content = await $tw.utils.exportTiddlersAsJson(tiddlers, exportUri)\\n    if (content !== null) {\\n      content = await $tw.ipfs.processContent(target, content, 'utf8', 'application/json')\\n    }\\n    if (content !== null) {\\n      var filename = '/'\\n      var incomingName = ''\\n      if ($tw.utils.getWrappedDirectory()) {\\n        try {\\n          var path = null\\n          if (exportUri !== null) {\\n            const { ipnsCid, normalizedUrl } = await $tw.ipfs.resolveUrl(exportUri, false, false, true)\\n            if (ipnsCid !== null) {\\n              const pathname = normalizedUrl.pathname.slice(`/ipns/${ipnsCid}`.length)\\n              if (pathname !== undefined && pathname !== null && pathname.trim() !== '') {\\n                path = pathname.substring(0, pathname.lastIndexOf('/'))\\n                if (path !== undefined && path !== null && path.trim() !== '') {\\n                  incomingName = pathname.split('/').pop()\\n                  if (incomingName !== undefined && incomingName !== null && incomingName.trim() !== '') {\\n                    filename = `${path}/${decodeURI(incomingName)}`\\n                  }\\n                }\\n              }\\n            }\\n          }\\n          if (filename === '/') {\\n            const url = $tw.ipfs.getUrl(target.fields.title, $tw.ipfs.getIpfsBaseUrl())\\n            if (path === undefined || path == null || path.trim() === '') {\\n              path = url.pathname.substring(0, url.pathname.lastIndexOf('/'))\\n            }\\n            if (path !== undefined && path !== null && path.trim() !== '') {\\n              incomingName = url.pathname.split('/').pop()\\n              if (incomingName !== undefined && incomingName !== null && incomingName.trim() !== '') {\\n                filename = `${path}/${decodeURI(incomingName)}`\\n              }\\n            }\\n          }\\n        } catch (error) {\\n          // Ignore\\n        }\\n        if (filename === '/') {\\n          filename = `${filename}${$tw.ipfs.filenamify(target.fields.title)}`\\n        }\\n        if (filename.endsWith('.json') === false) {\\n          filename = `${filename}.json`\\n        }\\n      }\\n      // Beware async...\\n      $tw.utils.exportToIpfs(target, content, [], '_export_uri', filename, incomingName)\\n      // Replace the $:/Export tiddler with an export report\\n      this.wiki.addTiddler(\\n        new $tw.Tiddler({\\n          title: exportTiddler.fields.title,\\n          text: exportReport.join('\\\\n'),\\n          status: 'complete',\\n        })\\n      )\\n      // Add a new record to the top of the history stack\\n      this.addToHistory([event.param])\\n    }\\n  }\\n\\n  // Import IPFS JSON tiddlers into a pending import tiddler\\n  NavigatorWidget.prototype.handleIpfsImportTiddlersEvent = function (event) {\\n    // Get the new or updated tiddlers\\n    var tiddlers = []\\n    try {\\n      tiddlers = Array.from(event.param.merged.values())\\n    } catch (e) {}\\n    // Get the deleted tiddlers\\n    var deleted = []\\n    try {\\n      deleted = Array.from(event.param.deleted.values())\\n    } catch (e) {}\\n    // Get the current $:/IpfsImport tiddler\\n    var importTitle = event.importTitle ? event.importTitle : IPFS_IMPORT_TITLE\\n    var importTiddler = this.wiki.getTiddler(importTitle)\\n    var importData = {}\\n    var newFields = {\\n      title: importTitle,\\n      type: 'application/json',\\n      'plugin-type': 'ipfs-import',\\n      status: 'pending',\\n    }\\n    var incomingTiddlers = []\\n    // Process each new or updated tiddler\\n    importData.tiddlers = {}\\n    var ignoredFields = ['created', 'modified']\\n    $tw.utils.each(tiddlers, function (tiddlerFields) {\\n      tiddlerFields.title = $tw.utils.trim(tiddlerFields.title)\\n      var title = tiddlerFields.title\\n      if (title) {\\n        incomingTiddlers.push(title)\\n        importData.tiddlers[title] = tiddlerFields\\n        var tiddler = $tw.wiki.getTiddler(title)\\n        if (tiddler === undefined || tiddler == null) {\\n          newFields['import-' + title] = 'yes'\\n          newFields['importSelection-' + title] = 'checked'\\n        } else {\\n          var importedTiddler = new $tw.Tiddler(tiddlerFields)\\n          if (tiddler.isEqual(importedTiddler, ignoredFields)) {\\n            newFields['import-' + title] = 'no'\\n            newFields['delete-' + title] = 'yes'\\n            newFields['deleteSelection-' + title] = 'unchecked'\\n          } else {\\n            newFields['import-' + title] = 'yes'\\n            newFields['importSelection-' + title] = 'checked'\\n            newFields['delete-' + title] = 'no'\\n          }\\n        }\\n      }\\n    })\\n    // Give the active upgrader modules a chance to process the incoming tiddlers\\n    var messages = this.wiki.invokeUpgraders(incomingTiddlers, importData.tiddlers)\\n    $tw.utils.each(messages, function (message, title) {\\n      newFields['message-' + title] = message\\n    })\\n    // Deselect any suppressed tiddlers\\n    $tw.utils.each(importData.tiddlers, function (tiddler, title) {\\n      if ($tw.utils.count(tiddler) === 0) {\\n        newFields['importSelection-' + title] = 'unchecked'\\n        newFields['delete-' + title] = 'yes'\\n      }\\n    })\\n    // Process each deleted tiddler\\n    importData.tiddlers = importData.tiddlers || {}\\n    $tw.utils.each(deleted, function (tiddlerFields) {\\n      tiddlerFields.title = $tw.utils.trim(tiddlerFields.title)\\n      var title = tiddlerFields.title\\n      if (title) {\\n        incomingTiddlers.push(title)\\n        importData.tiddlers[title] = tiddlerFields\\n        newFields['importSelection-' + title] = 'unchecked'\\n        newFields['delete-' + title] = 'yes'\\n      }\\n    })\\n    // Save the $:/IpfsImport tiddler\\n    newFields.text = JSON.stringify(importData, null, $tw.config.preferences.jsonSpaces)\\n    this.wiki.addTiddler(new $tw.Tiddler(importTiddler, newFields))\\n    // Update the story and history details\\n    var autoOpenOnImport = event.autoOpenOnImport ? event.autoOpenOnImport : this.getVariable('tv-auto-open-on-import')\\n    if (autoOpenOnImport !== 'no') {\\n      var storyList = this.getStoryList()\\n      var history = []\\n      // Add it to the story\\n      if (storyList && storyList.indexOf(importTitle) === -1) {\\n        storyList.unshift(importTitle)\\n      }\\n      // And to history\\n      history.push(importTitle)\\n      // Save the updated story and history\\n      this.saveStoryList(storyList)\\n      this.addToHistory(history)\\n    }\\n    return false\\n  }\\n\\n  // Import JSON tiddlers into a pending import tiddler\\n  NavigatorWidget.prototype.handleImportTiddlersEvent = function (event) {\\n    // Get the tiddlers\\n    var tiddlers = []\\n    try {\\n      tiddlers = JSON.parse(event.param)\\n    } catch (e) {}\\n    // Get the current $:/Import tiddler\\n    var importTitle = event.importTitle ? event.importTitle : IMPORT_TITLE\\n    var importTiddler = this.wiki.getTiddler(importTitle)\\n    var importData = this.wiki.getTiddlerData(importTitle, {})\\n    var newFields = {\\n      title: importTitle,\\n      type: 'application/json',\\n      'plugin-type': 'import',\\n      status: 'pending',\\n    }\\n    var incomingTiddlers = []\\n    // Process each tiddler\\n    importData.tiddlers = importData.tiddlers || {}\\n    $tw.utils.each(tiddlers, function (tiddlerFields) {\\n      tiddlerFields.title = $tw.utils.trim(tiddlerFields.title)\\n      var title = tiddlerFields.title\\n      if (title) {\\n        incomingTiddlers.push(title)\\n        importData.tiddlers[title] = tiddlerFields\\n      }\\n    })\\n    // Give the active upgrader modules a chance to process the incoming tiddlers\\n    var messages = this.wiki.invokeUpgraders(incomingTiddlers, importData.tiddlers)\\n    $tw.utils.each(messages, function (message, title) {\\n      newFields['message-' + title] = message\\n    })\\n    // Deselect any suppressed tiddlers\\n    $tw.utils.each(importData.tiddlers, function (tiddler, title) {\\n      if ($tw.utils.count(tiddler) === 0) {\\n        newFields['selection-' + title] = 'unchecked'\\n        newFields['suppressed-' + title] = 'yes'\\n      }\\n    })\\n    // Save the $:/Import tiddler\\n    newFields.text = JSON.stringify(importData, null, $tw.config.preferences.jsonSpaces)\\n    this.wiki.addTiddler(new $tw.Tiddler(importTiddler, newFields))\\n    // Update the story and history details\\n    var autoOpenOnImport = event.autoOpenOnImport ? event.autoOpenOnImport : this.getVariable('tv-auto-open-on-import')\\n    if (autoOpenOnImport !== 'no') {\\n      var storyList = this.getStoryList()\\n      var history = []\\n      // Add it to the story\\n      if (storyList && storyList.indexOf(importTitle) === -1) {\\n        storyList.unshift(importTitle)\\n      }\\n      // And to history\\n      history.push(importTitle)\\n      // Save the updated story and history\\n      this.saveStoryList(storyList)\\n      this.addToHistory(history)\\n    }\\n    return false\\n  }\\n\\n  //\\n  NavigatorWidget.prototype.handlePerformImportEvent = function (event) {\\n    var self = this\\n    var importTiddler = this.wiki.getTiddler(event.param)\\n    var importData = this.wiki.getTiddlerDataCached(event.param, {\\n      tiddlers: {},\\n    })\\n    var importReport = []\\n    // Add the tiddlers to the store\\n    importReport.push($tw.language.getString('Import/Imported/Hint') + '\\\\n')\\n    $tw.utils.each(importData.tiddlers, function (tiddlerFields) {\\n      var title = tiddlerFields.title\\n      if (title && importTiddler && importTiddler.fields['selection-' + title] !== 'unchecked') {\\n        if ($tw.utils.hop(importTiddler.fields, ['rename-' + title])) {\\n          var tiddler = new $tw.Tiddler(tiddlerFields, {\\n            title: importTiddler.fields['rename-' + title],\\n          })\\n        } else {\\n          var tiddler = new $tw.Tiddler(tiddlerFields)\\n        }\\n        tiddler = $tw.hooks.invokeHook('th-importing-tiddler', tiddler)\\n        self.wiki.addTiddler(tiddler)\\n        importReport.push('# [[' + tiddlerFields.title + ']]')\\n      }\\n    })\\n    // Replace the $:/Import tiddler with an import report\\n    this.wiki.addTiddler(\\n      new $tw.Tiddler({\\n        title: event.param,\\n        text: importReport.join('\\\\n'),\\n        status: 'complete',\\n      })\\n    )\\n    // Navigate to the $:/Import tiddler\\n    this.addToHistory([event.param])\\n    // Trigger an autosave\\n    $tw.rootWidget.dispatchEvent({ type: 'tm-auto-save-wiki' })\\n  }\\n\\n  //\\n  NavigatorWidget.prototype.handlePerformIpfsImportEvent = function (event) {\\n    var self = this\\n    var importTiddler = this.wiki.getTiddler(event.param)\\n    var importData = this.wiki.getTiddlerDataCached(event.param, {\\n      tiddlers: {},\\n    })\\n    var importReport = []\\n    // Add the tiddlers to the store\\n    importReport.push($tw.language.getString('Import/Imported/Hint') + '\\\\n')\\n    $tw.utils.each(importData.tiddlers, function (tiddlerFields) {\\n      var title = tiddlerFields.title\\n      if (title && importTiddler && importTiddler.fields['import-' + title] === 'yes' && importTiddler.fields['importSelection-' + title] !== 'unchecked') {\\n        if ($tw.utils.hop(importTiddler.fields, ['rename-' + title])) {\\n          var tiddler = new $tw.Tiddler(tiddlerFields, {\\n            title: importTiddler.fields['rename-' + title],\\n          })\\n        } else {\\n          var tiddler = new $tw.Tiddler(tiddlerFields)\\n        }\\n        tiddler = $tw.hooks.invokeHook('th-importing-tiddler', tiddler)\\n        self.wiki.addTiddler(tiddler)\\n        importReport.push('# [[' + tiddlerFields.title + ']]')\\n      }\\n    })\\n    importReport.push('\\\\n')\\n    // Delete tiddlers from the store\\n    importReport.push($tw.language.getString('Import/Deleted/Hint') + '\\\\n')\\n    $tw.utils.each(importData.tiddlers, function (tiddlerFields) {\\n      var title = tiddlerFields.title\\n      if (title && importTiddler && importTiddler.fields['delete-' + title] === 'yes' && importTiddler.fields['deleteSelection-' + title] !== 'unchecked') {\\n        var tiddler = self.wiki.getTiddler(title)\\n        if (tiddler) {\\n          self.handleIpfsDeleteTiddler({ param: tiddlerFields.title })\\n          tiddler = self.wiki.getTiddler(title)\\n          if (tiddler === undefined) {\\n            importReport.push('# [[' + tiddlerFields.title + ']]')\\n          }\\n        }\\n      }\\n    })\\n    // Replace the $:/IpfsImport tiddler with an import report\\n    this.wiki.addTiddler(\\n      new $tw.Tiddler({\\n        title: event.param,\\n        text: importReport.join('\\\\n'),\\n        status: 'complete',\\n      })\\n    )\\n    // Add a new record to the top of the history stack\\n    this.addToHistory([event.param])\\n    // Trigger an autosave\\n    $tw.rootWidget.dispatchEvent({ type: 'tm-auto-save-wiki' })\\n  }\\n\\n  NavigatorWidget.prototype.handleFoldTiddlerEvent = function (event) {\\n    var paramObject = event.paramObject || {}\\n    if (paramObject.foldedState) {\\n      var foldedState = this.wiki.getTiddlerText(paramObject.foldedState, 'show') === 'show' ? 'hide' : 'show'\\n      this.wiki.setText(paramObject.foldedState, 'text', null, foldedState)\\n    }\\n  }\\n\\n  NavigatorWidget.prototype.handleFoldOtherTiddlersEvent = function (event) {\\n    var self = this\\n    var paramObject = event.paramObject || {}\\n    var prefix = paramObject.foldedStatePrefix\\n    $tw.utils.each(this.getStoryList(), function (title) {\\n      self.wiki.setText(prefix + title, 'text', null, event.param === title ? 'show' : 'hide')\\n    })\\n  }\\n\\n  NavigatorWidget.prototype.handleFoldAllTiddlersEvent = function (event) {\\n    var self = this\\n    var paramObject = event.paramObject || {}\\n    var prefix = paramObject.foldedStatePrefix || '$:/state/folded/'\\n    $tw.utils.each(this.getStoryList(), function (title) {\\n      self.wiki.setText(prefix + title, 'text', null, 'hide')\\n    })\\n  }\\n\\n  NavigatorWidget.prototype.handleUnfoldAllTiddlersEvent = function (event) {\\n    var self = this\\n    var paramObject = event.paramObject || {}\\n    var prefix = paramObject.foldedStatePrefix\\n    $tw.utils.each(this.getStoryList(), function (title) {\\n      self.wiki.setText(prefix + title, 'text', null, 'show')\\n    })\\n  }\\n\\n  NavigatorWidget.prototype.handleRenameTiddlerEvent = function (event) {\\n    var options = {}\\n    var paramObject = event.paramObject || {}\\n    var from = paramObject.from || event.tiddlerTitle\\n    var to = paramObject.to\\n    /*eslint no-unneeded-ternary:\\\"off\\\"*/\\n    options.dontRenameInTags = paramObject.renameInTags === 'false' || paramObject.renameInTags === 'no' ? true : false\\n    options.dontRenameInLists = paramObject.renameInLists === 'false' || paramObject.renameInLists === 'no' ? true : false\\n    this.wiki.renameTiddler(from, to, options)\\n  }\\n\\n  exports.navigator = NavigatorWidget\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/ipfs/ipfs-wiki.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-wiki.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-wiki.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: wikimethod\\n\\nwikimethod\\n\\n\\\\*/\\n;(function () {\\n  /*jslint node:true,browser:true*/\\n  /*global $tw:false*/\\n  'use strict'\\n\\n  /*\\n   * Parse a block of text of a specified MIME type\\n   *  type: content type of text to be parsed\\n   *  text: text\\n   *  options: see below\\n   * Options include:\\n   *  parseAsInline: if true, the text of the tiddler will be parsed as an inline run\\n   *  _canonical_uri: optional string of the canonical URI of this content\\n   */\\n  exports.parseText = function (type, text, options) {\\n    text = text || ''\\n    options = options || {}\\n    // Select a parser\\n    var Parser = $tw.Wiki.parsers[type]\\n    if (!Parser && $tw.utils.getFileExtensionInfo(type)) {\\n      Parser = $tw.Wiki.parsers[$tw.utils.getFileExtensionInfo(type).type]\\n    }\\n    if (!Parser) {\\n      Parser = $tw.Wiki.parsers[options.defaultType || 'text/vnd.tiddlywiki']\\n    }\\n    if (!Parser) {\\n      return null\\n    }\\n    // Return the parser instance\\n    return new Parser(type, text, {\\n      parseAsInline: options.parseAsInline,\\n      wiki: this,\\n      tiddler: options.tiddler,\\n    })\\n  }\\n\\n  /*\\n   * Parse a tiddler according to its MIME type\\n   */\\n  exports.parseTiddler = function (title, options) {\\n    options = $tw.utils.extend({}, options)\\n    var cacheType = options.parseAsInline ? 'inlineParseTree' : 'blockParseTree'\\n    var tiddler = this.getTiddler(title)\\n    var self = this\\n    return tiddler\\n      ? this.getCacheForTiddler(title, cacheType, function () {\\n          options.tiddler = tiddler\\n          return self.parseText(tiddler.fields.type, tiddler.fields.text, options)\\n        })\\n      : null\\n  }\\n\\n  /**\\n   * Parse text from a tiddler and render it into another format\\n   * outputType: content type for the output\\n   * title: title of the tiddler to be rendered\\n   * options: see below\\n   * Options include:\\n   * variables: hashmap of variables to set\\n   * parentWidget: optional parent widget for the root node\\n   */\\n  exports.renderTiddlerAndSign = async function (outputType, title, options) {\\n    options = options || {}\\n    var parser = this.parseTiddler(title, options)\\n    var widgetNode = this.makeWidget(parser, options)\\n    var container = $tw.fakeDocument.createElement('div')\\n    widgetNode.render(container, null)\\n    var sign = $tw.wiki.locateTWElement(container, 'sign')\\n    if (sign) {\\n      var content = JSON.parse($tw.utils.htmlDecode(sign.textContent))\\n      content.signature = await $tw.ipfs.personalSign(content.keccak256)\\n      content.signature = $tw.crypto.encrypt(content.signature)\\n      content = JSON.stringify(content)\\n      sign.textContent = $tw.utils.htmlEncode(content)\\n    }\\n    return outputType === 'text/html' ? container.innerHTML : outputType === 'text/plain-formatted' ? container.formattedTextContent : container.textContent\\n  }\\n\\n  exports.locateTWElement = function (element, type) {\\n    if (element.children) {\\n      for (var i = 0; i < element.children.length; i++) {\\n        const current = element.children[i]\\n        if (current[type]) {\\n          return current\\n        }\\n        if (current.children) {\\n          const found = $tw.wiki.locateTWElement(current, type)\\n          if (found) {\\n            return found\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Read an array of browser File objects, invoking callback(tiddlerFieldsArray) once they're all read\\n   */\\n  exports.readFiles = async function (files, options) {\\n    var callback\\n    if (typeof options === 'function') {\\n      callback = options\\n      options = {}\\n    } else {\\n      callback = options.callback\\n    }\\n    var result = []\\n    var outstanding = files.length\\n    var readFileCallback = function (content) {\\n      if ($tw.utils.isArray(content)) {\\n        result.push.apply(result, content)\\n      } else {\\n        result = content\\n      }\\n      if (--outstanding === 0) {\\n        callback(result)\\n      }\\n    }\\n    for (var f = 0; f < files.length; f++) {\\n      await this.readFile(files[f], $tw.utils.extend({}, options, { callback: readFileCallback }))\\n    }\\n    return files.length\\n  }\\n\\n  /**\\n   * Read a browser File object, invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\\n   */\\n  exports.readFile = async function (file, options) {\\n    var callback\\n    if (typeof options === 'function') {\\n      callback = options\\n      options = {}\\n    } else {\\n      callback = options.callback\\n    }\\n    // Get the type, falling back to the filename extension\\n    var type = file.type\\n    if (type === '' || !type) {\\n      var dotPos = file.name.lastIndexOf('.')\\n      if (dotPos !== -1) {\\n        var fileExtensionInfo = $tw.utils.getFileExtensionInfo(file.name.substr(dotPos))\\n        if (fileExtensionInfo) {\\n          type = fileExtensionInfo.type\\n        }\\n      }\\n    }\\n    // Figure out if we're reading a binary file\\n    var contentTypeInfo = $tw.config.contentTypeInfo[type]\\n    var isBinary = contentTypeInfo ? contentTypeInfo.encoding === 'base64' : false\\n    // Log some debugging information\\n    if ($tw.log.IMPORT) {\\n      console.log(\\\"Importing file '\\\" + file.name + \\\"', type: '\\\" + type + \\\"', isBinary: \\\" + isBinary)\\n    }\\n    // Give the hook a chance to process the drag\\n    const info = {\\n      file: file,\\n      type: type,\\n      isBinary: isBinary,\\n      callback: callback,\\n    }\\n    var invoked = false\\n    if ($tw.ipfs && $tw.ipfs.handleImportFile) {\\n      invoked = await $tw.ipfs.handleImportFile(info)\\n    }\\n    if ((invoked !== true && $tw.hooks.invokeHook('th-importing-file')) !== true) {\\n      this.readFileContent(file, type, isBinary, options.deserializer, callback)\\n    }\\n  }\\n\\n  /**\\n   * Lower level utility to read the content of a browser File object,\\n   * invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\\n   */\\n  exports.readFileContent = function (file, type, isBinary, deserializer, callback) {\\n    var self = this\\n    // Create the FileReader\\n    var reader = new FileReader()\\n    // Onload\\n    reader.onload = function (event) {\\n      var text = event.target.result\\n      var tiddlerFields = { title: file.name || 'Untitled', type: type }\\n      if (isBinary) {\\n        var commaPos = text.indexOf(',')\\n        if (commaPos !== -1) {\\n          text = text.substr(commaPos + 1)\\n        }\\n      }\\n      // Check whether this is a compressed TiddlyWiki file\\n      var compressedStoreArea = $tw.utils.extractCompressedStoreArea(text)\\n      if (compressedStoreArea) {\\n        if (!$tw.utils.inflateCompressedStoreArea(compressedStoreArea, callback)) {\\n          // Otherwise, just try to deserialise any tiddlers in the file\\n          callback(\\n            self.deserializeTiddlers(type, compressedStoreArea, tiddlerFields, {\\n              deserializer: deserializer,\\n            })\\n          )\\n        }\\n      } else {\\n        // Check whether this is an encrypted TiddlyWiki file\\n        var encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(text)\\n        if (encryptedStoreArea) {\\n          if (!$tw.utils.decrypt(encryptedStoreArea, callback)) {\\n            callback(\\n              self.deserializeTiddlers(type, encryptedStoreArea, tiddlerFields, {\\n                deserializer: deserializer,\\n              })\\n            )\\n          }\\n        } else {\\n          // Otherwise, just try to deserialise any tiddlers in the file\\n          callback(\\n            self.deserializeTiddlers(type, text, tiddlerFields, {\\n              deserializer: deserializer,\\n            })\\n          )\\n        }\\n      }\\n    }\\n    // Kick off the read\\n    if (isBinary) {\\n      reader.readAsDataURL(file)\\n    } else {\\n      reader.readAsText(file)\\n    }\\n  }\\n})()\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"wikimethod\"\n        },\n        \"$:/plugins/ipfs/changelog\": {\n            \"title\": \"$:/plugins/ipfs/changelog\",\n            \"tags\": \"$:/ipfs/core\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"!! v0.4.0\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.3.0...v0.4.0]]\\n\\n!! v0.3.0\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.9...v0.3.0]]\\n\\n!! v0.2.9\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.8...v0.2.9]]\\n\\n!! v0.2.8\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.7...v0.2.8]]\\n\\n...\\n\\n!! 0.2.2\\n\\n* First public release\"\n        },\n        \"$:/plugins/ipfs/readme\": {\n            \"title\": \"$:/plugins/ipfs/readme\",\n            \"tags\": \"$:/ipfs/core\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"!! IPFS with ~TiddlyWiki\\n\\nFeatures:\\n\\n* Store `TiddlyWiki`'s and attachments on [ext[IPFS|https://ipfs.io/]]\\n* Access `TiddlyWiki`'s and attachments from [ext[IPFS|https://ipfs.io/]]\\n* Compress `TiddlyWiki`'s and attachments\\n* Encrypt, Decrypt and Sign `TiddlyWiki`'s and attachments\\n  * Standford\\n  * Ethereum\\n  * [ext[SHA-3|https://en.wikipedia.org/wiki/SHA-3]]\\n* Import and Export\\n* Publish and Manage IPNS keys and IPNS cids\\n* Interact with [ext[Metamask|https://metamask.io]] Ethereum wallets\\n* Publish to [ext[ENS|https://ens.domains]]\\n* Share over [ext[IPFS|https://ipfs.io/]] `TiddlyWiki`'s [ext[Tiddlers|https://tiddlywiki.com/#Tiddlers]] and attachments\\n\\nSupported Browsers:\\n\\n* [ext[Firefox|https://www.mozilla.org]]\\n* [ext[Chrome|https://www.google.com/chrome/]]\\n* [ext[Chromium|https://www.chromium.org]]\\n\\nSupported Ethereum browser extension:\\n\\n* [ext[Metamask|https://metamask.io]]\\n\\nSupported Mobile ĐApp browser:\\n\\n* [ext[Metamask|https://metamask.io]]\\n\\nSupported ENS Ethereum Networks\\n\\n* `Mainnet`: Ethereum Main Network\\n* `Ropsten`: Ethereum Test Network (~PoW)\\n* `Rinkeby`: Ethereum Test Network (~PoA)\\n* `Goerli`: Ethereum Test Network (~PoA)\\n\\nResources:\\n\\n* https://github.com/xmaysonnave/tiddlywiki-ipfs/\\n* https://github.com/xmaysonnave/tiddlywiki-ipfs/blob/main/README.md\\n\\nCurrent dependencies:\\n\\n* [[$:/boot/boot.js]] {{$:/boot/boot.js!!version}} <$ipfslink value=<<version-url title:\\\"$:/boot/boot.js\\\" ipath:\\\"tiddlywiki-ipfs/boot\\\">>>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n* [[$:/library/ipfs.js]] {{$:/library/ipfs.js!!version}} <$ipfslink value=<<version-url title:\\\"$:/library/ipfs.js\\\" ipath:\\\"tiddlywiki-ipfs/library\\\">>>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n* [[$:/plugins/ipfs]] {{$:/plugins/ipfs.json!!version}} <$ipfslink value=<<version-url title:\\\"$:/plugins/ipfs.json\\\" ipath:\\\"tiddlywiki-ipfs/plugin\\\">>>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n\\nBuilt dependencies:\\n\\n* `$:/boot/boot.js` {{$:/boot/boot.js-build!!version}} <$ipfslink value={{$:/boot/boot.js-build!!sourceUri}}>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n* `$:/library/ipfs.js` {{$:/library/ipfs.js-build!!version}} <$ipfslink value={{$:/library/ipfs.js-build!!sourceUri}}>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n\\nLatest:\\n\\n* `$:/boot/boot.js` <$ipfslink value=\\\"tiddly.bluelightav.eth/tiddlywiki-ipfs/boot/latest-build/\\\">[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n* `$:/library/ipfs.js`  <$ipfslink value=\\\"tiddly.bluelightav.eth/tiddlywiki-ipfs/library/latest-build/\\\">[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n* `$:/plugins/ipfs` <$ipfslink value=\\\"tiddly.bluelightav.eth/tiddlywiki-ipfs/plugin/latest-build/\\\">[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\"\n        },\n        \"$:/ipfs/saver/api/http/10.45.0.1/5001\": {\n            \"title\": \"$:/ipfs/saver/api/http/10.45.0.1/5001\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"http://10.45.0.1:5001\"\n        },\n        \"$:/ipfs/saver/api/http/127.0.0.1/5001\": {\n            \"title\": \"$:/ipfs/saver/api/http/127.0.0.1/5001\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"http://127.0.0.1:5001\"\n        },\n        \"$:/ipfs/saver/api/https/bluelight.link\": {\n            \"title\": \"$:/ipfs/saver/api/https/bluelight.link\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"https://api.bluelight.link\"\n        },\n        \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\": {\n            \"title\": \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"https://ipfs.infura.io:5001\"\n        },\n        \"$:/ipfs/saver/api/http/localhost/5001\": {\n            \"title\": \"$:/ipfs/saver/api/http/localhost/5001\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"http://localhost:5001\"\n        },\n        \"$:/ipfs/saver/gateway/http/10.45.0.1/8080\": {\n            \"title\": \"$:/ipfs/saver/gateway/http/10.45.0.1/8080\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"http://10.45.0.1:8080\"\n        },\n        \"$:/ipfs/saver/gateway/http/127.0.0.1/8080\": {\n            \"title\": \"$:/ipfs/saver/gateway/http/127.0.0.1/8080\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"http://127.0.0.1:8080\"\n        },\n        \"$:/ipfs/saver/gateway/https/bluelight.link\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/bluelight.link\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://bluelight.link\"\n        },\n        \"$:/ipfs/saver/gateway/https/cf-ipfs.com\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/cf-ipfs.com\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://cf-ipfs.com\"\n        },\n        \"$:/ipfs/saver/gateway/https/cloudflare-ipfs.com\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/cloudflare-ipfs.com\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://cloudflare-ipfs.com\"\n        },\n        \"$:/ipfs/saver/gateway/https/dweb.link\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/dweb.link\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://dweb.link\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.eternum.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.eternum.io\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.eternum.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.bluelightav.org\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.bluelightav.org\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.bluelightav.org\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.ipfs.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.ipfs.io\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.ipfs.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.greyh.at\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.greyh.at\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.greyh.at\"\n        },\n        \"$:/ipfs/saver/gateway/https/hardbin.com\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/hardbin.com\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://hardbin.com\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.infura.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.infura.io\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.infura.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.io\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.jes.xxx\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.jes.xxx\",\n            \"tags\": \"$:/ipfs/core $:/ipfs $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.jes.xxx\"\n        },\n        \"$:/ipfs/saver/gateway/http/localhost/8080\": {\n            \"title\": \"$:/ipfs/saver/gateway/http/localhost/8080\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"http://localhost:8080\"\n        },\n        \"$:/ipfs/saver/gateway/https/ninetailed.ninja\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ninetailed.ninja\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ninetailed.ninja\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.pinata.cloud\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.pinata.cloud\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.pinata.cloud\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.sloppyta.co\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.sloppyta.co\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.sloppyta.co\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.temporal.cloud\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.temporal.cloud\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.temporal.cloud\"\n        },\n        \"$:/SplashScreen\": {\n            \"title\": \"$:/SplashScreen\",\n            \"created\": \"20180927082601825\",\n            \"modified\": \"20210419083036494\",\n            \"tags\": \"$:/ipfs/editions/bluelightav $:/tags/RawMarkupWikified/TopBody\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\rules only filteredtranscludeinline transcludeinline macrocallinline\\n<div class=\\\"tc-remove-when-wiki-loaded\\\">\\n<style scoped>\\n\\n.tc-splash-text {\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";\\n  font-size: 16px;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  margin: 20px auto 0;\\n  width: 200px;\\n  text-align: center;\\n  color: <<colour foreground>>;\\n  fill: <<colour foreground>>;\\n}\\n\\n.tc-splash-text img {\\n  width: 150px;\\n  <<box-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\nhtml body.tc-body {\\n  background: <<colour page-background>>;\\n}\\n\\n/*\\nSpinner from https://github.com/tobiasahlin/SpinKit/ by Tobias Ahlin\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015 Tobias Ahlin\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\nsubject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n.tc-splash-spinner {\\n  margin: 20px auto 0;\\n  width: 70px;\\n  text-align: center;\\n}\\n\\n.tc-splash-spinner > div {\\n  width: 18px;\\n  height: 18px;\\n  border-radius: 100%;\\n  display: inline-block;\\n  -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\\n  animation: sk-bouncedelay 1.4s infinite ease-in-out both;\\n  background-color: #f88;\\n}\\n\\n.tc-splash-spinner .tc-splash-bounce-1 {\\n  -webkit-animation-delay: -0.32s;\\n  animation-delay: -0.32s;\\n  background-color: #8f8;\\n}\\n\\n.tc-splash-spinner .tc-splash-bounce-2 {\\n  -webkit-animation-delay: -0.16s;\\n  animation-delay: -0.16s;\\n  background-color: #88f;\\n}\\n\\n@-webkit-keyframes sk-bouncedelay {\\n  0%, 80%, 100% { -webkit-transform: scale(0) }\\n  40% { -webkit-transform: scale(1.0) }\\n}\\n\\n@keyframes sk-bouncedelay {\\n  0%, 80%, 100% {\\n  -webkit-transform: scale(0);\\n  transform: scale(0);\\n  } 40% {\\n  -webkit-transform: scale(1.0);\\n  transform: scale(1.0);\\n  }\\n}\\n</style>\\n\\n<div class=\\\"tc-splash-text\\\">\\n  <img crossorigin=\\\"anonymous\\\" src=\\\"{{$_ipfs_core_images_bluelight!!altSourceUri}}\\\" loading=\\\"eager\\\"/>\\n</div>\\n\\n<div class=\\\"tc-splash-text\\\">\\n  Please wait while <b>{{$:/SiteTitle}}</b> is loading...\\n</div>\\n\\n<div class=\\\"tc-splash-text\\\">\\n  <b>{{$:/ipfs/edition-build}}</b>\\n</div>\\n\\n<div class=\\\"tc-splash-spinner\\\">\\n  <div class=\\\"tc-splash-bounce-1\\\"></div>\\n  <div class=\\\"tc-splash-bounce-2\\\"></div>\\n  <div class=\\\"tc-splash-bounce-3\\\"></div>\\n</div>\\n\\n<div class=\\\"tc-splash-text\\\">\\n{{$:/core/icon||$:/core/templates/plain-text-tiddler}}\\n</div>\\n\\n</div>\"\n        },\n        \"$:/core/templates/css-tiddler\": {\n            \"title\": \"$:/core/templates/css-tiddler\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<$reveal type=\\\"match\\\" state=\\\"!!_canonical_uri\\\" text=\\\"\\\">\\n`<style`<$fields template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'></$fields>` type=\\\"text/css\\\">`<$view field=\\\"text\\\" format=\\\"text\\\"/>`</style>`\\n</$reveal>\\n<$reveal type=\\\"nomatch\\\" state=\\\"!!_canonical_uri\\\" text=\\\"\\\">\\n`<link`<$fields exclude='text' template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'></$fields>` crossorigin=\\\"anonymous\\\" rel=\\\"stylesheet\\\" href=\\\"`<$text text={{!!_canonical_uri}}/>`\\\"></link>`\\n</$reveal>\\n\"\n        },\n        \"$:/core/templates/javascript-tiddler\": {\n            \"title\": \"$:/core/templates/javascript-tiddler\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<$reveal type=\\\"match\\\" state=\\\"!!_canonical_uri\\\" text=\\\"\\\">\\n`<script`<$fields template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'></$fields>` type=\\\"text/javascript\\\">`<$view field=\\\"text\\\" format=\\\"text\\\"/>`</script>`\\n</$reveal>\\n<$reveal type=\\\"nomatch\\\" state=\\\"!!_canonical_uri\\\" text=\\\"\\\">\\n`<script`<$fields exclude='text' template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'></$fields>` crossorigin=\\\"anonymous\\\" type=\\\"text/javascript\\\" src=\\\"`<$text text={{!!_canonical_uri}}/>`\\\"></script>`\\n</$reveal>\"\n        },\n        \"$:/core/templates/static.area\": {\n            \"title\": \"$:/core/templates/static.area\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<$reveal type=\\\"nomatch\\\" state=\\\"$:/isCompressed\\\" text=\\\"yes\\\">\\n<$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawStaticContent]!has[draft.of]] ||$:/core/templates/raw-static-tiddler}}}\\n{{$:/core/templates/static.content||$:/core/templates/html-tiddler}}\\n</$reveal>\\n<!-- ensure splash screen isn't shown when JS is disabled -->\\n`<style>\\n.tc-remove-when-wiki-loaded {display: none;}\\n</style>`\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=\\\"$:/isCompressed\\\" text=\\\"yes\\\">\\n<!-- ensure splash screen isn't shown when JS is disabled -->\\n`<style>\\n.tc-remove-when-wiki-loaded {display: none;}\\n</style>`\\n</$reveal>\"\n        },\n        \"$:/core/templates/store.area.template.html\": {\n            \"title\": \"$:/core/templates/store.area.template.html\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<$reveal type=\\\"nomatch\\\" state=\\\"$:/isCompressed\\\" text=\\\"yes\\\">\\n<$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n`<div id=\\\"storeArea\\\" style=\\\"display:none;\\\">`\\n<$list filter=<<saveTiddlerFilter>> template=\\\"$:/core/templates/html-div-tiddler\\\"/>\\n<$list filter={{{ [<skinnySaveTiddlerFilter>] }}} template=\\\"$:/core/templates/html-div-skinny-tiddler\\\"/>\\n`</div>`\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n`<!--~~ Encrypted tiddlers ~~-->`\\n`<pre id=\\\"encryptedStoreArea\\\" type=\\\"text/plain\\\" style=\\\"display:none;\\\">`\\n<$encrypt filter=<<saveTiddlerFilter>>/>\\n`</pre>`\\n</$reveal>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=\\\"$:/isCompressed\\\" text=\\\"yes\\\">\\n`<!--~~ Compressed tiddlers ~~-->`\\n`<pre id=\\\"compressedStoreArea\\\" type=\\\"text/plain\\\" style=\\\"display:none;\\\">`\\n<$compress filter=<<saveTiddlerFilter>>/>\\n`</pre>`\\n</$reveal>\"\n        },\n        \"$:/core/templates/tiddlywiki5.html\": {\n            \"title\": \"$:/core/templates/tiddlywiki5.html\",\n            \"tags\": \"$:/ipfs/editions\",\n            \"text\": \"<$set name=\\\"saveTiddlerAndShadowsFilter\\\" filter=\\\"[subfilter<saveTiddlerFilter>] [subfilter<saveTiddlerFilter>plugintiddlers[]]\\\">\\n`<!doctype html>\\n`{{$:/core/templates/MOTW.html}}`<html lang=\\\"`<$text text={{{ [{$:/language}get[name]] }}}/>`\\\">\\n<head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n<!--~~ Raw markup for the top of the head section ~~-->\\n`{{{ [<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopHead]] ||$:/core/templates/raw-static-tiddler}}}`\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n<meta name=\\\"application-name\\\" content=\\\"TiddlyWiki\\\" />\\n<meta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n<meta name=\\\"tiddlywiki-version\\\" content=\\\"`{{$:/core/templates/version}}`\\\" />\\n<meta name=\\\"ipfs-edition-build\\\" content=\\\"`<<ipfs-edition-build>>`\\\"/>\\n<meta name=\\\"ipfs-edition-version\\\" content=\\\"`<<ipfs-edition-version>>`\\\"/>\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n<meta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n<meta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n<meta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n<meta name=\\\"format-detection\\\" content=\\\"telephone=no\\\" />\\n<meta name=\\\"copyright\\\" content=\\\"`{{$:/core/copyright.txt}}`\\\" />\\n<link id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n<title>`{{$:/core/wiki/title}}`</title>\\n<!--~~ This is a Tiddlywiki file. The points of interest in the file are marked with this pattern ~~-->\\n\\n<!--~~ Raw markup ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/core/wiki/rawmarkup]] ||$:/core/templates/plain-text-tiddler}}}\\n{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkup]] ||$:/core/templates/plain-text-tiddler}}}\\n{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified]] ||$:/core/templates/raw-static-tiddler}}}`\\n</head>\\n<body class=\\\"tc-body\\\">\\n<!--~~ Raw markup for the top of the body section ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n<!--~~ Static styles ~~-->\\n<div id=\\\"styleArea\\\">\\n`{{$:/boot/boot.css||$:/core/templates/css-tiddler}}`\\n</div>\\n<!--~~ Static content for Google and browsers without JavaScript ~~-->\\n<noscript>\\n<div id=\\\"splashArea\\\">\\n`{{$:/core/templates/static.area}}`\\n</div>\\n</noscript>\\n<!--~~ Ordinary tiddlers ~~-->\\n`{{$:/core/templates/store.area.template.html}}`\\n<!--~~ Library modules ~~-->\\n<div id=\\\"libraryModules\\\" style=\\\"display:none;\\\">\\n`{{{ [is[system]type[application/javascript]library[yes]] ||$:/core/templates/javascript-tiddler}}}`\\n</div>\\n<!--~~ Boot kernel prologue ~~-->\\n<div id=\\\"bootKernelPrefix\\\" style=\\\"display:none;\\\">\\n`{{ $:/boot/bootprefix.js ||$:/core/templates/javascript-tiddler}}`\\n</div>\\n<!--~~ Boot kernel ~~-->\\n<div id=\\\"bootKernel\\\" style=\\\"display:none;\\\">\\n`{{ $:/boot/boot.js ||$:/core/templates/javascript-tiddler}}`\\n</div>\\n<!--~~ Raw markup for the bottom of the body section ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/BottomBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n</body>\\n</html>`\\n\"\n        },\n        \"$:/core/ui/ControlPanel/Saving/General\": {\n            \"title\": \"$:/core/ui/ControlPanel/Saving/General\",\n            \"tags\": \"$:/tags/ControlPanel/Saving $:/ipfs/core\",\n            \"caption\": \"{{$:/language/ControlPanel/Saving/General/Caption}}\",\n            \"list-before\": \"\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/Settings/\\n\\n\\\\define preferred-saver()\\n<$text text=<<infosaver \\\"$(currentTiddler)$\\\">>/>\\n\\\\end\\n\\n{{$:/language/ControlPanel/Saving/General/Hint}}\\n\\n!! <$link to=\\\"$:/config/AutoSave\\\"><<lingo AutoSave/Caption>></$link>\\n\\n<<lingo AutoSave/Hint>>\\n\\n<$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"yes\\\"> <<lingo AutoSave/Enabled/Description>> </$radio>\\n\\n<$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"no\\\"> <<lingo AutoSave/Disabled/Description>> </$radio>\\n\\n!! <$link to=\\\"$:/isCompressed\\\"> <<lingo Compression/Caption>> </$link>\\n\\n<$checkbox tiddler=\\\"$:/isCompressed\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> <<lingo Compression/Description>> </$checkbox>\\n\\n!! <$link to=\\\"$:/config/encryption\\\"> <<lingo Encryption/Caption>> </$link>\\n\\n<$radio tiddler=\\\"$:/config/encryption\\\" value=\\\"standford\\\"> <<lingo Encryption/Standford/Description>> </$radio>\\n\\n<$radio tiddler=\\\"$:/config/encryption\\\" value=\\\"ethereum\\\"> <<lingo Encryption/Ethereum/Description>> </$radio>\\n\\n<$checkbox tiddler=\\\"$:/isSigned\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> <<lingo Encryption/Signature/Description>> </$checkbox>\\n\\n!! <$link to=\\\"$:/config/PreferredSaver\\\"> <<lingo PreferredSaver/Caption>> </$link>\\n\\n<$select tiddler=\\\"$:/config/PreferredSaver\\\">\\n<$list filter=\\\"[savers[]sort[]]\\\">\\n<option value=<<currentTiddler>>><<preferred-saver>></option>\\n</$list>\\n</$select>\"\n        },\n        \"$:/core/ui/ControlPanel/Ipfs/Saver\": {\n            \"title\": \"$:/core/ui/ControlPanel/Ipfs/Saver\",\n            \"tags\": \"$:/tags/ControlPanel/Saving $:/ipfs/core\",\n            \"caption\": \"{{$:/language/ControlPanel/Ipfs/Saver/Caption}}\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/Ipfs/Saver/\\n\\\\define service-name() Ipfs\\n\\n<<lingo Description>>\\n\\n''<<lingo Global>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/verbose\\\"><<lingo Verbose/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/verbose\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/pin\\\"><<lingo Pin/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/pin\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/unpin\\\"><<lingo Unpin/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/unpin\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/ipns/resolve\\\"><<lingo IPNS/Resolve/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/ipns/resolve\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/eth-link/resolve\\\"><<lingo ETH/Resolve/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/eth-link/resolve\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/directory/wrapped\\\"><<lingo Directory/Wrapped/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/directory/wrapped\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<$link to=\\\"$:/ipfs/saver/export\\\"><<lingo Export>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"json\\\"><<lingo Export/Json/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"static\\\"><<lingo Export/Static/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"tid\\\"><<lingo Export/Tid/Description>></$radio>\\n\\n''<$link to=\\\"$:/ipfs/saver/protocol\\\"><<lingo Protocol>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ens\\\"><<lingo Protocol/Ens/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ipfs\\\"><<lingo Protocol/Ipfs/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ipns\\\"><<lingo Protocol/Ipns/Description>></$radio>\\n\\n''<$link to=\\\"$:/ipfs/saver/policy\\\"><<lingo Policy>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/policy\\\" value=\\\"origin\\\"><<lingo Policy/Origin/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/policy\\\" value=\\\"gateway\\\"><<lingo Policy/Gateway/Description>></$radio>\\n\\n''<<lingo Url>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/api\\\"><<lingo ApiUrl>></$link>''</td>\\n<td width=\\\"80%\\\">\\n<$select tiddler=\\\"$:/ipfs/saver/api\\\" class=\\\"tc-edit-texteditor\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/ipfs/saver/api]!has[draft.of]sort[]]\\\">\\n<option value=<<currentTiddler>>><$transclude><$text text=<<currentTiddler>>/></$transclude></option>\\n</$list>\\n</$select>\\n</td>\\n</tr>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/gateway\\\"><<lingo GatewayUrl>></$link>''</td>\\n<td width=\\\"80%\\\">\\n<$select tiddler=\\\"$:/ipfs/saver/gateway\\\" class=\\\"tc-edit-texteditor\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/ipfs/saver/gateway]!has[draft.of]sort[]]\\\">\\n<option value=<<currentTiddler>>><$transclude><$text text=<<currentTiddler>>/></$transclude></option>\\n</$list>\\n</$select>\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<<lingo Ens>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ens/domain\\\"><<lingo EnsDomain>></$link>''</td>\\n<td width=\\\"80%\\\"><$edit-text tiddler=\\\"$:/ipfs/saver/ens/domain\\\" class=\\\"tc-edit-texteditor\\\" default=\\\"\\\" tag=\\\"input\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n<table style=\\\"width:20%;margin-left:40%;margin-right:40%;text-align:center;\\\">\\n<tbody>\\n<tr>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ens-manager-open\\\" tooltip={{$:/language/Buttons/Ens/Manager/Open/Hint}} aria-label={{$:/language/Buttons/Ens/Manager/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/ipfs/core/images/ens}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Manager/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ens-resolve-and-open\\\" tooltip={{$:/language/Buttons/Ens/Resolve/And/Open/Hint}} aria-label={{$:/language/Buttons/Ens/Resolve/And/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/globe}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Resolve/And/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<<lingo Ipns>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ipns/key\\\"><<lingo IpnsKey>></$link>''</td>\\n<td width=\\\"80%\\\"><$edit-text tiddler=\\\"$:/ipfs/saver/ipns/key\\\" class=\\\"tc-edit-texteditor\\\" default=\\\"\\\" tag=\\\"input\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ipns/cid\\\"><<lingo IpnsCid>></$link>''</td>\\n<td width=\\\"80%\\\"><$text text={{$:/ipfs/saver/ipns/cid}} class=\\\"tc-edit-texteditor\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n<table style=\\\"width:50%;margin-left:25%;margin-right:25%;text-align:center;\\\">\\n<tbody>\\n<tr>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-rename\\\" tooltip={{$:/language/Buttons/Ipns/Rename/Hint}} aria-label={{$:/language/Buttons/Ipns/Rename/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/mono-line}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Rename/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-generate\\\" tooltip={{$:/language/Buttons/Ipns/Generate/Hint}} aria-label={{$:/language/Buttons/Ipns/Generate/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-here-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Generate/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-remove\\\" tooltip={{$:/language/Buttons/Ipns/Remove/Hint}} aria-label={{$:/language/Buttons/Ipns/Remove/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/delete-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Remove/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-fetch\\\" tooltip={{$:/language/Buttons/Ipns/Fetch/Hint}} aria-label={{$:/language/Buttons/Ipns/Fetch/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/refresh-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Fetch/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-resolve-and-open\\\" tooltip={{$:/language/Buttons/Ipns/Resolve/And/Open/Hint}} aria-label={{$:/language/Buttons/Ipns/Resolve/And/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/globe}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Resolve/And/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-publish-to-ens\\\" tooltip={{$:/language/Buttons/Ipns/Publish/To/Ens/Hint}} aria-label={{$:/language/Buttons/Ipns/Publish/To/Ens/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/ipfs/core/images/ens}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Publish/To/Ens/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n</tr>\\n</tbody>\\n</table>\"\n        },\n        \"$:/core/ui/EditTemplate/body\": {\n            \"title\": \"$:/core/ui/EditTemplate/body\",\n            \"tags\": \"$:/tags/EditTemplate $:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/EditTemplate/Body/\\n\\n\\\\define config-visibility-title()\\n$:/config/EditorToolbarButtons/Visibility/$(currentTiddler)$\\n\\\\end\\n\\n\\\\define body-editor()\\n<$list filter=\\\"[all[current]has[_canonical_uri]]\\\">\\n\\n<div class=\\\"tc-message-box\\\">\\n\\n<<lingo External/Hint>>\\n\\n<$ipfslink field=\\\"_canonical_uri\\\" tiddler=<<currentTiddler>>/>\\n\\n</div>\\n\\n</$list>\\n\\n<$list filter=\\\"[all[current]!has[_canonical_uri]]\\\">\\n\\n<$reveal state=\\\"$:/state/showeditpreview\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n\\n<div class=\\\"tc-tiddler-preview\\\">\\n\\n<$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n\\n<div class=\\\"tc-tiddler-preview-preview\\\">\\n\\n<$transclude tiddler={{$:/state/editpreviewtype}} mode=\\\"inline\\\">\\n\\n<$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/preview/output\\\" mode=\\\"inline\\\"/>\\n\\n</$transclude>\\n\\n</div>\\n\\n</div>\\n\\n</$reveal>\\n\\n<$reveal state=\\\"$:/state/showeditpreview\\\" type=\\\"nomatch\\\" text=\\\"yes\\\">\\n\\n<$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n\\n</$reveal>\\n\\n</$list>\\n\\n\\\\end\\n\\n\\n<$vars modeState=<<qualify \\\"$:/state/edition/body/\\\">>>\\n\\n<$reveal type=\\\"nomatch\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<$button set=<<modeState>> setTo=\\\"expanded\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-right}} {{$:/language/ControlPanel/Editor/Body/Caption}}</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<$button set=<<modeState>> setTo=\\\"restored\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-down}} {{$:/language/ControlPanel/Editor/Body/Caption}}</$button>\\n</$reveal>\\n\\n<$reveal type=\\\"match\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<<body-editor>>\\n</$reveal>\\n\\n</$vars>\"\n        },\n        \"$:/core/ui/EditTemplate/fields\": {\n            \"title\": \"$:/core/ui/EditTemplate/fields\",\n            \"tags\": \"$:/tags/EditTemplate $:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/EditTemplate/\\n\\\\define config-title()\\n$:/config/EditTemplateFields/Visibility/$(currentField)$\\n\\\\end\\n\\n\\\\define config-filter()\\n[[hide]] -[title{$(config-title)$}]\\n\\\\end\\n\\n\\\\define current-tiddler-new-field-selector()\\n[data-tiddler-title=\\\"$(currentTiddlerCSSescaped)$\\\"] .tc-edit-field-add-name-wrapper input\\n\\\\end\\n\\n\\\\define new-field-actions()\\n<$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [<newFieldNameTiddler>get[text]] }}} $value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<$action-deletetiddler $filter=\\\"[<newFieldNameTiddler>] [<newFieldValueTiddler>] [<storeTitle>] [<searchListState>]\\\"/>\\n<$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=<<current-tiddler-new-field-selector>>/>\\n\\\\end\\n\\n\\\\define delete-state-tiddlers() <$action-deletetiddler $filter=\\\"[<newFieldNameTiddler>] [<storeTitle>] [<searchListState>]\\\"/>\\n\\n\\\\define cancel-search-actions-inner()\\n<$list filter=\\\"[<storeTitle>has[text]] [<newFieldNameTiddler>has[text]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"<<cancel-delete-tiddler-actions \\\"cancel\\\">>\\\"\\\"\\\">\\n<<delete-state-tiddlers>>\\n</$list>\\n\\\\end\\n\\n\\\\define cancel-search-actions()\\n<$set name=\\\"userInput\\\" value={{{ [<storeTitle>get[text]] }}}>\\n<$list filter=\\\"[<newFieldNameTiddler>get[text]!match<userInput>]\\\" emptyMessage=\\\"\\\"\\\"<<cancel-search-actions-inner>>\\\"\\\"\\\">\\n<$action-setfield $tiddler=<<newFieldNameTiddler>> text=<<userInput>>/><$action-setfield $tiddler=<<refreshTitle>> text=\\\"yes\\\"/>\\n</$list>\\n</$set>\\n\\\\end\\n\\n\\\\define new-field()\\n<$vars name={{{ [<newFieldNameTiddler>get[text]] }}}>\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=<<name>>>\\n<$button tooltip=<<lingo Fields/Add/Button/Hint>>>\\n<$action-sendmessage $message=\\\"tm-add-field\\\"\\n$name=<<name>>\\n$value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<$action-deletetiddler $filter=\\\"[<newFieldNameTiddler>] [<newFieldValueTiddler>] [<storeTitle>] [<searchListState>]\\\"/>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" default=<<name>>>\\n<$button>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n</$vars>\\n\\\\end\\n\\\\whitespace trim\\n\\n\\\\define fields-editor()\\n<div class=\\\"tc-edit-fields\\\">\\n<table class={{{ [all[current]fields[]] :filter[lookup[$:/config/EditTemplateFields/Visibility/]!match[hide]] +[count[]!match[0]] +[then[tc-edit-fields]] ~[[tc-edit-fields tc-edit-fields-small]] }}}>\\n<tbody>\\n<$list filter=\\\"[all[current]fields[]] +[sort[title]]\\\" variable=\\\"currentField\\\" storyview=\\\"pop\\\">\\n<$list filter=<<config-filter>> variable=\\\"temp\\\">\\n<tr class=\\\"tc-edit-field\\\">\\n<td class=\\\"tc-edit-field-name\\\">\\n<$ipfslink value=<<currentField>> field=<<currentField>> tiddler=<<currentTiddler>>/>:</td>\\n<td class=\\\"tc-edit-field-value\\\">\\n<$keyboard key=\\\"((delete-field))\\\" actions=\\\"\\\"\\\"<$action-deletefield $field=<<currentField>>/><$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [<currentTiddler>escapecss[]] }}}><$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=<<current-tiddler-new-field-selector>>/></$set>\\\"\\\"\\\">\\n<$edit-text tiddler=<<currentTiddler>> field=<<currentField>> placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} tabindex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\"/>\\n</$keyboard>\\n</td>\\n<td class=\\\"tc-edit-field-remove\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/language/EditTemplate/Field/Remove/Hint}} aria-label={{$:/language/EditTemplate/Field/Remove/Caption}}>\\n<$action-deletefield $field=<<currentField>>/><$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [<currentTiddler>escapecss[]] }}}><$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=<<current-tiddler-new-field-selector>>/></$set>\\n{{$:/core/images/delete-button}}\\n</$button>\\n</td>\\n</tr>\\n</$list>\\n</$list>\\n</tbody>\\n</table>\\n</div>\\n\\n<$fieldmangler>\\n<div class=\\\"tc-edit-field-add\\\">\\n<em class=\\\"tc-edit tc-small-gap-right\\\">\\n<<lingo Fields/Add/Prompt>>\\n</em>\\n<$vars refreshTitle=<<qualify \\\"$:/temp/fieldname/refresh\\\">> storeTitle=<<newFieldNameInputTiddler>> searchListState=<<newFieldNameSelectionTiddler>>>\\n<div class=\\\"tc-edit-field-add-name-wrapper\\\">\\n<$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=<<newFieldNameTiddler>> storeTitle=<<storeTitle>> refreshTitle=<<refreshTitle>>\\n\\t\\tselectionStateTitle=<<searchListState>> tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Name/Placeholder}}\\n\\t\\tfocusPopup=<<qualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-edit-texteditor tc-popup-handle\\\" tabindex={{$:/config/EditTabIndex}}\\n\\t\\tfocus={{{ [{$:/config/AutoFocus}match[fields]then[true]] ~[[false]] }}} cancelPopups=\\\"yes\\\"\\n\\t\\tconfigTiddlerFilter=\\\"[[$:/config/EditMode/fieldname-filter]]\\\" inputCancelActions=<<cancel-search-actions>> />\\n<$button popup=<<qualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown tc-small-gap\\\" tooltip={{$:/language/EditTemplate/Field/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Field/Dropdown/Caption}}>{{$:/core/images/down-arrow}}</$button>\\n<$reveal state=<<qualify \\\"$:/state/popup/field-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n<div class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n<$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n<$linkcatcher to=<<newFieldNameTiddler>>>\\n<div class=\\\"tc-dropdown-item\\\">\\n<<lingo Fields/Add/Dropdown/User>>\\n</div>\\n<$set name=\\\"newFieldName\\\" value={{{ [<storeTitle>get[text]] }}}>\\n<$list filter=\\\"[!is[shadow]!is[system]fields[]search:title<newFieldName>sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type\\\"  variable=\\\"currentField\\\">\\n<$list filter=\\\"[<currentField>addsuffix[-primaryList]] -[<searchListState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"<$link to=<<currentField>> class=\\\"tc-list-item-selected\\\"><$text text=<<currentField>>/></$link>\\\"\\\"\\\">\\n<$link to=<<currentField>>>\\n<$text text=<<currentField>>/>\\n</$link>\\n</$list>\\n</$list>\\n<div class=\\\"tc-dropdown-item\\\">\\n<<lingo Fields/Add/Dropdown/System>>\\n</div>\\n<$list filter=\\\"[fields[]search:title<newFieldName>sort[]] -[!is[shadow]!is[system]fields[]]\\\" variable=\\\"currentField\\\">\\n<$list filter=\\\"[<currentField>addsuffix[-secondaryList]] -[<searchListState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"<$link to=<<currentField>> class=\\\"tc-list-item-selected\\\"><$text text=<<currentField>>/></$link>\\\"\\\"\\\">\\n<$link to=<<currentField>>>\\n<$text text=<<currentField>>/>\\n</$link>\\n</$list>\\n</$list>\\n</$set>\\n</$linkcatcher>\\n</$set>\\n</div>\\n</$reveal>\\n</div>\\n<span class=\\\"tc-edit-field-add-value tc-small-gap-right\\\">\\n<$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [<currentTiddler>escapecss[]] }}}>\\n<$keyboard key=\\\"((add-field))\\\" actions=<<new-field-actions>>>\\n<$edit-text tiddler=<<newFieldValueTiddler>> tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} class=\\\"tc-edit-texteditor\\\" tabindex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\"/>\\n</$keyboard>\\n</$set>\\n</span>\\n<span class=\\\"tc-edit-field-add-button\\\">\\n<$macrocall $name=\\\"new-field\\\"/>\\n</span>\\n</$vars>\\n</div>\\n</$fieldmangler>\\n\\\\end\\n\\n<$vars modeState=<<qualify \\\"$:/state/edition/fields/\\\">>>\\n\\n<$reveal type=\\\"nomatch\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<$button set=<<modeState>> setTo=\\\"expanded\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-right}} {{$:/language/ControlPanel/Editor/Fields/Caption}}</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<$button set=<<modeState>> setTo=\\\"restored\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-down}} {{$:/language/ControlPanel/Editor/Fields/Caption}}</$button>\\n</$reveal>\\n\\n<$reveal type=\\\"match\\\" state=<<modeState>> text=\\\"expanded\\\" default=\\\"expanded\\\">\\n<<fields-editor>>\\n</$reveal>\\n\\n</$vars>\"\n        },\n        \"$:/core/ui/EditTemplate\": {\n            \"title\": \"$:/core/ui/EditTemplate\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\\\\define delete-edittemplate-state-tiddlers() <$action-deletetiddler $filter=\\\"[<newFieldNameTiddler>] [<newFieldValueTiddler>] [<newFieldNameInputTiddler>] [<newFieldNameSelectionTiddler>] [<newTagNameTiddler>] [<newTagNameInputTiddler>] [<newTagNameSelectionTiddler>] [<typeInputTiddler>] [<typeSelectionTiddler>]\\\"/>\\n\\\\define save-tiddler-actions()\\n<$action-sendmessage $message=\\\"tm-add-tag\\\" $param={{{ [<newTagNameTiddler>get[text]] }}}/>\\n<$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [<newFieldNameTiddler>get[text]] }}} $value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<<delete-edittemplate-state-tiddlers>>\\n<$action-sendmessage $message=\\\"tm-save-tiddler\\\"/>\\n\\\\end\\n\\\\define cancel-delete-tiddler-actions(message)\\n<<delete-edittemplate-state-tiddlers>>\\n<$action-sendmessage $message=\\\"tm-$message$-tiddler\\\"/>\\n\\\\end\\n<div data-tiddler-title=<<currentTiddler>> data-tags={{!!tags}} class={{{ tc-tiddler-frame tc-tiddler-edit-frame [<currentTiddler>is[tiddler]then[tc-tiddler-exists]] [<currentTiddler>is[missing]!is[shadow]then[tc-tiddler-missing]] [<currentTiddler>is[shadow]then[tc-tiddler-exists tc-tiddler-shadow]] [<currentTiddler>is[system]then[tc-tiddler-system]] [{!!class}] [<currentTiddler>tags[]encodeuricomponent[]addprefix[tc-tagged-]] +[join[ ]] }}}>\\n<$fieldmangler>\\n<$vars storyTiddler=<<currentTiddler>> newTagNameTiddler=<<qualify \\\"$:/temp/NewTagName\\\">> newFieldNameTiddler=<<qualify \\\"$:/temp/NewFieldName\\\">> newFieldValueTiddler=<<qualify \\\"$:/temp/NewFieldValue\\\">> newFieldNameInputTiddler=<<qualify \\\"$:/temp/NewFieldName/input\\\">> newFieldNameSelectionTiddler=<<qualify \\\"$:/temp/NewFieldName/selected-item\\\">> newTagNameInputTiddler=<<qualify \\\"$:/temp/NewTagName/input\\\">> newTagNameSelectionTiddler=<<qualify \\\"$:/temp/NewTagName/selected-item\\\">> typeInputTiddler=<<qualify \\\"$:/temp/Type/input\\\">> typeSelectionTiddler=<<qualify \\\"$:/temp/Type/selected-item\\\">>>\\n<$keyboard key=\\\"((cancel-edit-tiddler))\\\" actions=<<cancel-delete-tiddler-actions \\\"cancel\\\">>>\\n<$keyboard key=\\\"((save-tiddler))\\\" actions=<<save-tiddler-actions>>>\\n<$list filter=\\\"[all[shadows+tiddlers]list[$:/tags/EditTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n<$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[<tv-config-toolbar-class>] [<listItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n<$transclude tiddler=<<listItem>>/>\\n</$set>\\n</$list>\\n</$keyboard>\\n</$keyboard>\\n</$vars>\\n</$fieldmangler>\\n</div>\"\n        },\n        \"$:/plugins/ipfs/styles\": {\n            \"title\": \"$:/plugins/ipfs/styles\",\n            \"tags\": \"$:/tags/Stylesheet $:/ipfs/core\",\n            \"type\": \"text/css\",\n            \"text\": \".tc-ipfs-action {\\n  display: block;\\n  margin: auto;\\n  width: 18px;\\n  height: 18px;\\n}\\n\\n.ethAddress {\\n  padding: 20px 0px 0px 40px;\\n  height: 80px;\\n}\"\n        },\n        \"$:/core/ui/ipfs/export/listing\": {\n            \"title\": \"$:/core/ui/ipfs/export/listing\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/Export/\\n\\n\\\\define selectionField()\\nselection-$(payloadTiddler)$\\n\\\\end\\n\\n\\\\define previewPopupState()\\n$(currentTiddler)$!!popup-$(payloadTiddler)$\\n\\\\end\\n\\n\\\\define select-all-actions()\\n<$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n<$action-setfield $field={{{ [<payloadTiddler>addprefix[selection-]] }}} $value={{$:/state/export/select-all}}/>\\n</$list>\\n\\\\end\\n\\n<table>\\n<tbody>\\n<tr>\\n<th>\\n<$checkbox title={{$:/language/Export/Listing/Export/Caption}} tiddler=\\\"$:/state/export/select-all\\\" field=\\\"text\\\" checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\" actions=<<select-all-actions>>/>\\n</th>\\n<th>\\n<<lingo Listing/Title/Caption>>\\n</th>\\n</tr>\\n<$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n<tr>\\n<td>\\n<$checkbox field=<<selectionField>> checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\"/>\\n</td>\\n<td>\\n<$reveal type=\\\"nomatch\\\" state=<<previewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<previewPopupState>> setTo=\\\"yes\\\">\\n{{$:/core/images/right-arrow}}&nbsp;<$link to=<<payloadTiddler>>/>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<previewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<previewPopupState>> setTo=\\\"no\\\">\\n{{$:/core/images/down-arrow}}&nbsp;<$link to=<<payloadTiddler>>/>\\n</$button>\\n</$reveal>\\n</td>\\n</tr>\\n<tr>\\n<td colspan=\\\"2\\\">\\n<$reveal type=\\\"match\\\" text=\\\"yes\\\" state=<<previewPopupState>> tag=\\\"div\\\">\\n<$list filter=\\\"[{$:/state/ipfsexportpreviewtype}has[text]]\\\" variable=\\\"listItem\\\" emptyMessage={{$:/core/ui/IpfsExportPreviews/Text}}>\\n<$transclude tiddler={{$:/state/ipfsexportpreviewtype}} mode=\\\"inline\\\"/>\\n</$list>\\n</$reveal>\\n</td>\\n</tr>\\n</$list>\\n</tbody>\\n</table>\\n\"\n        },\n        \"$:/core/ui/IpfsExportPreviews/Fields\": {\n            \"title\": \"$:/core/ui/IpfsExportPreviews/Fields\",\n            \"tags\": \"$:/tags/IpfsExportPreview $:/ipfs/core\",\n            \"caption\": \"{{$:/language/Import/Listing/Preview/Fields}}\",\n            \"text\": \"<table class=\\\"tc-view-field-table\\\">\\n<tbody>\\n<$list filter=\\\"[<payloadTiddler>subtiddlerfields<currentTiddler>sort[]] -text\\\" variable=\\\"fieldName\\\">\\n<tr class=\\\"tc-view-field\\\">\\n<td class=\\\"tc-view-field-name\\\">\\n<$text text=<<fieldName>>/>\\n</td>\\n<td class=\\\"tc-view-field-value\\\">\\n<$view field=<<fieldName>> tiddler=<<currentTiddler>> subtiddler=<<payloadTiddler>>/>\\n</td>\\n</tr>\\n</$list>\\n</tbody>\\n</table>\\n\"\n        },\n        \"$:/core/ui/IpfsExportPreviews/Text\": {\n            \"title\": \"$:/core/ui/IpfsExportPreviews/Text\",\n            \"tags\": \"$:/tags/IpfsExportPreview $:/ipfs/core\",\n            \"caption\": \"{{$:/language/Import/Listing/Preview/Text}}\",\n            \"text\": \"<$transclude tiddler=<<currentTiddler>> subtiddler=<<payloadTiddler>> mode=\\\"block\\\"/>\\n\"\n        },\n        \"$:/core/ui/IpfsExportPreviews/TextRaw\": {\n            \"title\": \"$:/core/ui/IpfsExportPreviews/TextRaw\",\n            \"tags\": \"$:/tags/IpfsExportPreview $:/ipfs/core\",\n            \"caption\": \"{{$:/language/Import/Listing/Preview/TextRaw}}\",\n            \"text\": \"<pre><code><$view tiddler=<<currentTiddler>> subtiddler=<<payloadTiddler>> /></code></pre>\"\n        },\n        \"$:/core/ui/ipfs/import/listing\": {\n            \"title\": \"$:/core/ui/ipfs/import/listing\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/Import/\\n\\n\\\\define messageField() message-$(payloadTiddler)$\\n\\n\\\\define payloadTitleFilter() [<currentTiddler>get<renameField>minlength[1]else<payloadTiddler>]\\n\\n\\\\define overWriteWarning()\\n<$list filter=\\\"[<currentTiddler>!has<suppressedField>]\\\">\\n<$text text={{{[subfilter<payloadTitleFilter>!is[tiddler]then[]] ~[<lingo-base>addsuffix[Listing/Rename/OverwriteWarning]get[text]]}}}/>\\n</$list>\\n\\\\end\\n\\n\\\\define importSelectionField() importSelection-$(payloadTiddler)$\\n\\n\\\\define renameField() rename-$(payloadTiddler)$\\n\\n\\\\define suppressedField() suppressed-$(payloadTiddler)$\\n\\n\\\\define newImportTitleTiddler() $:/temp/NewImportTitle-$(payloadTiddler)$\\n\\n\\\\define deleteSelectionField() deleteSelection-$(payloadTiddler)$\\n\\n\\\\define previewPopupState() $(currentTiddler)$!!popup-$(payloadTiddler)$\\n\\n\\\\define renameFieldState() $(currentTiddler)$!!state-rename-$(payloadTiddler)$\\n\\n\\\\define importState() $(currentTiddler)$!!import-$(payloadTiddler)$\\n\\n\\\\define deleteState() $(currentTiddler)$!!delete-$(payloadTiddler)$\\n\\n\\\\define select-all-actions()\\n<$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n<$action-setfield $field={{{ [<payloadTiddler>addprefix[importSelection-]] }}} $value={{$:/state/import/select-all}}/>\\n</$list>\\n\\\\end\\n\\n\\\\define delete-all-actions()\\n<$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n<$action-setfield $field={{{ [<payloadTiddler>addprefix[deleteSelection-]] }}} $value={{$:/state/import/delete-all}}/>\\n</$list>\\n\\\\end\\n\\n<table class=\\\"tc-import-table\\\">\\n<tbody>\\n<tr>\\n<th align=\\\"left\\\">\\n<$checkbox tiddler=\\\"$:/state/import/select-all\\\" field=\\\"text\\\" checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\" actions=<<select-all-actions>>>\\n<<lingo Listing/ImportAll/Caption>>\\n</$checkbox>\\n</th>\\n<th>\\n<$checkbox tiddler=\\\"$:/state/import/delete-all\\\" field=\\\"text\\\" checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"unchecked\\\" actions=<<delete-all-actions>>>\\n<<lingo Listing/DeleteAll/Caption>>\\n</$checkbox>\\n</th>\\n<th>\\n<<lingo Listing/Title/Caption>>\\n</th>\\n<th>\\n<<lingo Listing/Status/Caption>>\\n</th>\\n</tr>\\n<$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n<tr class={{{[<currentTiddler>has<suppressedField>then[tc-row-disabled]] ~[subfilter<payloadTitleFilter>is[tiddler]then[tc-row-warning]] }}}>\\n<td>\\n<$reveal type=\\\"match\\\" state=<<importState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$checkbox field=<<importSelectionField>> checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\"/>\\n</$reveal>\\n</td>\\n<td>\\n<$reveal type=\\\"match\\\" state=<<deleteState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$checkbox field=<<deleteSelectionField>> checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\"/>\\n</$reveal>\\n</td>\\n<td>\\n<$reveal type=\\\"nomatch\\\" state=<<renameFieldState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$reveal type=\\\"nomatch\\\" state=<<previewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\" class=\\\"tc-flex\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown tc-flex-grow-1 tc-word-break\\\" set=<<previewPopupState>> setTo=\\\"yes\\\" disabled={{{[<currentTiddler>has<suppressedField>then[yes]else[no]]}}}>\\n<span class=\\\"tc-small-gap-right\\\">{{$:/core/images/right-arrow}}</span><$link to={{{[subfilter<payloadTitleFilter>]}}}/>\\n</$button>\\n<$list filter=\\\"[<currentTiddler>!has<suppressedField>]\\\"><$button class=\\\"tc-btn-invisible\\\" set=<<renameFieldState>> setTo=\\\"yes\\\" tooltip={{{[<lingo-base>addsuffix[Listing/Rename/Tooltip]get[text]]}}}>{{$:/core/images/edit-button}}</$button></$list>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<previewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<previewPopupState>> setTo=\\\"no\\\">\\n<span class=\\\"tc-small-gap-right\\\">{{$:/core/images/down-arrow}}</span><$link to={{{[subfilter<payloadTitleFilter>]}}}/>\\n</$button>\\n</$reveal>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<renameFieldState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n<$text text={{{[<lingo-base>addsuffix[Listing/Rename/Prompt]get[text]]}}}/>\\n</$reveal>\\n</td>\\n<td>\\n<$view field=<<messageField>>/>\\n<<overWriteWarning>>\\n</td>\\n</tr>\\n<$reveal type=\\\"match\\\" state=<<renameFieldState>> text=\\\"yes\\\" tag=\\\"tr\\\">\\n<td colspan=\\\"4\\\">\\n<div class=\\\"tc-flex\\\">\\n<$edit-text tiddler=<<newImportTitleTiddler>>  default={{{[subfilter<payloadTitleFilter>]}}} tag=\\\"input\\\" class=\\\"tc-import-rename tc-flex-grow-1\\\"/><span class=\\\"tc-small-gap-left\\\"><$button  class=\\\"tc-btn-invisible\\\" set=<<renameFieldState>> setTo=\\\"no\\\" tooltip={{{[<lingo-base>addsuffix[Listing/Rename/CancelRename]get[text]]}}}>{{$:/core/images/close-button}}<$action-deletetiddler $tiddler=<<newImportTitleTiddler>>/></$button><span class=\\\"tc-small-gap-right\\\"/></span><$button  class=\\\"tc-btn-invisible\\\" set=<<renameFieldState>> setTo=\\\"no\\\" tooltip={{{[<lingo-base>addsuffix[Listing/Rename/ConfirmRename]get[text]]}}}>{{$:/core/images/done-button}}<$action-setfield $field=<<renameField>> $value={{{[<newImportTitleTiddler>get[text]minlength[1]else<payloadTiddler>]}}} /><$action-deletetiddler $tiddler=<<newImportTitleTiddler>>/></$button>\\n</div>\\n</td>\\n</$reveal>\\n<tr>\\n<td colspan=\\\"4\\\">\\n<$reveal type=\\\"match\\\" text=\\\"yes\\\" state=<<previewPopupState>> tag=\\\"div\\\">\\n<$list filter=\\\"[{$:/state/ipfsimportpreviewtype}has[text]]\\\" variable=\\\"listItem\\\" emptyMessage={{$:/core/ui/ImportPreviews/Text}}>\\n<$transclude tiddler={{$:/state/ipfsimportpreviewtype}}/>\\n</$list>\\n</$reveal>\\n</td>\\n</tr>\\n</$list>\\n</tbody>\\n</table>\\n\"\n        },\n        \"$:/core/ui/Buttons/encryption\": {\n            \"title\": \"$:/core/ui/Buttons/encryption\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/locked-padlock}} {{$:/language/Buttons/Encryption/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Encryption/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$reveal type=\\\"match\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n<$button message=\\\"tm-clear-password\\\" tooltip=<<ipfs-encryption-tooltip>> aria-label={{$:/language/Buttons/Encryption/ClearPassword/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/locked-padlock}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Encryption/ClearPassword/Caption}}/></span>\\n</$list>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n<$button message=\\\"tm-set-password\\\" tooltip=<<ipfs-encryption-tooltip>> aria-label={{$:/language/Buttons/Encryption/SetPassword/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/unlocked-padlock}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Encryption/SetPassword/Caption}}/></span>\\n</$list>\\n</$button>\\n</$reveal>\\n\"\n        },\n        \"$:/core/ui/Buttons/ens/publish\": {\n            \"title\": \"$:/core/ui/Buttons/ens/publish\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/language/Buttons/Ens/Publish/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ens/Publish/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ens-publish\\\" tooltip={{$:/language/Buttons/Ens/Publish/Hint}} aria-label={{$:/language/Buttons/Ens/Publish/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/ipfs/core/images/ens}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Publish/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/console/mobile\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/console/mobile\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/preview-open}} {{$:/language/Buttons/Console/Mobile/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Console/Mobile/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-console-mobile\\\" tooltip=<<ipfs-console-tooltip>> aria-label={{$:/language/Buttons/Console/Mobile/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/preview-open}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Console/Mobile/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/pin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/pin\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/chevron-up}} {{$:/language/Buttons/Ipfs/Pin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Pin/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipfs-pin\\\" tooltip={{$:/language/Buttons/Ipfs/Pin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Pin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-up}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipfs/Pin/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/unpin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/unpin\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/chevron-down}} {{$:/language/Buttons/Ipfs/Unpin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Unpin/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipfs-unpin\\\" tooltip={{$:/language/Buttons/Ipfs/Unpin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Unpin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-down}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipfs/Unpin/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipns/publish\": {\n            \"title\": \"$:/core/ui/Buttons/ipns/publish\",\n            \"tags\": \"$:/tags/PageControls $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipns/Publish/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipns/Publish/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipns-publish\\\" tooltip={{$:/language/Buttons/Ipns/Publish/Hint}} aria-label={{$:/language/Buttons/Ipns/Publish/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Publish/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/SideBar/Tools\": {\n            \"title\": \"$:/core/ui/SideBar/Tools\",\n            \"tags\": \"$:/tags/SideBar $:/ipfs/core\",\n            \"caption\": \"{{$:/language/SideBar/Tools/Caption}}\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n\\n<<lingo Basics/Version/Prompt>> <b><<version>></b>\\n\\n<<lingo Ipfs/Build/Prompt>> <b><<ipfs-edition-build>></b> <$ipfslink value=<<version-url title:\\\"$:/ipfs/edition-build\\\" ipath:\\\"editions\\\">>>[img[Available on IPFS|$:/ipfs/core/icons/ipfs]]</$ipfslink>\\n\\n<$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n<$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n<$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageControls]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n<div style=\\\"position:relative;\\\" class={{{ [<listItem>encodeuricomponent[]addprefix[tc-btn-]] }}}>\\n\\n<$checkbox tiddler=<<config-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> <$transclude tiddler=<<listItem>>/> <i class=\\\"tc-muted\\\"><$transclude tiddler=<<listItem>> field=\\\"description\\\"/></i>\\n\\n</div>\\n\\n</$list>\\n\\n</$set>\\n\\n</$set>\\n\\n</$set>\"\n        },\n        \"$:/core/ui/ViewTemplate/ipfs/export\": {\n            \"title\": \"$:/core/ui/ViewTemplate/ipfs/export\",\n            \"tags\": \"$:/tags/ViewTemplate $:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/Export/\\n\\n\\\\define buttons()\\n<$button message=\\\"tm-delete-tiddler\\\" param=<<currentTiddler>>><<lingo Listing/Cancel/Caption>></$button>\\n<$button message=\\\"tm-perform-ipfs-export\\\" param=<<currentTiddler>>><<lingo Listing/Export/Caption>></$button>\\n<<lingo Listing/Preview>> <$select tiddler=\\\"$:/state/ipfsexportpreviewtype\\\" default=\\\"$:/core/ui/IpfsExportPreviews/Text\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/IpfsExportPreview]!has[draft.of]]\\\">\\n<option value=<<currentTiddler>>>{{!!caption}}</option>\\n</$list>\\n</$select>\\n\\\\end\\n\\n<$list filter=\\\"[all[current]field:plugin-type[ipfs-export]]\\\">\\n\\n<div class=\\\"tc-import\\\">\\n\\n<<lingo Listing/Hint>>\\n\\n<<buttons>>\\n\\n{{||$:/core/ui/ipfs/export/listing}}\\n\\n<<buttons>>\\n\\n</div>\\n\\n</$list>\\n\"\n        },\n        \"$:/core/ui/ViewTemplate/ipfs/import\": {\n            \"title\": \"$:/core/ui/ViewTemplate/ipfs/import\",\n            \"tags\": \"$:/tags/ViewTemplate $:/ipfs/core\",\n            \"text\": \"\\\\define lingo-base() $:/language/Import/\\n\\n\\\\define buttons()\\n<$button message=\\\"tm-delete-tiddler\\\" param=<<currentTiddler>>><<lingo Listing/Cancel/Caption>></$button>\\n<$button message=\\\"tm-perform-ipfs-import\\\" param=<<currentTiddler>>><<lingo Listing/Import/Caption>></$button>\\n<<lingo Listing/Preview>> <$select tiddler=\\\"$:/state/ipfsimportpreviewtype\\\" default=\\\"$:/core/ui/ImportPreviews/Text\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ImportPreview]!has[draft.of]]\\\">\\n<option value=<<currentTiddler>>>{{!!caption}}</option>\\n</$list>\\n</$select>\\n\\\\end\\n\\n<$list filter=\\\"[all[current]field:plugin-type[ipfs-import]]\\\">\\n\\n<div class=\\\"tc-import\\\">\\n\\n<<lingo Listing/Hint>>\\n\\n<<buttons>>\\n\\n{{||$:/core/ui/ipfs/import/listing}}\\n\\n<<buttons>>\\n\\n</div>\\n\\n</$list>\\n\"\n        },\n        \"$:/core/ui/ViewTemplate/plugin\": {\n            \"title\": \"$:/core/ui/ViewTemplate/plugin\",\n            \"tags\": \"$:/tags/ViewTemplate $:/ipfs/core\",\n            \"text\": \"<$reveal tag=\\\"div\\\" class=\\\"tc-tiddler-plugin-info\\\" type=\\\"nomatch\\\" stateTitle=<<folded-state>> text=\\\"hide\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\\n<$list filter=\\\"[all[current]has[plugin-type]] -[all[current]field:plugin-type[import]] -[all[current]field:plugin-type[ipfs-export]] -[all[current]field:plugin-type[ipfs-import]]\\\">\\n<$set name=\\\"plugin-type\\\" value={{!!plugin-type}}>\\n<$set name=\\\"default-popup-state\\\" value=\\\"yes\\\">\\n<$set name=\\\"qualified-state\\\" value=<<qualify \\\"$:/state/plugin-info\\\">>>\\n{{||$:/core/ui/Components/plugin-info}}\\n</$set>\\n</$set>\\n</$set>\\n</$list>\\n</$reveal>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export/attachment\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export/attachment\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/language/Buttons/Ipfs/Export/Attachment/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Attachment/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export-attachment\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Attachment/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Attachment/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/ipfs/core/images/ipfs}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Attachment/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export/content\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export/content\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipfs/Export/Content/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Content/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export-content\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Content/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Content/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Content/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipfs/Export/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/tiddler/pin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/tiddler/pin\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/chevron-up}} {{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Tiddler/Pin/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-pin\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Tiddler/Pin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-up}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/tiddler/unpin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/tiddler/unpin\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/chevron-down}} {{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-unpin\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-down}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/tiddler/refresh\": {\n            \"title\": \"$:/core/ui/Buttons/tiddler/refresh\",\n            \"tags\": \"$:/tags/ViewToolbar $:/ipfs/core\",\n            \"caption\": \"{{$:/core/images/refresh-button}} {{$:/language/Buttons/Tiddler/Refresh/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Tiddler/Refresh/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-refresh-tiddler\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Tiddler/Refresh/Hint}} aria-label={{$:/language/Buttons/Tiddler/Refresh/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/refresh-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Tiddler/Refresh/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/config/AutoSave\": {\n            \"title\": \"$:/config/AutoSave\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"no\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/pin\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/pin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/unpin\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/unpin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/console/mobile\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/console/mobile\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ens/publish\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ens/publish\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipns/publish\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipns/publish\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/Standford\": {\n            \"title\": \"$:/config/Standford\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"yes\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/tiddler/refresh\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/tiddler/refresh\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/content\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/content\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/attachment\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/attachment\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/pin\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/pin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/unpin\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/unpin\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/tags/EditTemplate\": {\n            \"title\": \"$:/tags/EditTemplate\",\n            \"tags\": \"$:/ipfs/core\",\n            \"list\": \"[[$:/core/ui/EditTemplate/controls]] [[$:/core/ui/EditTemplate/title]] [[$:/core/ui/EditTemplate/tags]] [[$:/core/ui/EditTemplate/shadow]] [[$:/core/ui/ViewTemplate/classic]] [[$:/core/ui/EditTemplate/type]] [[$:/core/ui/EditTemplate/fields]] [[$:/core/ui/EditTemplate/body]]\"\n        }\n    }\n}"
}