{
    "title": "$:/boot/bootprefix.js",
    "text": "/*\\\ntitle: $:/boot/bootprefix.js\ntags: $:/ipfs/core $:/core $:/boot/bootprefix\ntype: application/javascript\n\n\\*/\n\nvar _bootprefix = function ($tw) {\n  'use strict'\n\n  $tw = $tw || Object.create(null)\n  $tw.boot = $tw.boot || Object.create(null)\n\n  // Detect platforms\n  if (!('browser' in $tw)) {\n    $tw.browser = typeof window !== 'undefined' ? {} : null\n  }\n  if (!('node' in $tw)) {\n    $tw.node = typeof process === 'object' ? {} : null\n  }\n  if (!('nodeWebKit' in $tw)) {\n    $tw.nodeWebKit = $tw.node && global.window && global.window.nwDispatcher ? {} : null\n  }\n\n  // Set default boot tasks\n  $tw.boot.tasks = {\n    trapErrors: !!($tw.browser && !$tw.node),\n    readBrowserTiddlers: !!($tw.browser && !$tw.node),\n  }\n\n  /*\nInformation about each module is kept in an object with these members:\n\tmoduleType: type of module\n\tdefinition: object, function or string defining the module; see below\n\texports: exports of the module, filled in after execution\n\nThe `definition` can be of several types:\n\n* An object can be used to directly specify the exports of the module\n* A function with the arguments `module,require,exports` that returns `exports`\n* A string function body with the same arguments\n\nEach moduleInfo object is stored in two hashmaps: $tw.modules.titles and $tw.modules.types. The first is indexed by title and the second is indexed by type and then title\n*/\n  $tw.modules = {\n    titles: {}, // hashmap by module name of moduleInfo\n    types: {}, // hashmap by module type and then name of moduleInfo\n  }\n\n  /*\nDefine a JavaScript tiddler module for later execution\n\tmoduleName: name of module being defined\n\tmoduleType: type of module\n\tdefinition: module definition; see discussion above\n*/\n  $tw.modules.define = function (moduleName, moduleType, definition) {\n    // Create the moduleInfo\n    var moduleInfo = {\n      moduleType: moduleType,\n      definition: definition,\n      exports: undefined,\n    }\n    // If the definition is already an object we can use it as the exports\n    if (typeof moduleInfo.definition === 'object') {\n      moduleInfo.exports = definition\n    }\n    // Store the module in the titles hashmap\n    if (Object.prototype.hasOwnProperty.call($tw.modules.titles, moduleName)) {\n      console.log('Warning: Redefined module - ' + moduleName)\n    }\n    $tw.modules.titles[moduleName] = moduleInfo\n    // Store the module in the types hashmap\n    if (!Object.prototype.hasOwnProperty.call($tw.modules.types, moduleType)) {\n      $tw.modules.types[moduleType] = {}\n    }\n    if (Object.prototype.hasOwnProperty.call($tw.modules.types[moduleType], moduleName)) {\n      console.log('Warning: Redefined module - ' + moduleName)\n    }\n    $tw.modules.types[moduleType][moduleName] = moduleInfo\n  }\n\n  /*\nExternal JavaScript can populate this array before calling boot.js in order to preload tiddlers\n*/\n  $tw.preloadTiddlers = $tw.preloadTiddlers || []\n\n  /*\nConvenience function for pushing a tiddler onto the preloading array\n*/\n  $tw.preloadTiddler = function (fields) {\n    $tw.preloadTiddlers.push(fields)\n  }\n\n  /*\nConvenience function for pushing an array of tiddlers onto the preloading array\n*/\n  $tw.preloadTiddlerArray = function (fieldsArray) {\n    $tw.preloadTiddlers.push.apply($tw.preloadTiddlers, fieldsArray)\n  }\n\n  return $tw\n}\n\nif (typeof exports === 'undefined') {\n  // Set up $tw global for the browser\n  window.$tw = _bootprefix(window.$tw)\n} else {\n  // Export functionality as a module\n  exports.bootprefix = _bootprefix\n}\n",
    "tags": "$:/ipfs/core $:/core $:/boot/bootprefix",
    "type": "application/javascript",
    "build": "210510418",
    "version": "0.4.0-beta-tw-v5.1.24-pre-release+build-210510418",
    "_license_uri": "https://raw.githubusercontent.com/Jermolene/TiddlyWiki5/master/license",
    "_project_uri": "https://github.com/Jermolene/TiddlyWiki5",
    "_source_uri": "https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/bootprefix.js"
}